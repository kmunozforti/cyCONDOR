[{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"cycondor-dimensionality-reduction-workflow","dir":"Articles","previous_headings":"","what":"1 cyCONDOR dimensionality reduction workflow","title":"Batch correction","text":"first part describes general cyCONDOR data processing dimensionality reduction workflow (see vignettes(\"Data loading transformation\") vignettes(\"Dimensionality Reduction\") details) closer inspection data set identification technical batch effect.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"loading-the-data","dir":"Articles","previous_headings":"1 cyCONDOR dimensionality reduction workflow","what":"Loading the data","title":"Batch correction","text":"start loading data.","code":"condor <- prep_fcd(data_path = \"../.test_files/BatchCorrection/all/\",                    max_cell = 500,                    useCSV = FALSE,                    transformation = \"auto_logi\",                    remove_param = c(\"Time\", \"FSC-H\", \"SSC-H\"),                    anno_table = \"../.test_files/BatchCorrection/all.csv\",                    filename_col = \"filename\" )  # set the date as factor for visualization purposes condor$anno$cell_anno$exp <- as.factor(condor$anno$cell_anno$exp)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"dimensionality-reduction","dir":"Articles","previous_headings":"1 cyCONDOR dimensionality reduction workflow","what":"Dimensionality Reduction","title":"Batch correction","text":"Next, perform dimensionality reduction calculating principal components (PCs) UMAP based PCs.","code":"condor <- runPCA(fcd = condor,                   data_slot = \"orig\")  condor <- runUMAP(fcd = condor,                    input_type = \"pca\",                    data_slot = \"orig\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"inspection-of-batch-effect","dir":"Articles","previous_headings":"1 cyCONDOR dimensionality reduction workflow","what":"Inspection of batch effect","title":"Batch correction","text":"can now visualize batch effect data set plotting UMAP coordinates coloring cells experiment date.","code":"plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               param = \"exp\",               title = \"Original UMAP\") plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               param = \"exp\",               title = \"Original UMAP\",              facet_by_variable = TRUE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"batch-correction","dir":"Articles","previous_headings":"","what":"2 Batch correction","title":"Batch correction","text":"Within cyCONDOR ecosystem implemented harmony CytoNorm batch correction. correction can applied either protein expression values (fluorescence intensities) principal components. ‘magic bullet’ batch correction methods needs used care correct batch effect underlying biological effects. Therefore, described methods always validated inspecting expression hallmark markers. use workflow work please consider citing cyCONDOR harmony CytoNorm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"correct-principal-components","dir":"Articles","previous_headings":"2 Batch correction","what":"2.1 Correct Principal Components","title":"Batch correction","text":"use harmony algorithm correcting principal components, use harmonize_PCA() define batch variable batch_var, example experiment date ‘exp’. harmonized PCs saved condor$pca$norm.","code":"condor <- harmonize_PCA(fcd = condor,                          batch_var = c(\"exp\"),                          data_slot = \"orig\") ## Transposing data matrix ## Initializing state using k-means centroids initialization ## Harmony 1/10 ## Harmony 2/10 ## Harmony 3/10 ## Harmony converged after 3 iterations condor$pca$norm[1:10, 1:5] ##                                                                           PC1 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1  -1.1377724 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2   3.6662881 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3   2.4006793 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4   0.1994315 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5   3.6988799 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_6   3.7043739 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_7   2.5619230 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_8  -2.7855854 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_9   1.8170364 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_10  4.0291312 ##                                                                           PC2 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1  -3.4642730 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2   1.5051951 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3  -0.1952621 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4  -1.0485322 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5  -0.1292137 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_6   0.7853718 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_7   1.2301255 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_8   1.0542023 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_9  -2.3273341 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_10  0.6140877 ##                                                                           PC3 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1  -1.6885949 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2   0.3368425 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3   0.5490619 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4  -0.1086231 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5  -0.1193580 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_6   0.5634436 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_7  -0.7273368 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_8  -0.6713721 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_9  -1.0218579 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_10  0.7951340 ##                                                                            PC4 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1   1.89605907 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2  -0.71224125 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3   2.50342900 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4   0.79742800 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5   0.81283079 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_6   0.73554764 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_7   0.62596763 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_8  -0.83265025 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_9   0.19543499 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_10 -0.07020503 ##                                                                            PC5 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1   0.95653887 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2   0.28052891 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3   1.47298748 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4  -2.31488868 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5   1.22041393 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_6  -0.34905325 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_7   1.03657568 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_8   0.73296934 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_9  -1.72791133 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_10  0.03643929"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"repeat-dimensionality-reduction","dir":"Articles","previous_headings":"2 Batch correction > 2.1 Correct Principal Components","what":"Repeat dimensionality reduction","title":"Batch correction","text":"can now recalculate UMAP based harmonized PCs. select input_type = \"pca\" data_slot = \"norm\". Unless prefix set, new UMAP coordinates calculated based harmonized PCs can accessed via condor$umap$pca_norm.","code":"condor <- runUMAP(fcd = condor,                    input_type = \"pca\",                    data_slot = \"norm\",                   prefix= NULL) condor$umap$pca_norm[1:5,] ##                                                                      UMAP1 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1 3.710886 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2 9.692592 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3 7.363851 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4 3.840179 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5 6.542572 ##                                                                       UMAP2 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_1  7.799647 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_2 -6.828268 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_3 -7.482562 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_4  2.904735 ## 20230322_AB_20220406_DH_193223821_193363_E2_Live_cells_comp.fcs_5 -6.905147"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"umap","dir":"Articles","previous_headings":"2 Batch correction > 2.1 Correct Principal Components > Visualization of the data integration results","what":"UMAP","title":"Batch correction","text":"first inspection data integration, can visualize results plotting new UMAP coordinates coloring cells experiment date. UMAP shows strong separation cells experiment date anymore. inspect data integration results, expression cell type lineage markers assessed. highly dependent markers measured flow cytometry data set therefore included vignette.","code":"plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_norm\",               param = \"exp\",               title = \"Harmonized UMAP\") plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_norm\",               param = \"exp\",               title = \"Harmonized UMAP\",              facet= TRUE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"lisi-score","dir":"Articles","previous_headings":"2 Batch correction > 2.1 Correct Principal Components > Visualization of the data integration results","what":"LISI score","title":"Batch correction","text":"inspect data integration result, can calculate Local Inverse Simpson’s Index (LISI) score. LISI score can used assess degree mixing among cells different batches UMAP space.","code":"#prepare pre batch correction data set pre_batch <- cbind(condor$umap$pca_orig, condor$anno$cell_anno) #calculate LISI score for batch variable 'exp' res_pre <- compute_lisi(pre_batch[,c(1,2)], pre_batch, c('exp')) colnames(res_pre) <- \"lisi\" #combine LISI score with cell annotation lisi_mat_pre <- cbind(pre_batch, res_pre) lisi_mat_pre$type <- \"pre\"  #prepare ppost batch correction data set post_batch <- cbind(condor$umap$pca_norm, condor$anno$cell_anno) #calculate LISI score for batch variable 'exp' res_post <- compute_lisi(post_batch[,c(1,2)], post_batch, c('exp')) colnames(res_post) <- \"lisi\" #combine LISI score with cell annotation lisi_mat_post <- cbind(post_batch, res_post) lisi_mat_post$type <- \"post\"  #combine pre and post batch matrices  lisi_mat <- rbind(lisi_mat_post, lisi_mat_pre) lisi_mat$type <- factor(lisi_mat$type, levels = c(\"pre\", \"post\"))  #visualization  p <- ggplot(data = lisi_mat, aes(y = lisi, x = type, fill = type)) +   geom_jitter_rast(alpha = 0.01, scale =0.5) +   geom_violin(alpha = 0.8) +   scale_fill_manual(values= c(\"#1C75BC\", \"#BE1E2D\"))+   theme_bw() +   theme(aspect.ratio = 2, panel.grid = element_blank(),         text= element_text(size=16, color= \"black\")) +    xlab(\"\")+   ylab(\"LISI score\") p"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"correct-fluorescent-intensities","dir":"Articles","previous_headings":"2 Batch correction","what":"2.2 Correct fluorescent intensities","title":"Batch correction","text":"alternative correcting embedding, fluorescent intensities can directly corrected using harmony CytoNorm. However, direct correction fluorescence intensities used caution, biological differences groups conditions planned compared downstream analysis.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"correct-fluorescent-intensities-with-harmony","dir":"Articles","previous_headings":"2 Batch correction > 2.2 Correct fluorescent intensities","what":"Correct fluorescent intensities with harmony","title":"Batch correction","text":"use harmony algorithm correcting intensities, use harmonize_intensities() define batch variable batch_var, case ‘exp’. harmonized intensities saved condor$expr$norm.","code":"condor <- harmonize_intensities(fcd = condor,                                  batch_var = c(\"exp\")) ## Transposing data matrix ## Initializing state using k-means centroids initialization ## Harmony 1/10 ## Harmony 2/10 ## Harmony 3/10 ## Harmony converged after 3 iterations"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"correct-fluorescent-intensities-with-cytonorm","dir":"Articles","previous_headings":"2 Batch correction > 2.2 Correct fluorescent intensities","what":"Correct fluorescent intensities with CytoNorm","title":"Batch correction","text":"Another approach correcting fluorescence intensities application CytoNorm algorithm within cyCONDOR ecosystem. detailed description CytoNorm see Van Gassen et al., 2019. first step, batch effect learnt reference samples provided user. control samples contain whole range expression values markers panel. example case stimulation experiment including unstimulated stimulated samples control samples improved estimation batch effect (Van Gassen et al., 2019). Ideally samples used reference samples stained recorded along samples within batch. Depending data set, also possible use samples contained data set reference samples train model learn differences batches shown example .","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"training-the-model","dir":"Articles","previous_headings":"2 Batch correction > 2.2 Correct fluorescent intensities > Correct fluorescent intensities with CytoNorm","what":"Training the model","title":"Batch correction","text":", model trained samples contained data set. need provide name batch variable batch_var optionally parameters included training well different parameters clustering cells FlowSOM (FlowSom_param). , use markers present fcd perform training default parameters FlowSom_param. number desired FlowSOM metaclusters defined nClus adjusted according data set, see Van Gassen et al., 2019 details.","code":"condor <- train_cytonorm(fcd = condor,                          batch_var = \"exp\",                          remove_param = NULL,                          FlowSOM_param = list(nCells = 5000, xdim = 5, ydim = 5, nClus = 10, scale = FALSE),                           seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"normalization-of-data-with-trained-model","dir":"Articles","previous_headings":"2 Batch correction > 2.2 Correct fluorescent intensities > Correct fluorescent intensities with CytoNorm","what":"Normalization of data with trained model","title":"Batch correction","text":"Next trained model saved within fcd used normalize samples present fcd. fcs files normalized expression values can saved, keep_fcs set TRUE.","code":"condor <- run_cytonorm(fcd = condor,                        files = NULL,                        batch_var = \"exp\",                        keep_fcs = FALSE) ## start normalization ## adding normalized expression data to fcd ## removing temporary fcs files"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Batch_correction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Batch correction","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] lisi_1.0       ggrastr_1.0.2  ggplot2_3.5.2  cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] xfun_0.52                   ggpubr_0.6.1                ##  [25] ellipsis_0.3.2              survival_3.8-3              ##  [27] memoise_2.0.1               hexbin_1.28.5               ##  [29] ggbeeswarm_0.7.2            RProtoBufLib_2.18.0         ##  [31] princurve_2.1.6             profvis_0.4.0               ##  [33] ggsci_3.2.0                 systemfonts_1.2.3           ##  [35] ragg_1.4.0                  zoo_1.8-14                  ##  [37] GlobalOptions_0.1.2         DEoptimR_1.1-3-1            ##  [39] Formula_1.2-5               promises_1.3.3              ##  [41] scatterplot3d_0.3-44        httr_1.4.7                  ##  [43] rstatix_0.7.2               globals_0.18.0              ##  [45] rstudioapi_0.17.1           UCSC.utils_1.2.0            ##  [47] miniUI_0.1.2                generics_0.1.4              ##  [49] ggcyto_1.34.0               base64enc_0.1-3             ##  [51] curl_6.4.0                  S4Vectors_0.44.0            ##  [53] zlibbioc_1.52.0             flowWorkspace_4.18.1        ##  [55] polyclip_1.10-7             randomForest_4.7-1.2        ##  [57] GenomeInfoDbData_1.2.13     SparseArray_1.6.2           ##  [59] RBGL_1.82.0                 ncdfFlow_2.52.1             ##  [61] RcppEigen_0.3.4.0.2         xtable_1.8-4                ##  [63] stringr_1.5.1               desc_1.4.3                  ##  [65] doParallel_1.0.17           evaluate_1.0.4              ##  [67] S4Arrays_1.6.0              hms_1.1.3                   ##  [69] glmnet_4.1-9                GenomicRanges_1.58.0        ##  [71] irlba_2.3.5.1               colorspace_2.1-1            ##  [73] harmony_1.2.3               reticulate_1.42.0           ##  [75] readxl_1.4.5                magrittr_2.0.3              ##  [77] lmtest_0.9-40               readr_2.1.5                 ##  [79] Rgraphviz_2.50.0            later_1.4.2                 ##  [81] lattice_0.22-7              future.apply_1.20.0         ##  [83] robustbase_0.99-4-1         XML_3.99-0.18               ##  [85] cowplot_1.2.0               matrixStats_1.5.0           ##  [87] RcppAnnoy_0.0.22            xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] RhpcBLASctl_0.23-42         rbibutils_2.3               ## [151] smoother_1.3                fastmap_1.2.0               ## [153] rmarkdown_2.29              scales_1.4.0                ## [155] grid_4.4.2                  usethis_3.1.0               ## [157] broom_1.0.8                 sass_0.4.10                 ## [159] graph_1.84.1                carData_3.0-5               ## [161] RANN_2.6.2                  rpart_4.1.24                ## [163] farver_2.1.2                reformulas_0.4.1            ## [165] yaml_2.3.10                 MatrixGenerics_1.18.1       ## [167] foreign_0.8-90              ggthemes_5.1.0              ## [169] cli_3.6.5                   purrr_1.1.0                 ## [171] stats4_4.4.2                lifecycle_1.0.4             ## [173] uwot_0.2.3                  askpass_1.2.1               ## [175] caret_7.0-1                 Biobase_2.66.0              ## [177] mvtnorm_1.3-3               lava_1.8.1                  ## [179] sessioninfo_1.2.3           backports_1.5.0             ## [181] cytolib_2.18.2              timechange_0.3.0            ## [183] gtable_0.3.6                rjson_0.2.23                ## [185] umap_0.2.10.0               ggridges_0.5.6              ## [187] parallel_4.4.2              pROC_1.18.5                 ## [189] limma_3.62.2                jsonlite_2.0.0              ## [191] edgeR_4.4.2                 RcppHNSW_0.6.0              ## [193] Rtsne_0.17                  FlowSOM_2.14.0              ## [195] ranger_0.17.0               flowCore_2.18.0             ## [197] jquerylib_0.1.4             timeDate_4041.110           ## [199] shiny_1.11.1                ConsensusClusterPlus_1.70.0 ## [201] htmltools_0.5.8.1           diffcyt_1.26.1              ## [203] glue_1.8.0                  XVector_0.46.0              ## [205] VIM_6.2.2                   gridExtra_2.3               ## [207] boot_1.3-31                 TrajectoryUtils_1.14.0      ## [209] igraph_2.1.4                R6_2.6.1                    ## [211] tidyr_1.3.1                 SingleCellExperiment_1.28.1 ## [213] labeling_0.4.3              vcd_1.4-13                  ## [215] cluster_2.1.8.1             pkgload_1.4.0               ## [217] GenomeInfoDb_1.42.3         ipred_0.9-15                ## [219] nloptr_2.2.1                DelayedArray_0.32.0         ## [221] tidyselect_1.2.1            vipor_0.4.7                 ## [223] htmlTable_2.4.3             ggforce_0.5.0               ## [225] CytoDx_1.26.0               car_3.1-3                   ## [227] future_1.58.0               ModelMetrics_1.2.2.2        ## [229] laeken_0.5.3                data.table_1.17.8           ## [231] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       ## [233] RColorBrewer_1.1-3          rlang_1.1.6                 ## [235] remotes_2.5.0               colorRamps_2.3.4            ## [237] Cairo_1.6-2                 ggnewscale_0.5.2            ## [239] hardhat_1.4.1               beeswarm_0.4.0              ## [241] prodlim_2025.04.28"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"conda-load","dir":"Articles","previous_headings":"Prepare your python environment","what":"Conda load","title":"Cell type prediction","text":"using cyCONDOR Docker container can visualize list available conda environment.","code":"conda_list() ##    name                           python ## 1  base            /opt/conda/bin/python ## 2 astir /opt/conda/envs/astir/bin/python"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"activate-conda","dir":"Articles","previous_headings":"Prepare your python environment","what":"Activate Conda","title":"Cell type prediction","text":"Now simple need activate Astir environment ready run workflow.","code":"use_condaenv(condaenv = \"astir\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"load-example-condor-object","dir":"Articles","previous_headings":"Prepare your python environment","what":"Load example condor object","title":"Cell type prediction","text":"workflow use example dataset already analysed cyCONDOR.","code":"condor <- readRDS(\"../.test_files/Astir/condor_example_astir.rds\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"run-astir-prediction","dir":"Articles","previous_headings":"","what":"Run Astir prediction","title":"Cell type prediction","text":"Astir allows predict either cell type cell state, details package see official manuscript (Geuenich et al. Cell Systems, 2021). prediction Astir needs manifest file characteristinc cell type cell state specified. manifest file save .yml file structure: can now run two functions prediction cell type (run_astir_celltype) cell state (run_astir_cellstate).","code":"head ../.test_files/Astir/marker.yml -n 200 ## cell_types: ##   CD4T: ##     - CD3 ##     - CD4 ##   CD8T: ##     - CD3 ##     - CD8 ##   NKT: ##     - CD3 ##     - CD56 ##   NKBright: ##     - CD56 ##     - CD16 ##   NKDim: ##     - CD56 ##   B: ##     - CD19 ##   pDCs: ##     - CD123 (IL3RA) ##   Classical_Monocytes: ##     - CD14 ##     - HLA-DR ##   cd16_Monocytes: ##     - CD14 ##     - HLA-DR ##     - CD16 ##  ## cell_states: ##   Naive: ##     - CD45RA ##   Temra: ##     - CD45RA ##     - CD197 (CCR7) ##   TCM: ##     - CD197 (CCR7)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"run-astrir-to-predict-cell-type","dir":"Articles","previous_headings":"Run Astir prediction","what":"Run Astrir to predict cell type","title":"Cell type prediction","text":"function predict cell type based marker selection specified manifest file. output function saved within condor object condor$astir$Astir_cell_type_[data_slot]. Additionally QC data saved analysis_path directory .csv","code":"condor <- runAstir_celltype(fcd = condor,                             data_slot = \"orig\",                             analysis_path = \"../.test_files/Astir/\",                             manifest_name = \"marker.yml\",                             max_epochs = 1000,                             learning_rate = 0.002,                             initial_epochs = 3) ## cell_type ##                   B      cd16_Monocytes                CD4T                CD8T  ##                1195                2171               17604               12338  ## Classical_Monocytes            NKBright               NKDim                 NKT  ##               13989                6589                 669                1618  ##               Other                pDCs             Unknown  ##                 657                 525                1694"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"run-astrir-to-predict-cell-state","dir":"Articles","previous_headings":"Run Astir prediction","what":"Run Astrir to predict cell state","title":"Cell type prediction","text":"Similarly previous function runAstir_cellstates function calculates score cell state declared manifest file. results saved condor object slot condor$astir$Astir_cell_state_[data_slot]. Also case additional information stored analysis_path directory .csv format.","code":"condor <- runAstir_cellstates(fcd = condor,                               data_slot = \"orig\",                               analysis_path = \"../.test_files/Astir/\",                               manifest_name = \"marker.yml\",                               max_epochs = 1000,                               learning_rate = 0.002,                               initial_epochs = 3)"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"cell-type-predictiom","dir":"Articles","previous_headings":"Explore Astrir output","what":"Cell type predictiom","title":"Cell type prediction","text":"","code":"head(read.csv(\"../.test_files/Astir/cell_types.csv\")) ##            X           cell_type ## 1 ID10.fcs_1 Classical_Monocytes ## 2 ID10.fcs_2                   B ## 3 ID10.fcs_3                CD8T ## 4 ID10.fcs_4                CD8T ## 5 ID10.fcs_5 Classical_Monocytes ## 6 ID10.fcs_6                 NKT head(read.csv(\"../.test_files/Astir/probabilities.csv\")) ##            X         CD4T         CD8T          NKT     NKBright        NKDim ## 1 ID10.fcs_1 1.367795e-07 1.040441e-06 2.237096e-08 2.666305e-08 2.577234e-09 ## 2 ID10.fcs_2 1.324877e-09 1.897896e-08 8.172032e-09 1.478764e-06 8.104055e-07 ## 3 ID10.fcs_3 7.930615e-07 9.996531e-01 3.249013e-04 2.514041e-11 9.783583e-07 ## 4 ID10.fcs_4 4.006673e-06 9.991856e-01 8.099304e-04 1.315141e-08 1.246818e-08 ## 5 ID10.fcs_5 4.936036e-08 4.064938e-08 3.321160e-09 1.654602e-09 1.129317e-08 ## 6 ID10.fcs_6 4.400705e-04 1.701123e-03 9.978535e-01 6.876026e-07 1.317771e-09 ##              B         pDCs Classical_Monocytes cd16_Monocytes        Other ## 1 7.560338e-08 3.908119e-08        7.289595e-01   2.710360e-01 3.219714e-06 ## 2 9.988234e-01 9.412180e-08        4.065692e-04   4.887747e-04 2.788651e-04 ## 3 4.291974e-08 2.102051e-08        4.663446e-10   9.128537e-10 2.016069e-05 ## 4 3.226020e-09 9.898312e-10        5.188650e-09   6.706455e-09 4.622255e-07 ## 5 3.198307e-08 3.116859e-06        9.999630e-01   2.644898e-05 7.325300e-06 ## 6 1.727692e-09 2.275862e-09        3.762259e-10   4.302245e-07 4.208238e-06"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"cell-state","dir":"Articles","previous_headings":"Explore Astrir output","what":"Cell State","title":"Cell type prediction","text":"","code":"head(read.csv(\"../.test_files/Astir/cell_states.csv\")) ##            X     Naive     Temra       TCM ## 1 ID10.fcs_1 0.6374948 0.5499843 0.5300270 ## 2 ID10.fcs_2 0.9017660 0.4957597 0.4049620 ## 3 ID10.fcs_3 0.6665408 0.5347504 0.5063865 ## 4 ID10.fcs_4 0.8504398 0.3773496 0.3034684 ## 5 ID10.fcs_5 0.7882705 0.3863390 0.3289931 ## 6 ID10.fcs_6 0.8909467 0.4584617 0.3715501"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Cell_type_prediction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Cell type prediction","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] reticulate_1.42.0 cyCONDOR_0.3.1    ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] readxl_1.4.5                magrittr_2.0.3              ##  [77] lmtest_0.9-40               readr_2.1.5                 ##  [79] Rgraphviz_2.50.0            later_1.4.2                 ##  [81] lattice_0.22-7              future.apply_1.20.0         ##  [83] robustbase_0.99-4-1         XML_3.99-0.18               ##  [85] cowplot_1.2.0               matrixStats_1.5.0           ##  [87] xts_0.14.1                  class_7.3-23                ##  [89] Hmisc_5.2-3                 pillar_1.11.0               ##  [91] nlme_3.1-168                iterators_1.0.14            ##  [93] compiler_4.4.2              RSpectra_0.16-2             ##  [95] stringi_1.8.7               gower_1.0.2                 ##  [97] minqa_1.2.8                 SummarizedExperiment_1.36.0 ##  [99] lubridate_1.9.4             devtools_2.4.5              ## [101] CytoML_2.18.3               plyr_1.8.9                  ## [103] crayon_1.5.3                abind_1.4-8                 ## [105] locfit_1.5-9.12             sp_2.2-0                    ## [107] sandwich_3.1-1              pcaMethods_1.98.0           ## [109] dplyr_1.1.4                 codetools_0.2-20            ## [111] multcomp_1.4-28             textshaping_1.0.1           ## [113] recipes_1.3.1               openssl_2.3.3               ## [115] Rphenograph_0.99.1          TTR_0.24.4                  ## [117] bslib_0.9.0                 e1071_1.7-16                ## [119] destiny_3.20.0              GetoptLong_1.0.5            ## [121] ggplot.multistats_1.0.1     mime_0.13                   ## [123] splines_4.4.2               circlize_0.4.16             ## [125] Rcpp_1.1.0                  sparseMatrixStats_1.18.0    ## [127] cellranger_1.1.0            knitr_1.50                  ## [129] clue_0.3-66                 lme4_1.1-37                 ## [131] fs_1.6.6                    listenv_0.9.1               ## [133] checkmate_2.3.2             DelayedMatrixStats_1.28.1   ## [135] Rdpack_2.6.4                pkgbuild_1.4.8              ## [137] ggsignif_0.6.4              tibble_3.3.0                ## [139] Matrix_1.7-3                rpart.plot_3.1.2            ## [141] statmod_1.5.0               tzdb_0.5.0                  ## [143] tweenr_2.0.3                pkgconfig_2.0.3             ## [145] pheatmap_1.0.13             tools_4.4.2                 ## [147] cachem_1.1.0                rbibutils_2.3               ## [149] smoother_1.3                fastmap_1.2.0               ## [151] rmarkdown_2.29              scales_1.4.0                ## [153] grid_4.4.2                  usethis_3.1.0               ## [155] broom_1.0.8                 sass_0.4.10                 ## [157] graph_1.84.1                carData_3.0-5               ## [159] RANN_2.6.2                  rpart_4.1.24                ## [161] farver_2.1.2                reformulas_0.4.1            ## [163] yaml_2.3.10                 MatrixGenerics_1.18.1       ## [165] foreign_0.8-90              ggthemes_5.1.0              ## [167] cli_3.6.5                   purrr_1.1.0                 ## [169] stats4_4.4.2                lifecycle_1.0.4             ## [171] uwot_0.2.3                  askpass_1.2.1               ## [173] caret_7.0-1                 Biobase_2.66.0              ## [175] mvtnorm_1.3-3               lava_1.8.1                  ## [177] sessioninfo_1.2.3           backports_1.5.0             ## [179] cytolib_2.18.2              timechange_0.3.0            ## [181] gtable_0.3.6                rjson_0.2.23                ## [183] umap_0.2.10.0               ggridges_0.5.6              ## [185] parallel_4.4.2              pROC_1.18.5                 ## [187] limma_3.62.2                jsonlite_2.0.0              ## [189] edgeR_4.4.2                 RcppHNSW_0.6.0              ## [191] ggplot2_3.5.2               Rtsne_0.17                  ## [193] FlowSOM_2.14.0              ranger_0.17.0               ## [195] flowCore_2.18.0             jquerylib_0.1.4             ## [197] timeDate_4041.110           shiny_1.11.1                ## [199] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [201] diffcyt_1.26.1              rappdirs_0.3.3              ## [203] glue_1.8.0                  XVector_0.46.0              ## [205] VIM_6.2.2                   gridExtra_2.3               ## [207] boot_1.3-31                 TrajectoryUtils_1.14.0      ## [209] igraph_2.1.4                R6_2.6.1                    ## [211] tidyr_1.3.1                 SingleCellExperiment_1.28.1 ## [213] vcd_1.4-13                  cluster_2.1.8.1             ## [215] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [217] ipred_0.9-15                nloptr_2.2.1                ## [219] DelayedArray_0.32.0         tidyselect_1.2.1            ## [221] vipor_0.4.7                 htmlTable_2.4.3             ## [223] ggforce_0.5.0               CytoDx_1.26.0               ## [225] car_3.1-3                   future_1.58.0               ## [227] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [229] data.table_1.17.8           htmlwidgets_1.6.4           ## [231] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [233] rlang_1.1.6                 remotes_2.5.0               ## [235] colorRamps_2.3.4            ggnewscale_0.5.2            ## [237] hardhat_1.4.1               beeswarm_0.4.0              ## [239] prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Clustering_and_cell_annotation.html","id":"load-an-example-dataset","dir":"Articles","previous_headings":"","what":"Load an example dataset","title":"Clustering and cell annotation","text":"cyCONDOR ecosystem provides different clustering methods, Phenograph FlowSOM. also provides convenient way assign cell annotations clustered object. clustering functions take condor object fcd input matrix used calculation clusters data_slot input (e.g. orig norm). recommend using PCA coordinates input_type compensate fluctuations expression data. defining prefix gets incorporated slot name output, function can run different settings results saved accordingly. functions return fcd additional data frame corresponding calculated clustering saved fcd$clustering. name output consists prefix (given), clustering method data_slot. Additionally, using expression matrix input, user option specifically state markers used calculation listing markers. list can either written manually extracted directly condor object using implemented functions measured_markers used_markers default available markers condor object used. discard option set TRUE, markers except ones listed markers used calculation. enables exclusion single markers. using pca input possible specify number PCs used.","code":"condor <- readRDS(\"../.test_files/conodr_example_016.rds\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Clustering_and_cell_annotation.html","id":"phenograph-clustering","dir":"Articles","previous_headings":"","what":"Phenograph clustering","title":"Clustering and cell annotation","text":"runPhenograph based package Rphenoannoy, optimized version Rphenograph. clustering method designed high-dimensional single-cell data analysis incorporating approximate k-nearest neighbor (kNN) technique graph construction. k parameter defines number nearest neighbors used nearest-neighbor graph, higher values resulting fewer clusters. can useful try different settings get desired cluster resolution. seed can set ensure reproducibility clustering. details see: Chen H (2015). “Rphenograph: R implementation phenograph algorithm”. R package version 0.99.1. https://github.com/JinmiaoChenLab/Rphenograph Stuchly J (2020). “Rphenoannoy: R implementation phenograph algorithm - approximate KNN modification, based Rphenograph package”. R package version 0.1.0. https://github.com/stuchly/Rphenoannoy output phenograph clustering can accessed condor$clustering$phenograph_pca_orig_k_60.","code":"condor <- runPhenograph(fcd = condor,                          input_type = \"pca\",                          data_slot = \"orig\",                          k = 60,                          seed = 91) ## Run Rphenograph starts: ##   -Input data of 59049 rows and 28 columns ##   -k is set to 60 ##   Finding nearest neighbors...DONE ~ 40.038 s ##   Compute jaccard coefficient between nearest-neighbor sets... ## Presorting knn... ## presorting DONE ~ 2.483 s ##   Start jaccard ## DONE ~ 3.548 s ##   Build undirected graph from the weighted links...DONE ~ 3.417 s ##   Run louvain clustering on the graph ...DONE ~ 13.799 s ## Run Rphenograph DONE, totally takes 60.802s. ##   Return a community class ##   -Modularity value: 0.8746552  ##   -Number of clusters: 25"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Clustering_and_cell_annotation.html","id":"flowsom-clustering","dir":"Articles","previous_headings":"","what":"FlowSOM clustering","title":"Clustering and cell annotation","text":"runFlowSOM provides fast algorithm cluster high number cells. nClusters parameter defines final number clusters generated. seed can set ensure reproducibility clustering. details see: Van Gassen S et al. (2015) “FlowSOM: Using self-organizing maps visualization interpretation cytometry data.” Cytom Part J Int Soc Anal Cytol 87: 636-645. https://onlinelibrary.wiley.com/doi/full/10.1002/cyto..22625 output FlowSOM clustering can accessed condor$clustering$FlowSOM_pca_orig_k_60.","code":"condor <- runFlowSOM(fcd = condor,                       input_type = \"pca\",                       data_slot = \"orig\",                       nClusters = 15,                       seed = 91,                       ret_model = TRUE) ## Building SOM ## Mapping data to SOM ## Building MST"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Clustering_and_cell_annotation.html","id":"metaclustering","dir":"Articles","previous_headings":"","what":"Metaclustering","title":"Clustering and cell annotation","text":"cluster can now labeled according specific cell type metaclustering function. function takes condor object (fcd) cluster_slot input. cluster_var_new parameter names new column containing cell types. metacluster parameter named vector acting translation table annotate cell cluster.","code":"condor <- metaclustering(fcd = condor,                           cluster_slot = \"phenograph_pca_orig_k_60\",                           cluster_var = \"Phenograph\",                           cluster_var_new = \"metaclusters\",                           metaclusters = c(\"1\" = \"Classical Monocytes\",                                           \"2\" = \"CD4 CD45RA+ CD127+\",                                           \"3\" = \"CD8 CD45RA+ CD127+\",                                            \"4\" = \"NK dim\",                                           \"5\" = \"CD8 CD45RA+ CD127-\",                                           \"6\" = \"Classical Monocytes\",                                           \"7\" = \"Unconventional T cells\",                                            \"8\" = \"CD4 CD45RA- CD127+\",                                           \"9\" = \"CD16+ Monocytes\",                                           \"10\" = \"CD4 CD127-\",                                           \"11\" = \"Classical Monocytes\",                                            \"12\" = \"CD8 CD45RA- CD127+\",                                            \"13\" = \"CD8 CD45RA- CD127+\",                                           \"14\" = \"NK bright\",                                           \"15\" = \"CD8 CD45RA+ CD127-\",                                           \"16\" = \"CD4 CD25+\",                                           \"17\" = \"B cells\",                                           \"18\" = \"Unconventional T cells\",                                           \"19\" = \"Classical Monocytes\",                                           \"20\" = \"pDCs\",                                           \"21\" = \"CD8 CD45RA+ CD127+\",                                           \"22\" = \"Basophils\",                                           \"23\" = \"Mixed\",                                           \"24\" = \"B cells\",                                           \"25\" = \"NK bright\")) ##    cluster            metacluster ## 1        1    Classical Monocytes ## 2        2     CD4 CD45RA+ CD127+ ## 3        3     CD8 CD45RA+ CD127+ ## 4        4                 NK dim ## 5        5     CD8 CD45RA+ CD127- ## 6        6    Classical Monocytes ## 7        7 Unconventional T cells ## 8        8     CD4 CD45RA- CD127+ ## 9        9        CD16+ Monocytes ## 10      10             CD4 CD127- ## 11      11    Classical Monocytes ## 12      12     CD8 CD45RA- CD127+ ## 13      13     CD8 CD45RA- CD127+ ## 14      14              NK bright ## 15      15     CD8 CD45RA+ CD127- ## 16      16              CD4 CD25+ ## 17      17                B cells ## 18      18 Unconventional T cells ## 19      19    Classical Monocytes ## 20      20                   pDCs ## 21      21     CD8 CD45RA+ CD127+ ## 22      22              Basophils ## 23      23                  Mixed ## 24      24                B cells ## 25      25              NK bright"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Clustering_and_cell_annotation.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Clustering and cell annotation","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               caret_7.0-1                 ## [175] Biobase_2.66.0              mvtnorm_1.3-3               ## [177] lava_1.8.1                  sessioninfo_1.2.3           ## [179] backports_1.5.0             cytolib_2.18.2              ## [181] timechange_0.3.0            gtable_0.3.6                ## [183] rjson_0.2.23                umap_0.2.10.0               ## [185] ggridges_0.5.6              Rphenoannoy_0.1.0           ## [187] parallel_4.4.2              pROC_1.18.5                 ## [189] limma_3.62.2                jsonlite_2.0.0              ## [191] edgeR_4.4.2                 RcppHNSW_0.6.0              ## [193] ggplot2_3.5.2               Rtsne_0.17                  ## [195] FlowSOM_2.14.0              ranger_0.17.0               ## [197] flowCore_2.18.0             jquerylib_0.1.4             ## [199] timeDate_4041.110           shiny_1.11.1                ## [201] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [203] diffcyt_1.26.1              glue_1.8.0                  ## [205] XVector_0.46.0              VIM_6.2.2                   ## [207] gridExtra_2.3               boot_1.3-31                 ## [209] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [211] R6_2.6.1                    tidyr_1.3.1                 ## [213] SingleCellExperiment_1.28.1 vcd_1.4-13                  ## [215] cluster_2.1.8.1             pkgload_1.4.0               ## [217] GenomeInfoDb_1.42.3         ipred_0.9-15                ## [219] nloptr_2.2.1                DelayedArray_0.32.0         ## [221] tidyselect_1.2.1            vipor_0.4.7                 ## [223] htmlTable_2.4.3             ggforce_0.5.0               ## [225] CytoDx_1.26.0               car_3.1-3                   ## [227] future_1.58.0               ModelMetrics_1.2.2.2        ## [229] laeken_0.5.3                data.table_1.17.8           ## [231] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       ## [233] RColorBrewer_1.1-3          rlang_1.1.6                 ## [235] remotes_2.5.0               colorRamps_2.3.4            ## [237] ggnewscale_0.5.2            hardhat_1.4.1               ## [239] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Loading_and_Transformation.html","id":"how-to-load-data","dir":"Articles","previous_headings":"","what":"How to load data","title":"Data Loading and Transformation","text":"cyCONDOR provides integrated function prepare condor object (flow cytometry dataset) starting input files either .fcs .csv format. files saved single directory path stated data_path. user can define number (cells) process file within ‘max_cell’. input type .csv useCSV setting set TRUE. important keep mind currently files data_path folder loaded independently also included annotation table, can induce slight differences auto-logicle transformation, avoid include data_path files plan analyse. data transformation cyCONDOR provides different options: auto_logi: HDFC Spectral Flow data (recommended, auto-logicle transformation). transformation gives good results also cyTOF data, especially experiencing lot noise arcsinh due negative values. auto-logicle transformation inherited Cytofkit package Chen er al. 2016. clr: Recommended CITE-seq data (centered log ratio transformation) arcsinh: arcsinh transformation, common transformation CyTOF data. default co-factor 5 used (optimal setting CyTOF dataset), conventional cytometry co-factor 150 usually suggested. spectral data higher co-factors might needed need tested individual cases. last important piece build condor object annotation table. annotation table contain necessary metadata used analysis well column containing names input files supplied .csv file. column containing file names stated ‘filename_col’. exemplary metadata table shown. Unwanted parameters important downstream analysis (e.g. Time) removed can listed remove_param. prep_fcd function also set seed reproducibility since subsetting max_cell otherwise randomized.","code":"read.csv(\"../.test_files/metadata.csv\") ##    filename sample_ID group batch ## 1   ID1.fcs       ID1  ctrl  Day1 ## 2   ID2.fcs       ID2   pat  Day1 ## 3   ID3.fcs       ID3  ctrl  Day2 ## 4   ID4.fcs       ID4   pat  Day2 ## 5   ID5.fcs       ID5  ctrl  Day2 ## 6   ID6.fcs       ID6   pat  Day2 ## 7   ID7.fcs       ID7  ctrl  Day3 ## 8   ID8.fcs       ID8   pat  Day3 ## 9   ID9.fcs       ID9  ctrl  Day3 ## 10 ID10.fcs      ID10   pat  Day3 condor <- prep_fcd(data_path = \"../.test_files/fcs/\",                     max_cell = 1000,                     useCSV = FALSE,                     transformation = \"auto_logi\",                     remove_param = c(\"FSC-H\", \"SSC-H\", \"FSC-W\", \"SSC-W\", \"Time\"),                     anno_table = \"../.test_files/metadata.csv\",                     filename_col = \"filename\",                    seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Loading_and_Transformation.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Data Loading and Transformation","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               caret_7.0-1                 ## [175] Biobase_2.66.0              mvtnorm_1.3-3               ## [177] lava_1.8.1                  sessioninfo_1.2.3           ## [179] backports_1.5.0             cytolib_2.18.2              ## [181] timechange_0.3.0            gtable_0.3.6                ## [183] rjson_0.2.23                umap_0.2.10.0               ## [185] ggridges_0.5.6              parallel_4.4.2              ## [187] pROC_1.18.5                 limma_3.62.2                ## [189] jsonlite_2.0.0              edgeR_4.4.2                 ## [191] RcppHNSW_0.6.0              ggplot2_3.5.2               ## [193] Rtsne_0.17                  FlowSOM_2.14.0              ## [195] ranger_0.17.0               flowCore_2.18.0             ## [197] jquerylib_0.1.4             timeDate_4041.110           ## [199] shiny_1.11.1                ConsensusClusterPlus_1.70.0 ## [201] htmltools_0.5.8.1           diffcyt_1.26.1              ## [203] glue_1.8.0                  XVector_0.46.0              ## [205] VIM_6.2.2                   gridExtra_2.3               ## [207] boot_1.3-31                 TrajectoryUtils_1.14.0      ## [209] igraph_2.1.4                R6_2.6.1                    ## [211] tidyr_1.3.1                 SingleCellExperiment_1.28.1 ## [213] vcd_1.4-13                  cluster_2.1.8.1             ## [215] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [217] ipred_0.9-15                nloptr_2.2.1                ## [219] DelayedArray_0.32.0         tidyselect_1.2.1            ## [221] vipor_0.4.7                 htmlTable_2.4.3             ## [223] ggforce_0.5.0               CytoDx_1.26.0               ## [225] car_3.1-3                   future_1.58.0               ## [227] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [229] data.table_1.17.8           htmlwidgets_1.6.4           ## [231] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [233] rlang_1.1.6                 remotes_2.5.0               ## [235] colorRamps_2.3.4            ggnewscale_0.5.2            ## [237] hardhat_1.4.1               beeswarm_0.4.0              ## [239] prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"loading-the-data-for-training","dir":"Articles","previous_headings":"","what":"Loading the data for training","title":"Data Projection","text":"start loading data training.","code":"condor_train <- prep_fcd(data_path = \"../.test_files/DataProjection/fcs_train/\",                           max_cell = 5000,                           useCSV = FALSE,                           transformation = \"auto_logi\",                           remove_param = c(\"FSC-H\", \"SSC-H\", \"FSC-W\", \"SSC-W\", \"Time\", \"live_dead\"),                           anno_table = \"../.test_files/DataProjection/metadata_train.csv\",                           filename_col = \"filename\") condor_train$anno$cell_anno$group <- \"train\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"loading-the-data-for-projection","dir":"Articles","previous_headings":"","what":"Loading the data for projection","title":"Data Projection","text":"also load data later project.","code":"condor_test <- prep_fcd(data_path = \"../.test_files/DataProjection/fcs_test/\",                         max_cell = 10000,                         useCSV = FALSE,                         transformation = \"auto_logi\",                         remove_param = c(\"FSC-H\", \"SSC-H\", \"FSC-W\", \"SSC-W\", \"Time\", \"live_dead\"),                         anno_table = \"../.test_files/DataProjection/metadata_test.csv\",                         filename_col = \"filename\") condor_test$anno$cell_anno$group <- \"test\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"umap-projection","dir":"Articles","previous_headings":"","what":"UMAP Projection","title":"Data Projection","text":"start now running UMAP, case set ret_model variable TRUE keep UMAP model condor object. UMAP calculation data projection can performed based protein expression (expr) pca performed independently two dataset providing consistent results.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"run-umap-keeping-the-model","dir":"Articles","previous_headings":"UMAP Projection","what":"Run UMAP keeping the model","title":"Data Projection","text":"","code":"condor_train <- runUMAP(fcd = condor_train,                          input_type = \"expr\",                          data_slot = \"orig\",                          nThreads = 4,                         ret_model = TRUE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"add-data-to-the-embedding","dir":"Articles","previous_headings":"UMAP Projection","what":"Add data to the embedding","title":"Data Projection","text":"can now predict UMAP coordinates test data. predicted UMAP coordinates can accessed via condor_test$umap$pred_expr_orig.","code":"condor_test<- learnUMAP(fcd = condor_test,                         input_type = \"expr\",                          data_slot = \"orig\",                          fcd_model = condor_train,                         nEpochs = 100,                          nThreads = 4,                          prefix = \"pred\") condor_test$umap$pred_expr_orig[1:5,] ##                UMAP1      UMAP2 ## ID10.fcs_1  8.721360   0.634307 ## ID10.fcs_2 -2.714980   9.288510 ## ID10.fcs_3 -5.952371  -3.586285 ## ID10.fcs_4 -3.397721 -11.507561 ## ID10.fcs_5 -3.282857  -3.098220"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"train-a-classifier-for-the-label-transfer","dir":"Articles","previous_headings":"","what":"Train a classifier for the label transfer","title":"Data Projection","text":"transfer also labels reference projected data need train cell classifier. start clustering training data. case FlowSOM Phenogpraph can used input cell label kNN classifier. vignette use Phenograph. can visualize Phenograph clustering UMAP.","code":"condor_train <- runPhenograph(fcd = condor_train,                                input_type = \"expr\",                                data_slot = \"orig\",                                k = 150) ## Run Rphenograph starts: ##   -Input data of 45000 rows and 28 columns ##   -k is set to 150 ##   Finding nearest neighbors...DONE ~ 50.378 s ##   Compute jaccard coefficient between nearest-neighbor sets... ## Presorting knn... ## presorting DONE ~ 2.095 s ##   Start jaccard ## DONE ~ 44.636 s ##   Build undirected graph from the weighted links...DONE ~ 6.675 s ##   Run louvain clustering on the graph ...DONE ~ 21.633 s ## Run Rphenograph DONE, totally takes 123.322s. ##   Return a community class ##   -Modularity value: 0.8444303  ##   -Number of clusters: 16 plot_dim_red(fcd= condor_train,                expr_slot = NULL,              reduction_method = \"umap\",               reduction_slot = \"expr_orig\",               cluster_slot = \"phenograph_expr_orig_k_150\",              param = \"Phenograph\",              title = \"Phenograph clustering of the training data set\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"label-transfer","dir":"Articles","previous_headings":"","what":"Label transfer","title":"Data Projection","text":"Now, train classifier clustering labels. assigned metacluster label, can also used train classifier.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"train-label-transfer-knn-classifier","dir":"Articles","previous_headings":"Label transfer","what":"Train label transfer kNN classifier","title":"Data Projection","text":", use Phenograph clustering labels example train classifier. many cases probably want use metacluster labels annotated flow cytometry data set previously assigned using metaclustering().","code":"condor_train <- train_transfer_model(fcd = condor_train,                                       data_slot = \"orig\",                                       input_type = \"expr\",                                       cluster_slot = \"phenograph_expr_orig_k_150\",                                      cluster_var = \"Phenograph\",                                      method = \"knn\",                                       tuneLength = 5,                                       trControl = caret::trainControl(method = \"cv\")) ## Loading required package: ggplot2 ## Loading required package: lattice ##  ## Attaching package: 'caret' ## The following object is masked from 'package:cyCONDOR': ##  ##     confusionMatrix condor_train$extras$lt_model$performance_plot #kNN importance condor_train$extras$lt_model$features_plot"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"predict-the-labels","dir":"Articles","previous_headings":"Label transfer","what":"Predict the labels","title":"Data Projection","text":"Based trained classifier, predict now cluster labels test data set. predicted labels saved condor_test$clustering$label_pred.","code":"condor_test <- predict_labels(fcd = condor_test,                                data_slot = \"orig\",                                input_type = \"expr\",                                fcd_model = condor_train,                                label = \"label_pred\") condor_test$clustering$label_pred[1:5,] ##   Description predicted_label ## 1   predicted               4 ## 2   predicted              10 ## 3   predicted               1 ## 4   predicted              11 ## 5   predicted               1"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"visualize-the-results","dir":"Articles","previous_headings":"","what":"Visualize the results","title":"Data Projection","text":"provide costom code overlap single plot results train test condor object. Nevertheless independent results dataset can vidualized cyCONDOR built-functions.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"prepare-the-dataframe","dir":"Articles","previous_headings":"Visualize the results","what":"Prepare the dataframe","title":"Data Projection","text":"","code":"train <- as.data.frame(cbind(condor_train$umap$expr_orig, Phenograph = condor_train$clustering$phenograph_expr_orig_k_150[, 1]))  train$type <- \"train\"  test <- cbind(condor_test$umap$pred_expr_orig,                condor_test$clustering$label_pred)  test$Description <- NULL test$Description <- NULL  colnames(test) <- c(\"UMAP1\", \"UMAP2\", \"Phenograph\")  test$type <- \"test\"  vis_data <- rbind(train, test)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"overlap-umap","dir":"Articles","previous_headings":"","what":"Overlap UMAP","title":"Data Projection","text":"","code":"vis_data$type <- factor(vis_data$type, levels = c(\"train\", \"test\")) ggplot(data = vis_data, aes(x = UMAP1, y = UMAP2, color = type, alpha = type, size = type)) +   geom_point() +   scale_color_manual(values = c(\"gray\", \"#92278F\")) +   scale_alpha_manual(values = c(0.5, 1)) +   scale_size_manual(values = c(0.1, 0.5)) +   theme_bw() +   theme(aspect.ratio = 1, panel.grid = element_blank()) +    ggtitle(\"UMAP projected\") ggplot(data = vis_data, aes(x = UMAP1, y = UMAP2, color = Phenograph, alpha = type, size = type)) +   geom_point() +   scale_alpha_manual(values = c(0.1, 1)) +   scale_size_manual(values = c(0.1, 0.5)) +   theme_bw() +   theme(aspect.ratio = 1, panel.grid = element_blank()) +   ggtitle(\"Predicted cluster\") + facet_wrap(~type)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Projection.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Data Projection","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] caret_7.0-1    lattice_0.22-7 ggplot2_3.5.2  cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 future.apply_1.20.0         ##  [83] robustbase_0.99-4-1         XML_3.99-0.18               ##  [85] cowplot_1.2.0               matrixStats_1.5.0           ##  [87] RcppAnnoy_0.0.22            xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               Biobase_2.66.0              ## [175] mvtnorm_1.3-3               lava_1.8.1                  ## [177] sessioninfo_1.2.3           backports_1.5.0             ## [179] cytolib_2.18.2              timechange_0.3.0            ## [181] gtable_0.3.6                rjson_0.2.23                ## [183] umap_0.2.10.0               ggridges_0.5.6              ## [185] Rphenoannoy_0.1.0           parallel_4.4.2              ## [187] pROC_1.18.5                 limma_3.62.2                ## [189] jsonlite_2.0.0              edgeR_4.4.2                 ## [191] RcppHNSW_0.6.0              Rtsne_0.17                  ## [193] FlowSOM_2.14.0              ranger_0.17.0               ## [195] flowCore_2.18.0             jquerylib_0.1.4             ## [197] timeDate_4041.110           shiny_1.11.1                ## [199] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [201] diffcyt_1.26.1              glue_1.8.0                  ## [203] XVector_0.46.0              VIM_6.2.2                   ## [205] gridExtra_2.3               boot_1.3-31                 ## [207] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [209] R6_2.6.1                    tidyr_1.3.1                 ## [211] SingleCellExperiment_1.28.1 labeling_0.4.3              ## [213] vcd_1.4-13                  cluster_2.1.8.1             ## [215] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [217] ipred_0.9-15                nloptr_2.2.1                ## [219] DelayedArray_0.32.0         tidyselect_1.2.1            ## [221] vipor_0.4.7                 htmlTable_2.4.3             ## [223] ggforce_0.5.0               CytoDx_1.26.0               ## [225] car_3.1-3                   future_1.58.0               ## [227] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [229] data.table_1.17.8           htmlwidgets_1.6.4           ## [231] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [233] rlang_1.1.6                 remotes_2.5.0               ## [235] colorRamps_2.3.4            ggnewscale_0.5.2            ## [237] hardhat_1.4.1               beeswarm_0.4.0              ## [239] prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"load-an-example-dataset","dir":"Articles","previous_headings":"","what":"Load an example dataset","title":"Data Visualization","text":"vignette, use flow cytometry dataset six PBMC samples taken three patients three control. data transformed subjected several dimensionality reduction methods well clustering metaclustering using cyCONDOR(see vignettes: Data loading transformation, Dimensionality Reduction, Clustering cell annotation).","code":"condor <- readRDS(\"../.test_files/conodr_example_016.rds\") #Let's checkout the content of the object str(condor[!names(condor) %in% \"extras\"]) ## List of 6 ##  $ expr      :List of 1 ##   ..$ orig:'data.frame': 59049 obs. of  28 variables: ##   .. ..$ FSC-A        : num [1:59049] 4.38 4.22 4.27 4.18 4.08 ... ##   .. ..$ SSC-A        : num [1:59049] 3.91 3.24 3.42 3.62 3.7 ... ##   .. ..$ CD38         : num [1:59049] 3.61 3.12 3.71 2.9 2.06 ... ##   .. ..$ CD8          : num [1:59049] 0.869 2.118 3.802 2.748 3.868 ... ##   .. ..$ CD195 (CCR5) : num [1:59049] 2.281 1.199 0.816 1.5 3.303 ... ##   .. ..$ CD94 (KLRD1) : num [1:59049] 2.32 2.24 1.78 2.57 2.18 ... ##   .. ..$ CD45RA       : num [1:59049] 3.33 3.63 2.49 3.93 4.14 ... ##   .. ..$ HLA-DR       : num [1:59049] 3.173 1.595 3.066 0.973 0.62 ... ##   .. ..$ CD56         : num [1:59049] 1.43 2.25 1.72 3.28 1.48 ... ##   .. ..$ CD127 (IL7RA): num [1:59049] 1.03 3.16 1.17 1.58 3.1 ... ##   .. ..$ CD14         : num [1:59049] 3.96 2.14 1.47 1.21 1.92 ... ##   .. ..$ CD64         : num [1:59049] 2.475 0.462 0.85 1.075 0.981 ... ##   .. ..$ CD4          : num [1:59049] 2.658 3.886 0.209 1.135 0.499 ... ##   .. ..$ IgD          : num [1:59049] 0.932 0.438 1.488 0.694 1.486 ... ##   .. ..$ CD19         : num [1:59049] 1.822 1.583 0.813 1.703 0.357 ... ##   .. ..$ CD16         : num [1:59049] 1.658 0.863 0.838 2.828 1.325 ... ##   .. ..$ CD32         : num [1:59049] 2.476 0.743 1.056 0.887 0.756 ... ##   .. ..$ CD197 (CCR7) : num [1:59049] 1.4012 2.6245 0.0844 0.9996 1.2096 ... ##   .. ..$ CD20         : num [1:59049] 0.724 1.289 1.672 1.371 1.623 ... ##   .. ..$ CD27         : num [1:59049] 1.737 3.89 3.564 0.638 0.622 ... ##   .. ..$ CD15         : num [1:59049] 0.844 0.549 0.632 1.258 2.04 ... ##   .. ..$ PD-1         : num [1:59049] 0.0514 0.9102 0.9839 0.4781 1.7587 ... ##   .. ..$ CD3          : num [1:59049] 0.964 4.006 3.746 1.788 3.875 ... ##   .. ..$ CD57         : num [1:59049] 1.277 0.531 1.006 3.039 3.004 ... ##   .. ..$ CD25         : num [1:59049] 1.709 2.032 1.833 1.187 0.937 ... ##   .. ..$ CD123 (IL3RA): num [1:59049] 2.32 1.14 1.13 1.11 1.28 ... ##   .. ..$ CD13         : num [1:59049] 2.388 0.817 0.703 0.861 0.707 ... ##   .. ..$ CD11c        : num [1:59049] 3.792 0.645 2.025 0.668 1.946 ... ##  $ anno      :List of 1 ##   ..$ cell_anno:'data.frame':    59049 obs. of  3 variables: ##   .. ..$ expfcs_filename: Factor w/ 6 levels \"ID10.fcs\",\"ID3.fcs\",..: 1 1 1 1 1 1 1 1 1 1 ... ##   .. ..$ sample_ID      : chr [1:59049] \"ID10\" \"ID10\" \"ID10\" \"ID10\" ... ##   .. ..$ group          : chr [1:59049] \"pat\" \"pat\" \"pat\" \"pat\" ... ##  $ pca       :List of 1 ##   ..$ orig: num [1:59049, 1:28] -4.593 2.011 0.741 0.601 1.685 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:59049] \"ID10.fcs_1\" \"ID10.fcs_2\" \"ID10.fcs_3\" \"ID10.fcs_4\" ... ##   .. .. ..$ : chr [1:28] \"PC1\" \"PC2\" \"PC3\" \"PC4\" ... ##  $ umap      :List of 1 ##   ..$ pca_orig: num [1:59049, 1:2] -9.19 1.6 5.45 3.97 2.5 ... ##   .. ..- attr(*, \"scaled:center\")= num [1:2] -0.126 -0.253 ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:59049] \"ID10.fcs_1\" \"ID10.fcs_2\" \"ID10.fcs_3\" \"ID10.fcs_4\" ... ##   .. .. ..$ : chr [1:2] \"UMAP1\" \"UMAP2\" ##  $ tSNE      :List of 1 ##   ..$ pca_orig: num [1:59049, 1:2] 18.26 -11.83 -24.09 5.71 -10.98 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. ..$ : chr [1:59049] \"ID10.fcs_1\" \"ID10.fcs_2\" \"ID10.fcs_3\" \"ID10.fcs_4\" ... ##   .. .. ..$ : chr [1:2] \"tSNE1\" \"tSNE2\" ##  $ clustering:List of 2 ##   ..$ phenograph_pca_orig_k_60:'data.frame': 59049 obs. of  3 variables: ##   .. ..$ Phenograph  : Factor w/ 25 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 5 6 1 1 5 ... ##   .. ..$ Description : chr [1:59049] \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" ... ##   .. ..$ metaclusters: Factor w/ 16 levels \"Classical Monocytes\",..: 1 2 3 4 5 5 1 1 1 5 ... ##   ..$ FlowSOM_pca_orig_k_15   :'data.frame': 59049 obs. of  2 variables: ##   .. ..$ FlowSOM    : Factor w/ 15 levels \"1\",\"2\",\"3\",\"4\",..: 12 11 4 2 3 3 12 12 12 3 ... ##   .. ..$ Description: chr [1:59049] \"pca_orig_k15\" \"pca_orig_k15\" \"pca_orig_k15\" \"pca_orig_k15\" ..."},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"visualize-the-results-of-dimensionality-reduction-and-clustering","dir":"Articles","previous_headings":"","what":"Visualize the results of dimensionality reduction and clustering","title":"Data Visualization","text":"cyCONDOR comes several methods perform dimensionality reduction. Two dimensional representations reduction method can visualized using plot_dim_red() function. function requires user specify condor object, reduction method (e.g. pca, umap tSNE) name actual reduction_slot, e.g. “orig”. , variable needs provided parameter param, used color dots.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"pca","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"PCA","title":"Data Visualization","text":"Let’s plot first two Principle components PCA color meta variable “group”.","code":"plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"pca\",              reduction_slot = \"orig\",              cluster_slot = NULL,              param = \"group\",              title = \"PCA\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"tsne","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"tSNE","title":"Data Visualization","text":"Changing reduction_method = \"tSNE\" reduction_slot = \"pca_orig\", results plot tSNE.","code":"plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"tSNE\",              reduction_slot = \"pca_orig\",              cluster_slot = NULL,              param = \"group\",              title = \"tSNE\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"umap","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"UMAP","title":"Data Visualization","text":"Similiarly, reduction_method = \"umap\" reduction_slot = \"pca_orig\", gives us UMAP representation calculated PCA transformed expression data.","code":"plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = NULL,              param = \"group\",              title = \"UMAP\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"colored-by-phenograph-flowsom-clustering-or-metaclusters","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"Colored by Phenograph, FlowSOM clustering or metaclusters","title":"Data Visualization","text":"Instead meta variables available cell_anno slot, also possible overlay cell population identities, determined cyCONDOR's clustering cell label implementations. case, function additionally requires specification cluster_slot input, define param taken . following example, visualize cluster identities (param = \"Phenograph\") related metaclustering annotation (param = \"metaclusters\") cluster_slot “phenograph_pca_orig_k_60”.  manner, FlowSOM results can plotted dimensionality reduction.","code":"p1<-plot_dim_red(fcd = condor,                  expr_slot = NULL,                  reduction_method = \"umap\",                  reduction_slot = \"pca_orig\",                  cluster_slot = \"phenograph_pca_orig_k_60\",                  param = \"Phenograph\",                  title = \"UMAP colored by Phenograph clusters\")  p2<-plot_dim_red(fcd = condor,                  expr_slot = NULL,                  reduction_method = \"umap\",                  reduction_slot = \"pca_orig\",                  cluster_slot = \"phenograph_pca_orig_k_60\",                  param = \"metaclusters\",                  title = \"UMAP colored by metaclusters\")  cowplot::plot_grid(plotlist = list(p1,p2),align = \"v\") plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = \"FlowSOM_pca_orig_k_15\",              param = \"FlowSOM\",              title = \"UMAP colored by FlowSOM clusters\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"split-plot-by-a-variable","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"Split plot by a variable","title":"Data Visualization","text":"Sometimes comes handy split dimensionality reduction variable, e.g. group, sample ID experimental batches. plot_dim_red() function can achieved via facet_by_variable parameter. Setting facet_by_variable = T, split plot variable provided param.  Providing facet_by_variable different variable specified param, keep coloring variable param, splits plot faceting variable. Note, case clustering variables used, cluster_slot needs provided well.","code":"plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = NULL,              param = \"group\",              facet_by_variable = T,              title = \"UMAP\") plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = \"phenograph_pca_orig_k_60\",              param = \"metaclusters\",              facet_by_variable = \"group\",              title = \"UMAP colored by metaclusters\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"export-the-plot-as-raster-image","dir":"Articles","previous_headings":"Visualize the results of dimensionality reduction and clustering","what":"Export the plot as raster image","title":"Data Visualization","text":"Visualizing hundred thousands events can demanding. Using raster = T, function generate raster image, instead plotting event individually.","code":"plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = \"FlowSOM_pca_orig_k_15\",              param = \"FlowSOM\",              raster = T,              title = \"UMAP colored by FlowSOM clusters\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"visualization-of-marker-expression","dir":"Articles","previous_headings":"","what":"Visualization of marker expression","title":"Data Visualization","text":"next section, go examples marker expression can visualized cyCONDOR. Since interesting, data already clustered, almost functions require cluster cell label information obtained via cyCONDOR's clustering cell label prediction workflows. function, plot_dim_red(), can used without cell population labels.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"marker-expression-overlayed-on-dimensionality-reduction","dir":"Articles","previous_headings":"Visualization of marker expression","what":"Marker expression overlayed on dimensionality reduction","title":"Data Visualization","text":"overlay marker expression values dimensionality reduction, can use plot_dim_red() function introduced section . Instead clustering_slot, expression_slot expression values stored needs specified marker visualized given parameter param. large data sets, dimensionality reduction can “crowded” might useful order cells expression. Setting order = T, plot cells highest expression top.  facet_by_variable can used split plot another variable.","code":"p1<-plot_dim_red(fcd = condor,                  expr_slot = \"orig\",                  reduction_method = \"umap\",                  reduction_slot = \"pca_orig\",                  cluster_slot = NULL,                  param = \"CD3\",                  order = F, #default                  title = \"CD3 expression - random order\")  p2<-plot_dim_red(fcd = condor,                  expr_slot = \"orig\",                  reduction_method = \"umap\",                  reduction_slot = \"pca_orig\",                  cluster_slot = NULL,                  param = \"CD3\",                   order = T,                  title = \"CD3 expression - ordered\")  cowplot::plot_grid(plotlist = list(p1,p2),align = \"v\") plot_dim_red(fcd = condor,              expr_slot = \"orig\",              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = NULL,              param = \"CD3\",              facet_by_variable = \"group\",              title = \"CD3 expression split by group\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"heatmap-of-marker-expression","dir":"Articles","previous_headings":"Visualization of marker expression","what":"Heatmap of marker expression","title":"Data Visualization","text":"Heatmap visualizations useful get fast overview across many markers cell populations. plot_marker_HM() function calculates mean transformed expression cell population marker combination. means centered scaled marker subsequently visualized heatmap. However, mention comes certain draw backs: 1) distribution expression considered looking mean 2) actual expression level somewhat obscured row-wise scaling.  setting cluster_rows = T cluster_cols, rows columns get clustered.  function plot_marker_group_HM works similarly addition meta variable available cell_anno provided used split columns levels meta variable. following example, interested whether mean expression phenotaping markers like CD3 CD19 stable across different samples using group_var = sample_ID.","code":"plot_marker_HM(fcd = condor,                expr_slot = \"orig\",                marker_to_exclude = c(\"FSC-A\",\"SSC-A\"),                cluster_slot = \"phenograph_pca_orig_k_60\",                cluster_var = \"metaclusters\") plot_marker_HM(fcd = condor,                expr_slot = \"orig\",                marker_to_exclude = c(\"FSC-A\",\"SSC-A\"),                cluster_slot = \"phenograph_pca_orig_k_60\",                cluster_var = \"metaclusters\",                cluster_rows = T,                cluster_cols = T) plot_marker_group_HM(fcd = condor,                      expr_slot = \"orig\",                      marker_to_exclude = c(\"FSC-A\",\"SSC-A\"),                      cluster_slot = \"phenograph_pca_orig_k_60\",                      cluster_var = \"metaclusters\",                      group_var = \"sample_ID\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"plot-mean-expression-as-boxplots","dir":"Articles","previous_headings":"Visualization of marker expression","what":"Plot mean expression as boxplots","title":"Data Visualization","text":"Instead heatmap, mean (median) expression can visualized boxplots sample represented dot. , plot_marker_boxplot requires user specify variable containing sample IDs sample_var grouping variable group_var. sample ID uniquely associated one level group_var. grouping variable example disease status batch variable. Since data batch yet interested differences biological groups (see vignette(\"Differential Analysis\"), using variable “experiment_name” following chunk get overview expression samples.  default function generate boxplots marker cell population combinations, depending panel size can much inspect . parameters marker user can select markers interest, cluster_to_show allows subset certain cell populations present given cluster_var. , possible calculate median expression instead mean using fun = \"median\".","code":"condor$anno$cell_anno$experiment_name <-\"test_data\"  plot_marker_boxplot(fcd = condor,                     expr_slot = \"orig\",                      cluster_slot = \"phenograph_pca_orig_k_60\",                      cluster_var = \"metaclusters\",                     group_var = \"experiment_name\",                     sample_var = \"sample_ID\",                      marker = c(\"CD3\",\"CD4\",\"CD8\",\"CD14\",\"CD19\",\"HLA-DR\"),                     fun = \"mean\",                     facet_ncol = 3,                     dot_size = 1)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"distribution-of-expression","dir":"Articles","previous_headings":"Visualization of marker expression","what":"Distribution of expression","title":"Data Visualization","text":"Besides visualizing aggregated expression, cyCONDOR also provides different visualization options investigate distribution marker expression across cells population. plot_marker_ridgeplot() plot_marker_violinplot(), visualize density distribution marker cell population cluster_var therefor provide insights whether marker homogeneously expressed certain cluster (cell population) whether part cells expressing marker highly lowly. plots can useful, inspecting annotating clusters, since e.g. enable detection smaller subsets contamination cluster cells, visible heatmap. plot_marker_density() (optionally) plot_marker_violinplot() split distributions meta variables present cell_anno slot, can help investigate technical /bioligical influencing factors.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"ridgeline-plot","dir":"Articles","previous_headings":"Visualization of marker expression > Distribution of expression","what":"Ridgeline plot","title":"Data Visualization","text":"plot_marker_ridgeplot() visualizes density distribution expression cell population cluster_var marker specified marker.  case one marker specified, function returns list plots - one plot marker.","code":"plot_marker_ridgeplot(fcd = condor,                       expr_slot = \"orig\",                        cluster_slot = \"phenograph_pca_orig_k_60\",                        cluster_var = \"metaclusters\",                        marker = \"CD3\") ## Warning: `expand_scale()` was deprecated in ggplot2 3.3.0. ## ℹ Please use `expansion()` instead. ## ℹ The deprecated feature was likely used in the cyCONDOR package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Picking joint bandwidth of 0.0733 plot.list<- plot_marker_ridgeplot(fcd = condor,                       expr_slot = \"orig\",                        cluster_slot = \"phenograph_pca_orig_k_60\",                        cluster_var = \"metaclusters\",                        marker = c(\"CD3\",\"CD4\"))  cowplot::plot_grid(plotlist = plot.list,align = \"v\") ## Picking joint bandwidth of 0.0733 ## Picking joint bandwidth of 0.0737"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"violin-plot","dir":"Articles","previous_headings":"Visualization of marker expression > Distribution of expression","what":"Violin plot","title":"Data Visualization","text":"plot_marker_violinplot requires input plot_marker_ridgeplot. density distribution marker expression visualized violins cell population populations shown next instead vertically stacked.  , provided several marker names, function returns list plots.  site note, plot_marker_violinplot() optionally can given grouping variable group_var used split violin plot . can useful looking biological groups batch variables.","code":"plot_marker_violinplot(fcd = condor,                         expr_slot = \"orig\",                         cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                         marker = \"CD56\") plot.list<-plot_marker_violinplot(fcd = condor,                                    expr_slot = \"orig\",                                    cluster_slot = \"phenograph_pca_orig_k_60\",                                    cluster_var = \"metaclusters\",                                    marker = c(\"CD3\",\"CD56\",\"HLA-DR\",\"CD19\"))  cowplot::plot_grid(plotlist = plot.list,align = \"hv\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"density-plot","dir":"Articles","previous_headings":"Visualization of marker expression > Distribution of expression","what":"Density plot","title":"Data Visualization","text":"plot_marker_density() can used compare expression distributions different levels given group_var. can example applied investigate homogeneity staining measuring procedure samples experimental days.","code":"plot_marker_density(fcd = condor,                     expr_slot = \"orig\",                      cluster_slot = \"phenograph_pca_orig_k_60\",                      cluster_var = \"metaclusters\",                     group_var = \"sample_ID\",                     marker = \"CD57\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"classical-cytometry-dotplot","dir":"Articles","previous_headings":"Visualization of marker expression","what":"Classical cytometry dotplot","title":"Data Visualization","text":"Finally, using plot_marker_dotplot() scatter plot two markers can generated investigate relation expression. marker x-axis specified marker_x, marker y-axis specified marker_y.","code":"plot_marker_dotplot(fcd = condor,                      expr_slot = \"orig\",                     marker_x = \"CD3\",                     marker_y = \"CD19\",                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                      dot_size = 0.5)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"inspection-of-cell-counts","dir":"Articles","previous_headings":"","what":"Inspection of cell counts","title":"Data Visualization","text":"always, important consider many cells actually underlying visualizations conceal actual cells behind aggregated expression values (mean/median) density distributions. cyCONDOR provides functions quickly assess cell counts. can either look cell counts per sample cell population table format getTable() function setting output_type = \"counts\", visualize cell numbers plot_counts_barplot() function. plot_counts_barplot() function stacks absolute cell numbers cell population top group grouping variable, can set via group_var parameter.  faceting plot cell population can achieved setting parameter facet_by_group = T.","code":"# get counts as data frame counts<-getTable(fcd = condor,                  output_type = \"counts\",                  cluster_slot = \"phenograph_pca_orig_k_60\",                   cluster_var = \"metaclusters\",                   group_var = \"sample_ID\",                   numeric = F) counts ##      group_var B cells Basophils CD16+ Monocytes CD4 CD127- CD4 CD25+ ## ID10      ID10     111        13             342        365       101 ## ID3        ID3     354        80             350        500       324 ## ID5        ID5     493        35             219        485       202 ## ID6        ID6     192        24             494        263       312 ## ID7        ID7     171        59             143        875       126 ## ID8        ID8      86        25             255        533       114 ##      CD4 CD45RA- CD127+ CD4 CD45RA+ CD127+ CD8 CD45RA- CD127+ ## ID10                564                569                461 ## ID3                1837                993                472 ## ID5                1614                933                727 ## ID6                 535                191                500 ## ID7                1572               1475                974 ## ID8                 613               1498                333 ##      CD8 CD45RA+ CD127- CD8 CD45RA+ CD127+ Classical Monocytes Mixed NK bright ## ID10               2123                682                3184     7       317 ## ID3                 142               1165                2338    48       464 ## ID5                 623                920                2372   248       512 ## ID6                1085                894                2102    90       667 ## ID7                  68                308                2151    10       515 ## ID8                1829                697                3008    31       247 ##      NK dim pDCs Unconventional T cells ## ID10    641   24                    496 ## ID3     825   80                     28 ## ID5     517   66                     34 ## ID6    1242   30                    428 ## ID7    1490   55                      8 ## ID8      79   54                    598 # get cells per cluster_var colSums(counts[,c(-1)]) ##                B cells              Basophils        CD16+ Monocytes  ##                   1407                    236                   1803  ##             CD4 CD127-              CD4 CD25+     CD4 CD45RA- CD127+  ##                   3021                   1179                   6735  ##     CD4 CD45RA+ CD127+     CD8 CD45RA- CD127+     CD8 CD45RA+ CD127-  ##                   5659                   3467                   5870  ##     CD8 CD45RA+ CD127+    Classical Monocytes                  Mixed  ##                   4666                  15155                    434  ##              NK bright                 NK dim                   pDCs  ##                   2722                   4794                    309  ## Unconventional T cells  ##                   1592 # visualize counts as stacked bar plot, faceted by clustering plot_counts_barplot(fcd = condor,                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     group_var = \"sample_ID\",                     facet_by_clustering = F,                     facet_ncol = 5 ) # visualize counts as stacked bar plot, faceted by clustering plot_counts_barplot(fcd = condor,                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     group_var = \"sample_ID\",                     facet_by_clustering = T,                     facet_ncol = 5 )"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"visualize-the-loadings-of-pcs","dir":"Articles","previous_headings":"Others","what":"Visualize the loadings of PCs","title":"Data Visualization","text":"PC_loadings() can used visualize loadings principle component.","code":"PC_loadings(fcd = condor, data_slot = \"orig\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"density-plot-1","dir":"Articles","previous_headings":"Others","what":"Density plot","title":"Data Visualization","text":"","code":"plot_dim_density(fcd = condor,                  reduction_method = \"umap\",                  reduction_slot = \"pca_orig\",                  group_var = \"group\",                  color_density = c(\"Greys\", \"Reds\"))"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"more-visualization","dir":"Articles","previous_headings":"","what":"MORE visualization?","title":"Data Visualization","text":"vignette, mostly focused visualizations useful investigate clusterings support annotation cell populations. However, biological questions often revolve around comparing different biological groups samples. get inspirations can visualized, check vignette(\"Differential Analysis\")!","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Data_Visualization.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Data Visualization","text":"","code":"info <- sessionInfo() info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            isoband_0.2.7               ##  [75] harmony_1.2.3               reticulate_1.42.0           ##  [77] readxl_1.4.5                magrittr_2.0.3              ##  [79] lmtest_0.9-40               readr_2.1.5                 ##  [81] Rgraphviz_2.50.0            later_1.4.2                 ##  [83] lattice_0.22-7              future.apply_1.20.0         ##  [85] robustbase_0.99-4-1         XML_3.99-0.18               ##  [87] cowplot_1.2.0               matrixStats_1.5.0           ##  [89] xts_0.14.1                  class_7.3-23                ##  [91] Hmisc_5.2-3                 pillar_1.11.0               ##  [93] nlme_3.1-168                iterators_1.0.14            ##  [95] compiler_4.4.2              RSpectra_0.16-2             ##  [97] stringi_1.8.7               gower_1.0.2                 ##  [99] minqa_1.2.8                 SummarizedExperiment_1.36.0 ## [101] lubridate_1.9.4             devtools_2.4.5              ## [103] CytoML_2.18.3               plyr_1.8.9                  ## [105] crayon_1.5.3                abind_1.4-8                 ## [107] locfit_1.5-9.12             sp_2.2-0                    ## [109] sandwich_3.1-1              pcaMethods_1.98.0           ## [111] dplyr_1.1.4                 codetools_0.2-20            ## [113] multcomp_1.4-28             textshaping_1.0.1           ## [115] recipes_1.3.1               openssl_2.3.3               ## [117] Rphenograph_0.99.1          TTR_0.24.4                  ## [119] bslib_0.9.0                 e1071_1.7-16                ## [121] destiny_3.20.0              GetoptLong_1.0.5            ## [123] ggplot.multistats_1.0.1     mime_0.13                   ## [125] splines_4.4.2               circlize_0.4.16             ## [127] Rcpp_1.1.0                  sparseMatrixStats_1.18.0    ## [129] cellranger_1.1.0            knitr_1.50                  ## [131] clue_0.3-66                 lme4_1.1-37                 ## [133] fs_1.6.6                    listenv_0.9.1               ## [135] checkmate_2.3.2             DelayedMatrixStats_1.28.1   ## [137] Rdpack_2.6.4                pkgbuild_1.4.8              ## [139] ggsignif_0.6.4              tibble_3.3.0                ## [141] Matrix_1.7-3                rpart.plot_3.1.2            ## [143] statmod_1.5.0               tzdb_0.5.0                  ## [145] tweenr_2.0.3                pkgconfig_2.0.3             ## [147] pheatmap_1.0.13             tools_4.4.2                 ## [149] cachem_1.1.0                rbibutils_2.3               ## [151] smoother_1.3                fastmap_1.2.0               ## [153] rmarkdown_2.29              scales_1.4.0                ## [155] grid_4.4.2                  usethis_3.1.0               ## [157] broom_1.0.8                 sass_0.4.10                 ## [159] graph_1.84.1                carData_3.0-5               ## [161] RANN_2.6.2                  rpart_4.1.24                ## [163] farver_2.1.2                reformulas_0.4.1            ## [165] yaml_2.3.10                 MatrixGenerics_1.18.1       ## [167] foreign_0.8-90              ggthemes_5.1.0              ## [169] cli_3.6.5                   purrr_1.1.0                 ## [171] stats4_4.4.2                lifecycle_1.0.4             ## [173] uwot_0.2.3                  askpass_1.2.1               ## [175] caret_7.0-1                 Biobase_2.66.0              ## [177] mvtnorm_1.3-3               lava_1.8.1                  ## [179] sessioninfo_1.2.3           backports_1.5.0             ## [181] cytolib_2.18.2              timechange_0.3.0            ## [183] gtable_0.3.6                rjson_0.2.23                ## [185] umap_0.2.10.0               ggridges_0.5.6              ## [187] parallel_4.4.2              pROC_1.18.5                 ## [189] limma_3.62.2                jsonlite_2.0.0              ## [191] edgeR_4.4.2                 RcppHNSW_0.6.0              ## [193] ggplot2_3.5.2               Rtsne_0.17                  ## [195] FlowSOM_2.14.0              ranger_0.17.0               ## [197] flowCore_2.18.0             jquerylib_0.1.4             ## [199] timeDate_4041.110           shiny_1.11.1                ## [201] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [203] diffcyt_1.26.1              glue_1.8.0                  ## [205] XVector_0.46.0              VIM_6.2.2                   ## [207] gridExtra_2.3               boot_1.3-31                 ## [209] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [211] R6_2.6.1                    tidyr_1.3.1                 ## [213] SingleCellExperiment_1.28.1 labeling_0.4.3              ## [215] vcd_1.4-13                  cluster_2.1.8.1             ## [217] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [219] ipred_0.9-15                nloptr_2.2.1                ## [221] DelayedArray_0.32.0         tidyselect_1.2.1            ## [223] vipor_0.4.7                 htmlTable_2.4.3             ## [225] ggforce_0.5.0               CytoDx_1.26.0               ## [227] car_3.1-3                   future_1.58.0               ## [229] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [231] data.table_1.17.8           htmlwidgets_1.6.4           ## [233] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [235] rlang_1.1.6                 remotes_2.5.0               ## [237] colorRamps_2.3.4            Cairo_1.6-2                 ## [239] ggnewscale_0.5.2            hardhat_1.4.1               ## [241] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Differential Analysis with cyCONDOR","text":"cyCONDOR provides several functions exploratory differential analysis cell population frequencies marker expression. order run differential analysis, pre-processed condor object required, subjected clustering (metaclustering) one labeling approaches (see vignettes: Clustering cell annotation, Data projection Cell type prediction) implemented cyCONDOR. , meta data slot cell_anno contain variable unique sample IDs least one grouping variable two levels, e.g. indicating disease status. sample ID needs unique assigned exactly one level grouping variable interest. Along line, specifying condor object, cell population labels well group sample ID variables central functions going use: fcd = flow cytometry dataset, subjected clustering cell type label prediction cluster_slot = clustering slot use find variable specified cluster_var cluster_var = variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels) group_var = meta variable cell_anno used main grouping data, e.g. group sample ID variable. sample_var = meta variable cell_anno containing sample IDs. argument always required usually indicates function requires, sample IDs group information. cases group variable provided via group_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"load-example-data-set","dir":"Articles","previous_headings":"","what":"Load example data set","title":"Differential Analysis with cyCONDOR","text":"vignette, showcase differential analysis cyCONDOR data set comprising samples two biological groups - patients (“pat”) control donors (“ctrl”). group comprises three PBMC samples measured flow cytometry. dataset annotated Phenograph clustering subsequent knowledge-based metaclustering prior analysis.","code":"condor <- readRDS(\"../.test_files/conodr_diff_016.rds\") # Let's check the meta data unique(condor$anno$cell_anno[,c(\"sample_ID\",\"group\")]) #>               sample_ID group #> ID10.fcs_1         ID10   pat #> ID3.fcs_10001       ID3  ctrl #> ID5.fcs_20001       ID5  ctrl #> ID6.fcs_30001       ID6   pat #> ID7.fcs_39050       ID7  ctrl #> ID8.fcs_49050       ID8   pat # Let's double check that clustering is available str(condor$clustering) #> List of 1 #>  $ phenograph_pca_orig_k_60:'data.frame':    59049 obs. of  3 variables: #>   ..$ Phenograph  : Factor w/ 25 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 5 6 1 1 5 ... #>   ..$ Description : chr [1:59049] \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" ... #>   ..$ metaclusters: Factor w/ 11 levels \"Classical Monocytes\",..: 1 2 3 4 3 3 1 1 1 3 ... # visualize metaclustering plot_dim_red(fcd = condor,              expr_slot = NULL,              reduction_method = \"umap\",              reduction_slot = \"pca_orig\",              cluster_slot = \"phenograph_pca_orig_k_60\",              param = \"metaclusters\",              title = \"UMAP colored by metaclusters\",               facet_by_variable = FALSE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"investigate-cell-population-frequencies","dir":"Articles","previous_headings":"","what":"Investigate cell population frequencies","title":"Differential Analysis with cyCONDOR","text":"first section focus differential abundance testing cell population frequencies visualize .","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"investigating-counts","dir":"Articles","previous_headings":"Investigate cell population frequencies","what":"Investigating counts","title":"Differential Analysis with cyCONDOR","text":"manual gating based approaches, important consider many cells actually underlying calculated frequencies. can either look cell counts per sample cell population table format getTable() function setting output_type = \"counts\", visualize cell numbers plot_counts_barplot() function. plot_counts_barplot() function stacks absolute cell numbers cell population top group grouping variable, can set via group_var parameter. case like see counts per sample (group_var = \"sample_ID\") facet plot disease group (facet_var = \"group\").  faceting plot cell population can achieved setting parameter facet_by_group = T. Note faceting disease group gone, achieved providing facet_var example .","code":"# get counts as data frame counts<-getTable(fcd = condor,                  output_type = \"counts\",                  cluster_slot = \"phenograph_pca_orig_k_60\",                   cluster_var = \"metaclusters\",                   group_var = \"sample_ID\",                   numeric = F) counts #>      group_var B cells Basophils CD16+ Monocytes  CD4  CD8 Classical Monocytes #> ID10      ID10     111        13             342 1599 3266                3184 #> ID3        ID3     354        80             350 3654 1779                2338 #> ID5        ID5     493        35             219 3234 2270                2372 #> ID6        ID6     192        24             494 1301 2479                2102 #> ID7        ID7     171        59             143 4048 1350                2151 #> ID8        ID8      86        25             255 2758 2859                3008 #>      Mixed NK bright Nk dim pDCs Unconventional T cells #> ID10     7       317    641   24                    496 #> ID3     48       464    825   80                     28 #> ID5    248       512    517   66                     34 #> ID6     90       667   1242   30                    428 #> ID7     10       515   1490   55                      8 #> ID8     31       247     79   54                    598 # visualize counts as stacked bar plot, faceted by group_var plot_counts_barplot(fcd = condor,                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     group_var = \"sample_ID\",                     facet_var = \"group\",                     facet_by_clustering = F,                     facet_ncol = 10 ) # visualize counts as stacked bar plot, faceted by clustering plot_counts_barplot(fcd = condor,                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     group_var = \"sample_ID\",                     facet_by_clustering = T,                     facet_ncol = 5 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"investigation-of-cell-population-frequencies","dir":"Articles","previous_headings":"Investigate cell population frequencies","what":"Investigation of cell population frequencies","title":"Differential Analysis with cyCONDOR","text":"Next, explore cell population frequencies, cyCONDOR provides several visualization options.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"plot-stacked-bar-plot","dir":"Articles","previous_headings":"Investigate cell population frequencies > Investigation of cell population frequencies","what":"Plot stacked bar plot","title":"Differential Analysis with cyCONDOR","text":"plot_frequency_barplot() generates barplot, proportions cell population stacked top . provides quick overview large proportional shifts can easily spotted.  can use visualization show cell population proportions sample level providing meta data variable “sample_ID” group_var. additional grouping (faceting) samples can achieved providing meta variable parameter facet_var. set “group” group disease status.","code":"plot_frequency_barplot(fcd = condor,                        cluster_slot = \"phenograph_pca_orig_k_60\",                        cluster_var = \"metaclusters\",                        group_var = \"group\",                        #facet_var = \"group\" ) plot_frequency_barplot(fcd = condor,                        cluster_slot = \"phenograph_pca_orig_k_60\",                        cluster_var = \"metaclusters\",                        group_var = \"sample_ID\",                        facet_var = \"group\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"plot-box-plots","dir":"Articles","previous_headings":"Investigate cell population frequencies > Investigation of cell population frequencies","what":"Plot box plots","title":"Differential Analysis with cyCONDOR","text":"plot_frequency_boxplot() function generates list plots, comprising one plot cell population cluster_var. plot shows cell population frequencies percent boxplots groups provided group_var. Individual values sample sample_var represented dot. (Short reminder: sample IDs sample_var need uniquely assigned one level grouping variable)","code":"# factor levels can be used to influence plotting order of groupes on the x-axis condor$anno$cell_anno$group<-factor(condor$anno$cell_anno$group, levels=c(\"ctrl\",\"pat\"))  # assign output to object plots plots <- plot_frequency_boxplot(fcd = condor,                                 cluster_slot = \"phenograph_pca_orig_k_60\",                                  cluster_var = \"metaclusters\",                                 sample_var = \"sample_ID\",                                  group_var = \"group\",                                  #groups_to_show = c(\"test\"),                                 numeric = F,                                 color_palette = c(\"pat\"=\"darkorange\",\"ctrl\"=\"purple\"))  # the list of plots can be summarized to one graph, by using e.g. the cowplot package. cowplot::plot_grid(plotlist = plots, ncol = 5)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"confusion-matrix","dir":"Articles","previous_headings":"Investigate cell population frequencies > Investigation of cell population frequencies","what":"Confusion matrix","title":"Differential Analysis with cyCONDOR","text":"get overview across many cell populations conditions , might convenient look heatmap. function confusion_HM() first normalizes group level provided group_var 1000 cells. Afterwards, cell population group_var, proportions group contributing population calculated. Note way, normalize differences cell numbers. uncorrected proportion group cluster might look quite different.","code":"plot_confusion_HM(fcd = condor,                   cluster_slot = \"phenograph_pca_orig_k_60\",                    cluster_var = \"metaclusters\",                   group_var = \"group\", size = 30)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"export-frequencies-as-data-frame","dir":"Articles","previous_headings":"Investigate cell population frequencies > Investigation of cell population frequencies","what":"Export frequencies as data frame","title":"Differential Analysis with cyCONDOR","text":"case like visualize frequencies perform statistical tests, getTable() function output_type = \"frequency\" can used generate data frame cell population frequencies levels given group_var, e.g. biological group sample ID. example, add another metadata column “group_sample_ID” combination available.","code":"condor$anno$cell_anno$group_sample_ID <- paste(condor$anno$cell_anno$group,condor$anno$cell_anno$sample_ID, sep=\"_\")  frequencies<-getTable(fcd = condor,                       output_type = \"frequency\",                       cluster_slot = \"phenograph_pca_orig_k_60\",                        cluster_var = \"metaclusters\",                        group_var = \"group_sample_ID\",                        numeric = F)  frequencies #>          group_var  B cells Basophils CD16+ Monocytes      CD4      CD8 #> ctrl_ID3  ctrl_ID3 3.540000 0.8000000        3.500000 36.54000 17.79000 #> ctrl_ID5  ctrl_ID5 4.930000 0.3500000        2.190000 32.34000 22.70000 #> ctrl_ID7  ctrl_ID7 1.710000 0.5900000        1.430000 40.48000 13.50000 #> pat_ID10  pat_ID10 1.110000 0.1300000        3.420000 15.99000 32.66000 #> pat_ID6    pat_ID6 2.121781 0.2652227        5.459167 14.37728 27.39529 #> pat_ID8    pat_ID8 0.860000 0.2500000        2.550000 27.58000 28.59000 #>          Classical Monocytes    Mixed NK bright   Nk dim      pDCs #> ctrl_ID3            23.38000 0.480000   4.64000  8.25000 0.8000000 #> ctrl_ID5            23.72000 2.480000   5.12000  5.17000 0.6600000 #> ctrl_ID7            21.51000 0.100000   5.15000 14.90000 0.5500000 #> pat_ID10            31.84000 0.070000   3.17000  6.41000 0.2400000 #> pat_ID6             23.22909 0.994585   7.37098 13.72527 0.3315283 #> pat_ID8             30.08000 0.310000   2.47000  0.79000 0.5400000 #>          Unconventional T cells #> ctrl_ID3               0.280000 #> ctrl_ID5               0.340000 #> ctrl_ID7               0.080000 #> pat_ID10               4.960000 #> pat_ID6                4.729804 #> pat_ID8                5.980000"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"differential-testing","dir":"Articles","previous_headings":"Investigate cell population frequencies > Investigation of cell population frequencies","what":"Differential testing","title":"Differential Analysis with cyCONDOR","text":"cyCONDOR provides wrapper functions around frequently used statistical tests implemented rstatix package (link. functions first calculate cell population frequencies given condor object arguments specifying cell population annotation (via cluster_slot cluster_var), sample IDs (sample_var) grouping variable (group_var) used. user needs make sure sample IDs unique assigned one level grouping variable. Afterwards function automatically performs testing p-value adjustment. Tests two groups: frequency_t_test(): parametric, two-sample t-test compare two groups (paired independent) frequency_wilcox_test(): non-parametric, two-sample Wilcoxon Test compare two groups (paired independent) case paired testing, pairing variable (pair_var) containing donor IDs needs specified paired_test = T needs set. Tests three groups: frequency_anova_test(): parametric one-way Anova independent measures compare three groups, optional post-hoc testing utilizing emmeans tests. frequency_kruskal_test(): non-parametric Kruskal-Wallis Rank Sum Test compare 3 independent groups. Optionally, post-hoc testing Dunne’s Test can performed. frequency_friedman_test(): non-parametric Friedman Rank Sum Test compare 3 groups paired data. Optionally, post-hoc testing pairwise Wilcoxon Tests can performed. Whether post-hoc testing performed, can regulated via setting post_hoc_parameter TRUE FALSE. default, post-hoc tests performed Anova, Kruskal-Wallis Friedman Test adjusted p-value <= threshold argument (e.g. kruskal_sig_threshold). P-value adjustment post-hoc tests performed per cell population. default, p-value adjustment performed using conservative “bonferroni” method, methods available basic R function stats::p.adjust() can chosen fed cyCONDOR functions via arguments. (Note post-hoc tests separate argument ). recommend get familiar options p.adjust function point. result statistical test store extra@statistics slot, possible add statistics boxplot directly usign statistics argument. , exemplary show compare two groups using t-test: usual, “one-solves--” approach statistical testing still necessary think whether given data meet required assumptions test kind p-value adjustment performed. mentioned , getTable() function allows easy extraction cell population frequencies can subsequently subjected tests, assumption checks tools. cyCONDOR also provides easy way perform differential abundance testing tests implemented package diffcyt Weber et al. (2019). important note, abundance tests based cell population frequencies cell population counts input. information read section Differential testing diffcyt.","code":"#double check correctness of sample IDs to group assignment unique(condor$anno$cell_anno[,c(\"sample_ID\",\"group\")]) #>               sample_ID group #> ID10.fcs_1         ID10   pat #> ID3.fcs_10001       ID3  ctrl #> ID5.fcs_20001       ID5  ctrl #> ID6.fcs_30001       ID6   pat #> ID7.fcs_39050       ID7  ctrl #> ID8.fcs_49050       ID8   pat #perform test condor <- frequency_t_test(fcd = condor,                            cluster_slot = \"phenograph_pca_orig_k_60\",                             cluster_var = \"metaclusters\",                            sample_var = \"sample_ID\",                             group_var = \"group\",                            paired_test = F,                            p.adjust.method = \"bonferroni\",                             print_results = T) #> Statistic results were saved in the fcd under extras$statistics #> # A tibble: 11 × 13 #>    cluster        .y.   group1 group2    n1    n2 statistic    df       p  p.adj #>    <fct>          <chr> <chr>  <chr>  <int> <int>     <dbl> <dbl>   <dbl>  <dbl> #>  1 B cells        value ctrl   pat        3     3     2.01   2.67 0.149   1      #>  2 Basophils      value ctrl   pat        3     3     2.67   2.43 0.0951  1      #>  3 CD16+ Monocyt… value ctrl   pat        3     3    -1.36   3.58 0.252   1      #>  4 CD4            value ctrl   pat        3     3     3.59   3.16 0.0341  0.375  #>  5 CD8            value ctrl   pat        3     3    -3.73   3.27 0.0289  0.318  #>  6 Classical Mon… value ctrl   pat        3     3    -2.03   2.27 0.164   1      #>  7 Mixed          value ctrl   pat        3     3     0.713  2.55 0.536   1      #>  8 NK bright      value ctrl   pat        3     3     0.411  2.05 0.72    1      #>  9 Nk dim         value ctrl   pat        3     3     0.522  3.75 0.631   1      #> 10 pDCs           value ctrl   pat        3     3     2.62   3.84 0.0615  0.676  #> 11 Unconventiona… value ctrl   pat        3     3   -12.7    2.17 0.00447 0.0492 #> # ℹ 3 more variables: p.adj.signif <chr>, p.adj_method <chr>, #> #   applied_test <chr>"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"visualization","dir":"Articles","previous_headings":"Investigate differential expression","what":"Visualization","title":"Differential Analysis with cyCONDOR","text":"cyCONDOR provides several functions look marker expression groups groups samples.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"heatmap-split-by-group","dir":"Articles","previous_headings":"Investigate differential expression > Visualization","what":"Heatmap split by group","title":"Differential Analysis with cyCONDOR","text":"Heatmaps provide convenient overview show expression many markers many group cell population combinations. plot_marker_group_HM() function calculates mean value marker, group cell population combination performs centering scaling data. mentioned beginning, underlying absolute cell numbers considered interpreting expression, especially clustering annotation rather fine grained larger proportional shifts observed groups.","code":"plot_marker_group_HM(fcd = condor,                      expr_slot = \"orig\",                      cluster_slot = \"phenograph_pca_orig_k_60\",                      cluster_var = \"metaclusters\",                      group_var = \"group\",                      size = 8,                      title = \"Heatmap of expression\",                       marker_to_exclude = c(\"SSC-A\", \"FSC-A\") )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"violin-plot-split-by-group","dir":"Articles","previous_headings":"Investigate differential expression > Visualization","what":"Violin plot split by group","title":"Differential Analysis with cyCONDOR","text":"contrast heatmaps show aggregated expression value, violin plots can used visualize distribution expression values. Providing grouping variable group_var function plot_marker_violinplot() allows split violins meta variable available cell_anno, e.g. disease group sample ID. horizontal line indicates median expression.  vector one feature provided via marker argument, function returns list plots. plots can either plotted separately can combined, e.g. cowplot package.","code":"plot_marker_violinplot(fcd =condor,                        marker =c(\"CD57\"),                        expr_slot =\"orig\",                        cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                        group_var = \"group\",                        color_palette = c(\"ctrl\"=\"purple\",\"pat\"=\"darkorange\")) plot.list<-plot_marker_violinplot(fcd =condor,                                   marker =c(\"CD27\",\"CD127 (IL7RA)\"),                                   expr_slot =\"orig\",                                   cluster_slot = \"phenograph_pca_orig_k_60\",                                    cluster_var = \"metaclusters\",                                   group_var = \"group\",                                   color_palette = c(\"ctrl\"=\"purple\",\"pat\"=\"darkorange\"))  cowplot::plot_grid(plotlist = plot.list, ncol = 1)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"boxplots-of-aggregated-expression","dir":"Articles","previous_headings":"Investigate differential expression > Visualization","what":"Boxplots of aggregated expression","title":"Differential Analysis with cyCONDOR","text":"function plot_marker_boxplot() summarizes expression selected markers sample-cluster combination, calculating median (fun = \"median\") mean (fun = \"mean\"). values grouped grouping variable group_var visualized box plots dot representing one sample defined sample_var.  default, function outputs boxplots cell populations markers available. also possible provide vector markers via marker parameter cell populations via cluster_to_show. using facet_by_clustering = T, plots faceted cell population, markers located x-axis.","code":"plot_marker_boxplot(fcd = condor,                     #marker = c(\"CD57\",\"CD8\"),                     expr_slot =\"orig\",                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     facet_by_clustering = F,                     group_var = \"group\",                      sample_var = \"sample_ID\",                     fun = \"median\") plot_marker_boxplot(fcd = condor,                     marker = c(\"CD57\",\"CD8\"),                     expr_slot =\"orig\",                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"metaclusters\",                     facet_by_clustering = T,                     group_var = \"group\",                      sample_var = \"sample_ID\",                     fun = \"median\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"export-aggregated-expression-as-data-frame","dir":"Articles","previous_headings":"Investigate differential expression > Visualization","what":"Export aggregated expression as data frame","title":"Differential Analysis with cyCONDOR","text":"custom visualizations, getTable() function can used calculate median (output_type = \"median\") mean (output_type = \"mean\") expression combinations cell populations group variables group_var.","code":"getTable(fcd = condor,          output_type = \"mean\",          cluster_slot = \"phenograph_pca_orig_k_60\",           cluster_var = \"metaclusters\",           group_var = \"sample_ID\",           numeric = F) #> # A tibble: 66 × 30 #> # Groups:   group_var [6] #>    group_var cluster   `FSC-A` `SSC-A`  CD38   CD8 `CD195 (CCR5)` `CD94 (KLRD1)` #>    <chr>     <fct>       <dbl>   <dbl> <dbl> <dbl>          <dbl>          <dbl> #>  1 ID10      Classica…    4.26    4.03  3.61 1.53            1.60          2.21  #>  2 ID10      CD4          4.15    3.54  2.42 2.12            1.86          1.35  #>  3 ID10      CD8          4.12    3.66  1.83 3.63            1.96          2.22  #>  4 ID10      Nk dim       4.09    3.71  3.24 1.82            1.24          2.74  #>  5 ID10      Unconven…    4.14    3.68  1.47 1.95            2.29          1.52  #>  6 ID10      CD16+ Mo…    4.22    3.96  1.83 2.01            1.96          2.64  #>  7 ID10      NK bright    4.08    3.68  2.88 1.89            1.48          3.22  #>  8 ID10      B cells      4.07    3.66  2.63 1.84            1.76          2.08  #>  9 ID10      pDCs         4.21    3.81  3.32 1.65            3.53          1.44  #> 10 ID10      Basophils    4.18    3.88  4.04 0.990           2.43          0.657 #> # ℹ 56 more rows #> # ℹ 22 more variables: CD45RA <dbl>, `HLA-DR` <dbl>, CD56 <dbl>, #> #   `CD127 (IL7RA)` <dbl>, CD14 <dbl>, CD64 <dbl>, CD4 <dbl>, IgD <dbl>, #> #   CD19 <dbl>, CD16 <dbl>, CD32 <dbl>, `CD197 (CCR7)` <dbl>, CD20 <dbl>, #> #   CD27 <dbl>, CD15 <dbl>, `PD-1` <dbl>, CD3 <dbl>, CD57 <dbl>, CD25 <dbl>, #> #   `CD123 (IL3RA)` <dbl>, CD13 <dbl>, CD11c <dbl>"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"differential-testing-with-diffcyt","dir":"Articles","previous_headings":"","what":"Differential testing with diffcyt","title":"Differential Analysis with cyCONDOR","text":"diffcyt package (Weber et al.,2019) provides several advanced methods perform exploratory differential analysis high-dimensional cytometry data. package enables comparison groups samples different biological conditions providing , methods test differential cell population abundance (DA) methods test differential expression within cell populations (differential state (DS) testing). section, show condor object, processed clustered cyCONDOR, can converted SummarizedExperiment object subsequently give example object can used functions implemented diffcyt. details diffcyt, please refer diffcyt publication Weber et al. (2019) diffcyt Bioconductor vignette. diffcyt publication , focused analysis high resolution clustering cytometry data, diffcyt also used Bioconductor workflow cytofWorkflow(Nowicka M, Crowell H, Robinson M (2024);DOI: 10.18129/B9.bioc.cytofWorkflow) analyse lower resolution annotations based knowledge-based merging clusters. use workflow work please consider citing cyCONDOR Weber et al. (2019).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"install-packages","dir":"Articles","previous_headings":"Differential testing with diffcyt","what":"Install packages","title":"Differential Analysis with cyCONDOR","text":"diffcyt package installed cyCONDOR docker image. code run different environment, may install diffcyt.","code":"# #Install 'diffcyt' package from Bioconductor # BiocManager::install(\"diffcyt\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"convert-condor-object-to-summarizedexperiment-object","dir":"Articles","previous_headings":"Differential testing with diffcyt","what":"Convert condor object to SummarizedExperiment object","title":"Differential Analysis with cyCONDOR","text":"run diffcyt's differential analysis pipeline high-dimensional cytometry data clustered cyCONDOR, condor object needs converted compatible input format first. cyCONDOR provides function prepInputDiffcyt() generates SummarizedExperiment object, tailored use diffcyt. fcd: condor object, subjected condor clustering workflow cluster_slot: clustering slot clustering variable cluster_var selected cluster_typ: variable name clustering used define cell populations testing. variable name change “cluster_id” since diffcyt requires cluster identifier stored variable “cluster_id” sample_var: variable name cell_anno contains unique sample IDs. variable name change “sample_id” since diffcyt requires sample IDs stored variable “sample_id” meta_vars: vector variables cell_anno, contain sample level metadata, meaning sample ID associated exactly one level per variable. variables user wants use test design need listed, e.g. group, donor_id. marker_state: vector marker names marker_class “state” marker_type: vector marker names marker_class “type” function returns SummarizedExperiment object containing: metadata, including experiment_info, includes sample-level metadata provided sample_var meta_vars. Note sample_var renamed “sample_id” assay “exprs”, contains feature values expr_slot “orig” rowData, containing cell-level metadata well column “cluster_id” containing cell population labels sample IDs column “sample_id” colData, containing marker names marker types required diffcyt functions","code":"# check that clustering or cell label prediction is available str(condor$clustering) #> List of 1 #>  $ phenograph_pca_orig_k_60:'data.frame':    59049 obs. of  3 variables: #>   ..$ Phenograph  : Factor w/ 25 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 5 6 1 1 5 ... #>   ..$ Description : chr [1:59049] \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" \"pca_orig_k60\" ... #>   ..$ metaclusters: Factor w/ 11 levels \"Classical Monocytes\",..: 1 2 3 4 3 3 1 1 1 3 ... condor_se<-prepInputDiffcyt(fcd = condor,                             cluster_slot = \"phenograph_pca_orig_k_60\",                             cluster_var = \"metaclusters\",                             sample_var = \"sample_ID\",                             meta_vars = c(\"expfcs_filename\",\"group\"),                             marker_state = NULL,                             marker_type = NULL) condor_se #> class: SummarizedExperiment  #> dim: 59049 28  #> metadata(2): experiment_info n_cells #> assays(1): exprs #> rownames(59049): ID10.fcs_1 ID10.fcs_2 ... ID8.fcs_59048 ID8.fcs_59049 #> rowData names(4): sample_id expfcs_filename group cluster_id #> colnames(28): FSC-A SSC-A ... CD13 CD11c #> colData names(3): channel_name marker_name marker_class"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"differential-analysis-workflow-with-diffcyt","dir":"Articles","previous_headings":"Differential testing with diffcyt","what":"Differential analysis workflow with diffcyt","title":"Differential Analysis with cyCONDOR","text":"Next run individual functions diffcyt analysis workflow, similar diffcyt Bioconductor vignette provided authors package.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"setup-input-for-testing","dir":"Articles","previous_headings":"Differential testing with diffcyt > Differential analysis workflow with diffcyt","what":"Setup input for testing","title":"Differential Analysis with cyCONDOR","text":"First, calculate cell counts sample cluster combination using diffcyt::calcCounts(). counts required diffcyt tests. second step, calculate median marker expression sample cluster combination using diffcyt::calcMedians(). data required differential state testing, since diffcyt’s test performed aggregated expression instead cell level. Note, output also contain medians scatter features, available “orig” expression data condor object. Next prepare design matrix describing experimental design. example, interested factor “group”, indicating sample taken patient control donor. (Note: diffcyt tests require formula instead design matrix.) Additionally, diffcyt’s differential testing functions also require contrast matrix specifying comparisons performed.","code":"# calculate cell counts d_counts <- diffcyt::calcCounts(condor_se)  # inspect object d_counts #> class: SummarizedExperiment  #> dim: 11 6  #> metadata(0): #> assays(1): counts #> rownames(11): Classical Monocytes CD4 ... Basophils Mixed #> rowData names(2): cluster_id n_cells #> colnames(6): ID10 ID3 ... ID7 ID8 #> colData names(3): sample_id expfcs_filename group # inspect counts SummarizedExperiment::assays(d_counts)$counts #>                        ID10  ID3  ID5  ID6  ID7  ID8 #> Classical Monocytes    3184 2338 2372 2102 2151 3008 #> CD4                    1599 3654 3234 1301 4048 2758 #> CD8                    3266 1779 2270 2479 1350 2859 #> Nk dim                  641  825  517 1242 1490   79 #> Unconventional T cells  496   28   34  428    8  598 #> CD16+ Monocytes         342  350  219  494  143  255 #> NK bright               317  464  512  667  515  247 #> B cells                 111  354  493  192  171   86 #> pDCs                     24   80   66   30   55   54 #> Basophils                13   80   35   24   59   25 #> Mixed                     7   48  248   90   10   31 # Calculate cluster medians d_medians <- diffcyt::calcMedians(condor_se)  #inspect medians d_medians #> class: SummarizedExperiment  #> dim: 11 6  #> metadata(2): id_type_markers id_state_markers #> assays(28): FSC-A SSC-A ... CD13 CD11c #> rownames(11): Classical Monocytes CD4 ... Basophils Mixed #> rowData names(1): cluster_id #> colnames(6): ID10 ID3 ... ID7 ID8 #> colData names(3): sample_id expfcs_filename group # inspect medians SummarizedExperiment::assays(d_medians)$CD57 #>                             ID10       ID3       ID5       ID6       ID7 #> Classical Monocytes    1.2342792 0.9569836 0.8784949 1.1214760 0.9437813 #> CD4                    0.8636581 0.7256709 0.6477634 0.8112442 0.6627282 #> CD8                    3.2863153 0.8976232 0.9852229 2.3968618 0.7624646 #> Nk dim                 3.3696450 3.5735292 3.0539440 3.4984811 3.3147029 #> Unconventional T cells 3.8024406 2.7093433 2.7061293 3.3138678 3.3122278 #> CD16+ Monocytes        0.7645921 0.7576529 0.7646734 0.9454071 0.5967356 #> NK bright              0.7663569 0.8889427 0.7204651 0.8904777 0.7738680 #> B cells                0.6241813 0.3338990 0.4309125 0.5653783 0.3539324 #> pDCs                   0.9298423 1.0022037 0.7510136 0.9939891 0.7913450 #> Basophils              1.2820025 1.0921873 0.9382373 1.2456938 1.3153434 #> Mixed                  0.6692602 0.6345080 0.6300146 0.8673538 1.0005692 #>                              ID8 #> Classical Monocytes    1.2888429 #> CD4                    0.7754308 #> CD8                    3.2786161 #> Nk dim                 2.9819875 #> Unconventional T cells 3.7977096 #> CD16+ Monocytes        0.8756224 #> NK bright              1.0096297 #> B cells                0.4325274 #> pDCs                   1.0707367 #> Basophils              1.2879905 #> Mixed                  0.6692396 experiment_info<-condor_se@metadata$experiment_info  design <- diffcyt::createDesignMatrix(experiment_info,                                       cols_design = c(\"group\")) design #>      (Intercept) grouppat #> ID10           1        1 #> ID3            1        0 #> ID5            1        0 #> ID6            1        1 #> ID7            1        0 #> ID8            1        1 #> attr(,\"assign\") #> [1] 0 1 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$group #> [1] \"contr.treatment\" # Create contrast matrix contrast <- diffcyt::createContrast(c(0, 1))  # check nrow(contrast) == ncol(design) #> [1] TRUE  data.frame(parameters = colnames(design), contrast) #>    parameters contrast #> 1 (Intercept)        0 #> 2    grouppat        1"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"test-differential-abundance","dir":"Articles","previous_headings":"Differential testing with diffcyt > Differential analysis workflow with diffcyt","what":"Test differential abundance","title":"Differential Analysis with cyCONDOR","text":"input objects set , can perform differential abundance test testDA_edgeR(), default method DA testing diffcyt. According results table, Unconventional T cell show differential abundance adjusted p-value 0.05. can use cyCONDOR visualize population frequencies per sample population - note frequency used visualization purposes , diffcyt takes counts cluster sample combination input.","code":"# perform differential abundance test res_DA <- diffcyt::testDA_edgeR(d_counts, design, contrast) # table of results ordered by increasing adjusted p-value diffcyt::topTable(res_DA, all = TRUE) #> DataFrame with 11 rows and 3 columns #>                                    cluster_id       p_val       p_adj #>                                      <factor>   <numeric>   <numeric> #> Unconventional T cells Unconventional T cells 3.34055e-11 3.67461e-10 #> Basophils              Basophils              1.37570e-02 7.56633e-02 #> B cells                B cells                3.35765e-02 1.23114e-01 #> CD4                    CD4                    5.33195e-02 1.46629e-01 #> CD8                    CD8                    1.04608e-01 1.92753e-01 #> pDCs                   pDCs                   1.05138e-01 1.92753e-01 #> CD16+ Monocytes        CD16+ Monocytes        2.23765e-01 3.51631e-01 #> Mixed                  Mixed                  3.37025e-01 4.63409e-01 #> Classical Monocytes    Classical Monocytes    4.51969e-01 5.52406e-01 #> Nk dim                 Nk dim                 6.36207e-01 6.99827e-01 #> NK bright              NK bright              7.24174e-01 7.24174e-01 plots <- plot_frequency_boxplot(fcd = condor,                                 cluster_slot = \"phenograph_pca_orig_k_60\",                                 cluster_var = \"metaclusters\",                                 sample_var = \"sample_ID\",                                 group_var = \"group\",                                 numeric = F,                                 color_palette = c(\"ctrl\"=\"purple\",\"pat\"=\"darkorange\"))  plots$`Unconventional T cells`"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"test-differential-states","dir":"Articles","previous_headings":"Differential testing with diffcyt > Differential analysis workflow with diffcyt","what":"Test differential states","title":"Differential Analysis with cyCONDOR","text":"Next, give example apply differential state test testDS_LMM diffcyt. function actually requires formula instead design. important note thediffcyt workflow distinguishes “type” “state” markers. “type” markers identify cell types used clustering, “state” markers used investigate different states, e.g. activation. default, state markers tested differential expression. clear separation avoids data used twice - clustering differential state analysis. hand, clear distinction type state markers often quite difficult, e.g. HLA-DR can used identify myeloid B cell populations peripheral blood, also upregulated activated cells. processing dataset, parameters used clustering. Due broad annotation, differential state analysis still interest . working high resolution clustering based markers, might different. example, identified small population HLA-DR+ T cells already, frequency abundance test capture difference biological groups already, differential state analysis might difficult. Overall, explicit setup analysis strongly depends used panel research question. back example. diffcyt functions require marker_class specified every parameter. Therefor, check first marker class assigned markers converting data prepInputDiffcyt(). Since didn’t specify certain markers marker_state marker_type generating condor_se prepInputDiffcyt() function, default available features classified “type”. Obviously, like exclude FSC-SSC-differential testing. , either go back specify marker_state marker_type prepInputDiffct(). provide diffcyt test logical vector marker include testing via markers_to_test argument. original diffcyt workflow set arcsinh transformed cyTOF flow cytometry data. , applied flow cytometry dataset autological transformed. observed p-values however similar obtained using arcsinh transformation (cofactor 150) dataset. Let’s look top cluster marker combinations. case marker shows FDR corrected p-value <0.05. Nevertheless, worth mentioning, results always require visual inspection set potential findings context. can use cyCONDOR functions visualize median expression.","code":"experiment_info<-condor_se@metadata$experiment_info  formula <- createFormula(experiment_info, cols_fixed = \"group\")  formula #> $formula #> y ~ group #> <environment: 0x55dbd4751c38> #>  #> $data #>      group #> ID10   pat #> ID3   ctrl #> ID5   ctrl #> ID6    pat #> ID7   ctrl #> ID8    pat #>  #> $random_terms #> [1] FALSE #check marker annotation in condor_se marker_info<-SummarizedExperiment::colData(condor_se) %>% as.data.frame() marker_info #>                channel_name   marker_name marker_class #> FSC-A                 FSC-A         FSC-A         type #> SSC-A                 SSC-A         SSC-A         type #> CD38                   CD38          CD38         type #> CD8                     CD8           CD8         type #> CD195 (CCR5)   CD195 (CCR5)  CD195 (CCR5)         type #> CD94 (KLRD1)   CD94 (KLRD1)  CD94 (KLRD1)         type #> CD45RA               CD45RA        CD45RA         type #> HLA-DR               HLA-DR        HLA-DR         type #> CD56                   CD56          CD56         type #> CD127 (IL7RA) CD127 (IL7RA) CD127 (IL7RA)         type #> CD14                   CD14          CD14         type #> CD64                   CD64          CD64         type #> CD4                     CD4           CD4         type #> IgD                     IgD           IgD         type #> CD19                   CD19          CD19         type #> CD16                   CD16          CD16         type #> CD32                   CD32          CD32         type #> CD197 (CCR7)   CD197 (CCR7)  CD197 (CCR7)         type #> CD20                   CD20          CD20         type #> CD27                   CD27          CD27         type #> CD15                   CD15          CD15         type #> PD-1                   PD-1          PD-1         type #> CD3                     CD3           CD3         type #> CD57                   CD57          CD57         type #> CD25                   CD25          CD25         type #> CD123 (IL3RA) CD123 (IL3RA) CD123 (IL3RA)         type #> CD13                   CD13          CD13         type #> CD11c                 CD11c         CD11c         type #get logical vector of marker to be tested markers_oi <- !names(SummarizedExperiment::assays(d_medians)) %in% c(\"SSC-A\",\"FSC-A\")  # perform differential state analysis res_DS <- diffcyt::testDS_LMM(d_counts, d_medians, formula, contrast,                                 markers_to_test = markers_oi) # display table of results ordered by increasing adjusted p-value diffcyt::topTable(res_DS, format_vals = FALSE) #> DataFrame with 20 rows and 4 columns #>                                    cluster_id     marker_id      p_val #>                                      <factor>      <factor>  <numeric> #> CD8                    CD8                    CD94 (KLRD1)  0.00345526 #> CD8                    CD8                    CD57          0.00197002 #> Classical Monocytes    Classical Monocytes    CD57          0.00571846 #> CD8                    CD8                    CD27          0.00978021 #> Unconventional T cells Unconventional T cells CD123 (IL3RA) 0.00905320 #> ...                                       ...           ...        ... #> Classical Monocytes    Classical Monocytes             CD15  0.0263070 #> Classical Monocytes    Classical Monocytes             IgD   0.0492237 #> pDCs                   pDCs                            CD19  0.0498908 #> Nk dim                 Nk dim                          CD32  0.0464321 #> Unconventional T cells Unconventional T cells          CD57  0.0453162 #>                            p_adj #>                        <numeric> #> CD8                     0.494102 #> CD8                     0.494102 #> Classical Monocytes     0.545160 #> CD8                     0.559428 #> Unconventional T cells  0.559428 #> ...                          ... #> Classical Monocytes     0.709578 #> Classical Monocytes     0.713439 #> pDCs                    0.713439 #> Nk dim                  0.713439 #> Unconventional T cells  0.713439 res<-diffcyt::topTable(res_DS, all = TRUE) %>% data.frame() head(res) #>                                    cluster_id     marker_id       p_val #> CD8                                       CD8  CD94 (KLRD1) 0.003455261 #> CD8.1                                     CD8          CD57 0.001970022 #> Classical Monocytes       Classical Monocytes          CD57 0.005718462 #> CD8.2                                     CD8          CD27 0.009780213 #> Unconventional T cells Unconventional T cells CD123 (IL3RA) 0.009053205 #> pDCs                                     pDCs        CD45RA 0.018106991 #>                            p_adj #> CD8                    0.4941023 #> CD8.1                  0.4941023 #> Classical Monocytes    0.5451600 #> CD8.2                  0.5594282 #> Unconventional T cells 0.5594282 #> pDCs                   0.5753999 p1<-plot_marker_boxplot(fcd = condor,                         marker = c(\"CD94 (KLRD1)\"),                         expr_slot =\"orig\",                         cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                         cluster_to_show = \"CD8\",                         facet_by_clustering = F,                         group_var = \"group\",                         sample_var = \"sample_ID\",                         fun = \"median\")  condor$anno$cell_anno$group_sample_ID<-paste(condor$anno$cell_anno$group, condor$anno$cell_anno$sample_ID, sep=\"_\") p2<-plot_marker_violinplot(fcd = condor,                         marker = c(\"CD94 (KLRD1)\"),                         expr_slot =\"orig\",                         cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                         cluster_to_show = \"CD8\",                         group_var = \"group_sample_ID\")  p3<-plot_marker_violinplot(fcd = condor,                             expr_slot =\"orig\",                            marker = \"CD94 (KLRD1)\",                            cluster_slot = \"phenograph_pca_orig_k_60\",                            cluster_var = \"metaclusters\")  plots<-cowplot::plot_grid(plotlist = list(p1,p2),rel_widths = c(2,3)) cowplot::plot_grid(plotlist = list(plots,p3),ncol=1,rel_heights = c(1,1.5)) p1<-plot_marker_boxplot(fcd = condor,                         marker = c(\"CD57\"),                         expr_slot =\"orig\",                         cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                         cluster_to_show = \"CD8\",                         facet_by_clustering = F,                         group_var = \"group\",                         sample_var = \"sample_ID\",                         fun = \"median\")  condor$anno$cell_anno$group_sample_ID<-paste(condor$anno$cell_anno$group, condor$anno$cell_anno$sample_ID, sep=\"_\") p2<-plot_marker_violinplot(fcd = condor,                         marker = c(\"CD57\"),                         expr_slot =\"orig\",                         cluster_slot = \"phenograph_pca_orig_k_60\",                         cluster_var = \"metaclusters\",                         cluster_to_show = \"CD8\",                         group_var = \"group_sample_ID\")  p3<-plot_marker_violinplot(fcd = condor,                             expr_slot =\"orig\",                            marker = \"CD57\",                            cluster_slot = \"phenograph_pca_orig_k_60\",                            cluster_var = \"metaclusters\")  plots<-cowplot::plot_grid(plotlist = list(p1,p2),rel_widths = c(2,3)) cowplot::plot_grid(plotlist = list(plots,p3),ncol=1,rel_heights = c(1,1.5))"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Differential_Analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Differential Analysis with cyCONDOR","text":"","code":"info <- sessionInfo()  info #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] dplyr_1.1.4    ggplot2_3.5.2  diffcyt_1.26.1 cyCONDOR_0.3.1 #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.40.1              Rmisc_1.5.1                 #>   [3] urlchecker_1.0.1            nnet_7.3-20                 #>   [5] CytoNorm_2.0.1              TH.data_1.1-3               #>   [7] vctrs_0.6.5                 digest_0.6.37               #>   [9] png_0.1-8                   shape_1.4.6.1               #>  [11] proxy_0.4-27                slingshot_2.14.0            #>  [13] ggrepel_0.9.6               corrplot_0.95               #>  [15] parallelly_1.45.0           MASS_7.3-65                 #>  [17] pkgdown_2.1.3               reshape2_1.4.4              #>  [19] httpuv_1.6.16               foreach_1.5.2               #>  [21] BiocGenerics_0.52.0         withr_3.0.2                 #>  [23] ggrastr_1.0.2               xfun_0.52                   #>  [25] ggpubr_0.6.1                ellipsis_0.3.2              #>  [27] survival_3.8-3              memoise_2.0.1               #>  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            #>  [31] RProtoBufLib_2.18.0         princurve_2.1.6             #>  [33] profvis_0.4.0               ggsci_3.2.0                 #>  [35] systemfonts_1.2.3           ragg_1.4.0                  #>  [37] zoo_1.8-14                  GlobalOptions_0.1.2         #>  [39] DEoptimR_1.1-3-1            Formula_1.2-5               #>  [41] promises_1.3.3              scatterplot3d_0.3-44        #>  [43] httr_1.4.7                  rstatix_0.7.2               #>  [45] globals_0.18.0              rstudioapi_0.17.1           #>  [47] UCSC.utils_1.2.0            miniUI_0.1.2                #>  [49] generics_0.1.4              ggcyto_1.34.0               #>  [51] base64enc_0.1-3             curl_6.4.0                  #>  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             #>  [55] flowWorkspace_4.18.1        polyclip_1.10-7             #>  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     #>  [59] SparseArray_1.6.2           RBGL_1.82.0                 #>  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         #>  [63] xtable_1.8-4                stringr_1.5.1               #>  [65] desc_1.4.3                  doParallel_1.0.17           #>  [67] evaluate_1.0.4              S4Arrays_1.6.0              #>  [69] hms_1.1.3                   glmnet_4.1-9                #>  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               #>  [73] colorspace_2.1-1            harmony_1.2.3               #>  [75] reticulate_1.42.0           readxl_1.4.5                #>  [77] magrittr_2.0.3              lmtest_0.9-40               #>  [79] readr_2.1.5                 Rgraphviz_2.50.0            #>  [81] later_1.4.2                 lattice_0.22-7              #>  [83] future.apply_1.20.0         robustbase_0.99-4-1         #>  [85] XML_3.99-0.18               cowplot_1.2.0               #>  [87] matrixStats_1.5.0           xts_0.14.1                  #>  [89] class_7.3-23                Hmisc_5.2-3                 #>  [91] pillar_1.11.0               nlme_3.1-168                #>  [93] iterators_1.0.14            compiler_4.4.2              #>  [95] RSpectra_0.16-2             stringi_1.8.7               #>  [97] gower_1.0.2                 minqa_1.2.8                 #>  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             #> [101] devtools_2.4.5              CytoML_2.18.3               #> [103] plyr_1.8.9                  crayon_1.5.3                #> [105] abind_1.4-8                 locfit_1.5-9.12             #> [107] sp_2.2-0                    sandwich_3.1-1              #> [109] pcaMethods_1.98.0           codetools_0.2-20            #> [111] multcomp_1.4-28             textshaping_1.0.1           #> [113] recipes_1.3.1               openssl_2.3.3               #> [115] Rphenograph_0.99.1          TTR_0.24.4                  #> [117] bslib_0.9.0                 e1071_1.7-16                #> [119] destiny_3.20.0              GetoptLong_1.0.5            #> [121] ggplot.multistats_1.0.1     mime_0.13                   #> [123] splines_4.4.2               circlize_0.4.16             #> [125] Rcpp_1.1.0                  sparseMatrixStats_1.18.0    #> [127] cellranger_1.1.0            utf8_1.2.6                  #> [129] knitr_1.50                  clue_0.3-66                 #> [131] lme4_1.1-37                 fs_1.6.6                    #> [133] listenv_0.9.1               checkmate_2.3.2             #> [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                #> [137] pkgbuild_1.4.8              ggsignif_0.6.4              #> [139] tibble_3.3.0                Matrix_1.7-3                #> [141] rpart.plot_3.1.2            statmod_1.5.0               #> [143] tzdb_0.5.0                  tweenr_2.0.3                #> [145] pkgconfig_2.0.3             pheatmap_1.0.13             #> [147] tools_4.4.2                 cachem_1.1.0                #> [149] rbibutils_2.3               smoother_1.3                #> [151] fastmap_1.2.0               rmarkdown_2.29              #> [153] scales_1.4.0                grid_4.4.2                  #> [155] usethis_3.1.0               broom_1.0.8                 #> [157] sass_0.4.10                 graph_1.84.1                #> [159] carData_3.0-5               RANN_2.6.2                  #> [161] rpart_4.1.24                farver_2.1.2                #> [163] reformulas_0.4.1            yaml_2.3.10                 #> [165] MatrixGenerics_1.18.1       foreign_0.8-90              #> [167] ggthemes_5.1.0              cli_3.6.5                   #> [169] purrr_1.1.0                 stats4_4.4.2                #> [171] lifecycle_1.0.4             uwot_0.2.3                  #> [173] askpass_1.2.1               caret_7.0-1                 #> [175] Biobase_2.66.0              mvtnorm_1.3-3               #> [177] lava_1.8.1                  sessioninfo_1.2.3           #> [179] backports_1.5.0             cytolib_2.18.2              #> [181] timechange_0.3.0            gtable_0.3.6                #> [183] rjson_0.2.23                umap_0.2.10.0               #> [185] ggridges_0.5.6              parallel_4.4.2              #> [187] pROC_1.18.5                 limma_3.62.2                #> [189] jsonlite_2.0.0              edgeR_4.4.2                 #> [191] RcppHNSW_0.6.0              Rtsne_0.17                  #> [193] FlowSOM_2.14.0              ranger_0.17.0               #> [195] flowCore_2.18.0             jquerylib_0.1.4             #> [197] timeDate_4041.110           shiny_1.11.1                #> [199] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           #> [201] glue_1.8.0                  XVector_0.46.0              #> [203] VIM_6.2.2                   gridExtra_2.3               #> [205] boot_1.3-31                 TrajectoryUtils_1.14.0      #> [207] igraph_2.1.4                R6_2.6.1                    #> [209] tidyr_1.3.1                 SingleCellExperiment_1.28.1 #> [211] labeling_0.4.3              vcd_1.4-13                  #> [213] cluster_2.1.8.1             pkgload_1.4.0               #> [215] GenomeInfoDb_1.42.3         ipred_0.9-15                #> [217] nloptr_2.2.1                DelayedArray_0.32.0         #> [219] tidyselect_1.2.1            vipor_0.4.7                 #> [221] htmlTable_2.4.3             ggforce_0.5.0               #> [223] CytoDx_1.26.0               car_3.1-3                   #> [225] future_1.58.0               ModelMetrics_1.2.2.2        #> [227] laeken_0.5.3                data.table_1.17.8           #> [229] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       #> [231] RColorBrewer_1.1-3          rlang_1.1.6                 #> [233] remotes_2.5.0               colorRamps_2.3.4            #> [235] ggnewscale_0.5.2            hardhat_1.4.1               #> [237] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"marker-selection-using-the-marker-and-discard-variables","dir":"Articles","previous_headings":"","what":"Marker selection using the marker and discard variables","title":"Dimensionality Reduction","text":"possible specify markers basis calculation using combination markers variable discard flag dimensionality reduction functions. markers takes vector marker names input included (positive selection) excluded (negative selection). user can choose either discard specified markers setting discard flag TRUE (negative selection) keep specified markers using default setting discard flag (positive selection). marker names correspond specific column expression table can given manually can extracted condor object using cyCONDOR function used_markers. performing marker selection user make sure prefix output name set avoid overwriting previously calculated matrix. option marker selection implemented dimensionality reduction functions demonstrate PCA.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"load-an-example-dataset","dir":"Articles","previous_headings":"","what":"Load an example dataset","title":"Dimensionality Reduction","text":"","code":"condor <- readRDS(\"../.test_files/conodr_example_016.rds\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"principal-component-analysis-pca","dir":"Articles","previous_headings":"","what":"Principal Component Analysis (PCA)","title":"Dimensionality Reduction","text":"calculation Principle Components based prcomp function R Stats package (https://rdocumentation.org/packages/stats/versions/3.6.2). output data frame PCA can accessed condor$pca$orig. demonstration following code shows positive negative selection corresponding discard flag setting.","code":"condor <- runPCA(fcd = condor,                  data_slot = \"orig\",                  seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"pca-positive-selection-specifying-the-markers-to-be-used-as-basis-for-the-calculation","dir":"Articles","previous_headings":"Principal Component Analysis (PCA)","what":"PCA (Positive selection: Specifying the markers to be used as basis for the calculation)","title":"Dimensionality Reduction","text":"output data frame PCA positive marker selection can accessed condor$pca$Tcell_orig.","code":"condor <- runPCA(fcd = condor,                  data_slot = \"orig\",                  seed = 91,                  prefix =  \"Tcell\",                  markers = c(\"CD3\", \"CD4\", \"CD8\"),                  discard = FALSE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"pca-negative-selection-excluding-a-specific-marker-from-the-calculation","dir":"Articles","previous_headings":"Principal Component Analysis (PCA)","what":"PCA (Negative selection: Excluding a specific marker from the calculation)","title":"Dimensionality Reduction","text":"output data frame PCA negative marker selection can accessed condor$pca$scatter_exclusion_orig.","code":"condor <- runPCA(fcd = condor,                  data_slot = \"orig\",                  seed = 91,                  prefix =  \"scatter_exclusion\",                  markers = c(\"FSC-A\", \"SSC-A\"),                  discard = TRUE)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"umap","dir":"Articles","previous_headings":"","what":"UMAP","title":"Dimensionality Reduction","text":"calculation UMAP based umap function uwot package. details see: Melville J (2023). “uwot: Uniform Manifold Approximation Projection (UMAP) Method Dimensionality Reduction” https://github.com/jlmelville/uwot. Besides important metrics can set uwot umap function (e.g. number items define neighborhood around point (nNeighbors) minimum distance embedded points (min_dist)) runUMAP function implemented cyCondor additional parameters can adjusted. Next selection markers output prefix user can specify number PCs used umap calculation (nPC) option save umap model future data projection (ret_model). output data frame UMAP coordinates can accessed condor$umap$pca_orig.","code":"condor <- runUMAP(fcd = condor,                    input_type = \"pca\",                    data_slot = \"orig\",                    seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"tsne","dir":"Articles","previous_headings":"","what":"tSNE","title":"Dimensionality Reduction","text":"tSNE calculation based function Rtsne package Rtsne. implementation cyCondor allows definition perplexity used tSNE calculation. parameter controls many nearest neighbors taken account constructing embedding. user option, similar UMAP function, select number PCs used calculation. details see: Jesse H. Krijthe (2015). “Rtsne: T-Distributed Stochastic Neighbor Embedding using Barnes-Hut Implementation” https://github.com/jkrijthe/Rtsne. output data frame tSNE coordinates can accessed condor$tSNE$pca_orig.","code":"condor <- runtSNE(fcd = condor,                    input_type = \"pca\",                    data_slot = \"orig\",                    seed = 91,                    perplexity = 30)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"diffusion-map","dir":"Articles","previous_headings":"","what":"Diffusion Map","title":"Dimensionality Reduction","text":"calculation DM based function DiffusionMap package destiny. number nearest neighbors considered can specified k. , user well option select number PCs used calculation. deatils see: Philipp Angerer et al. (2015). “destiny: diffusion maps large-scale single-cell data R.” Helmholtz-Zentrum München.http://bioinformatics.oxfordjournals.org/content/32/8/1241. output data frame DM can accessed condor$diffmap$pca_orig.","code":"condor <- runDM(fcd = subset_fcd(condor, 5000),                  input_type = \"pca\",                  data_slot = \"orig\",                  k = 10,                  seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Dimensionality_Reduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Dimensionality Reduction","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               caret_7.0-1                 ## [175] Biobase_2.66.0              mvtnorm_1.3-3               ## [177] lava_1.8.1                  sessioninfo_1.2.3           ## [179] backports_1.5.0             cytolib_2.18.2              ## [181] timechange_0.3.0            gtable_0.3.6                ## [183] rjson_0.2.23                umap_0.2.10.0               ## [185] ggridges_0.5.6              parallel_4.4.2              ## [187] pROC_1.18.5                 limma_3.62.2                ## [189] jsonlite_2.0.0              edgeR_4.4.2                 ## [191] RcppHNSW_0.6.0              ggplot2_3.5.2               ## [193] Rtsne_0.17                  FlowSOM_2.14.0              ## [195] ranger_0.17.0               flowCore_2.18.0             ## [197] jquerylib_0.1.4             timeDate_4041.110           ## [199] shiny_1.11.1                ConsensusClusterPlus_1.70.0 ## [201] htmltools_0.5.8.1           diffcyt_1.26.1              ## [203] glue_1.8.0                  XVector_0.46.0              ## [205] VIM_6.2.2                   gridExtra_2.3               ## [207] boot_1.3-31                 TrajectoryUtils_1.14.0      ## [209] igraph_2.1.4                R6_2.6.1                    ## [211] tidyr_1.3.1                 SingleCellExperiment_1.28.1 ## [213] vcd_1.4-13                  cluster_2.1.8.1             ## [215] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [217] ipred_0.9-15                nloptr_2.2.1                ## [219] DelayedArray_0.32.0         tidyselect_1.2.1            ## [221] vipor_0.4.7                 htmlTable_2.4.3             ## [223] ggforce_0.5.0               CytoDx_1.26.0               ## [225] car_3.1-3                   future_1.58.0               ## [227] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [229] data.table_1.17.8           htmlwidgets_1.6.4           ## [231] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [233] rlang_1.1.6                 remotes_2.5.0               ## [235] colorRamps_2.3.4            ggnewscale_0.5.2            ## [237] hardhat_1.4.1               beeswarm_0.4.0              ## [239] prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"run-cycondor-with-docker-desktop-pcmac","dir":"Articles","previous_headings":"","what":"Run cyCONDOR with Docker Desktop (PC/Mac)","title":"How to run cyCONDOR as container","text":"Install Docker another tool deploy Docker containers (e.g., Singularity). Note: depending operating system follow instructions https://www.docker.com/, Windows also Windows Subsystem Linux needs installed: Set Windows Subsystem Linux 2 (WSL2) available Linux distributions: Install WSL2 first following instructions reported : https://learn.microsoft.com/en-us/windows/wsl/install Install Ubuntu another Linux distribution reported : https://ubuntu.com/tutorials/install-ubuntu--wsl2--windows-10#1-overview Download install latest version Docker Desktop. starting software, verify installation Docker Desktop. Open Ubuntu terminal. Run: Note: Docker installed running correctly output basic information system, output produced installation successful. Since cause malfunction extremely diverse, advisable consult troubleshooting section Docker desktop website (https://docs.docker.com/desktop/troubleshoot/overview/). can now start Docker container cyCONDOR analysis. First download latest version Docker image Now start container following command (everything [] need edited user). can now access RStudio session browser address: Enter now selected [USER] [PW] access Rstudio. locate data click ... symbol Files tab (see picture ) type /data finally press enter.  Exemplary Files windows Rstudio server","code":"docker info docker pull lorenzobonaguro/cycondor:v030 docker run -dp [YOUR PORT]:8787 ∖         # define the port to use -e USER=[USER] -e PASSWORD=[PW] ∖         # username and password, can be defined by the user --name cycondor_analysis ∖                # name of the container -v [LOCAL DIRECTORY PATH]:/data/ ∖        # directory to mount lorenzobonaguro/cycondor:030              #name of the docker image http://localhost:[YOUR PORT]"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"run-cycondor-with-docker-on-a-remote-server","dir":"Articles","previous_headings":"","what":"Run cyCONDOR with Docker on a remote server","title":"How to run cyCONDOR as container","text":"Please follow guideline institution/organization access remote servers manage Docker containers. give general introduction ssh remote server. First log remote server typing terminal: Mac OS Terminal Windows PowerShell can use natively ssh protocol. can now start cyCONDOR Docker container previously RServer session now available following address: Note: vignette intended exhaustive tutorial use Docker, encourage reader explore Docker functionalists https://www.docker.com.","code":"ssh [ServerAddress] -l [username] docker run -dp [YOUR PORT]:8787 ∖         # define the port to use -e USER=[USER] -e PASSWORD=[PW] ∖         # username and password --name cycondor_analysis ∖                # name of the container -v [LOCAL DIRECTORY PATH]:/data/ ∖        # directory to mount lorenzobonaguro/cycondor:030              #name of the docker image http://[ServerAddress]:[YOURPORT]/"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"stop-restart-and-delete-a-docker-container","dir":"Articles","previous_headings":"","what":"Stop, restart and delete a Docker container","title":"How to run cyCONDOR as container","text":"done work, either local machine remote server can stop Docker container. Stopped container can started quickly without loss temporary data permanently removed. stop Docker container first need identify CONTAINER ID session, can done typing terminal command generate list running containers, need copy CONTAINER ID one matching --name (e.g. cycondor_analysis) container can now stopped now restart container simply run alternatively permanently remove container Note: Keep mind operation remove container, Docker image still available system. want remove also docker image type docker image rm [IMAGE NAME].","code":"docker container ls docker container stop [CONTAINER ID] docker contaienr start [CONTAINER ID] docker container rm [CONTAINER ID]"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"run-cycondor-with-singularity-on-a-remote-server","dir":"Articles","previous_headings":"","what":"Run cyCONDOR with Singularity on a remote server","title":"How to run cyCONDOR as container","text":"Running cyCONDOR Docker container Singularity runtime possible, first need download cyCONDOR Docker image convert .sif file: command save Docker image current working directory. can now generate script start singularity container directory named example start_singularity.sh. Also everything [] need edited user. start container need now execute sh script Similarly Docker containers RStudio session available address:","code":"singularity pull docker://lorenzobonaguro/cycondor:v030 #!/bin/bash  #create temporary file variable export WORKSPACE=[folder path to store tmp files]  #create temporary folders [ -d $WORKSPACE ] || mkdir -p $WORKSPACE cd $WORKSPACE mkdir run tmp-rstudio-server var-lib-rstudio-server  #create a database config file printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf  #create a secure cookie key file cd tmp-rstudio-server uuidgen > secure-cookie-key  #prepare to load the container  PASSWORD='[UserSelectedPassword]' singularity exec \\ --bind $WORKSPACE/run:/run,\\ $WORKSPACE/var-lib-rstudio-server:/var/lib/rstudio-server,\\ $WORKSPACE/tmp-rstudio-server:/tmp/rstudio-server,\\ $WORKSPACE/database.conf:/etc/rstudio/database.conf,\\ [LOCAL DIRECTORY PATH]:/data/ \\ [PathToCyCONDORSifFile] rserver \\ --www-address=$(hostname -i) --www-port=[YourPort] \\ --auth-none=0 --auth-pam-helper-path=pam-helper --server-data-dir=/var/run/rstudio-server --server-user=[YourUsername] & sh ./start_singularity.sh http://[ServerAddress]:[YOURPORT]/"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"stop-a-singularity-container","dir":"Articles","previous_headings":"","what":"Stop a Singularity container","title":"How to run cyCONDOR as container","text":"stop Singularity container first need identify [PID] associated Rserver session. can easily typing terminal can now stop container typing","code":"top -u [YourUsername] kill [PID]"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/How_to_run_cyCONDOR_as_container.html","id":"run-cycondor-on-a-hpc-cluster-as-slurm-job","dir":"Articles","previous_headings":"","what":"Run cyCONDOR on a HPC cluster as SLURM Job","title":"How to run cyCONDOR as container","text":"really big dataset possible run Singularity containers SLURM jobs HPC computer clusters. set environment follow detailed guide Rocker project: https://rocker-project.org/use/singularity.html. Note: Mare sure institution allows interactive session via SLURM, keep mind approach reserving entire node work might interfere users.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"read-the--wsp-file","dir":"Articles","previous_headings":"","what":"Read the .wsp file","title":"Load a FlowJo workspace","text":"First use CytoML package load .wsp file.","code":"ws <- CytoML::open_flowjo_xml(\"../.test_files/flowjo_workspace.wsp\")  ws ## File location:  ../.test_files/flowjo_workspace.wsp  ##  ## Groups in Workspace ##          Name Num.Samples ## 1 All Samples           3 ## 2     samples           3"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"transformation-into-gatingset-object","dir":"Articles","previous_headings":"","what":"Transformation into GatingSet object","title":"Load a FlowJo workspace","text":"transform object GatingSet object.","code":"gs <- CytoML::flowjo_to_gatingset(ws, name = \"samples\", path = \"../.test_files/fcs_flowjo_ws/\")  gs ## A GatingSet with 3 samples"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"visualization-of-the-flowjo-gating-strategy","dir":"Articles","previous_headings":"Transformation into GatingSet object","what":"Visualization of the FlowJo gating strategy","title":"Load a FlowJo workspace","text":"visualize gating hierarchy look cell count per gated population.","code":"flowWorkspace::plot(gs, bool = TRUE) flowWorkspace::gs_pop_get_stats(gs) ##                            sample ##                            <char> ##  1: Experiment_AID_01.fcs_1760146 ##  2: Experiment_AID_01.fcs_1760146 ##  3: Experiment_AID_01.fcs_1760146 ##  4: Experiment_AID_01.fcs_1760146 ##  5: Experiment_AID_01.fcs_1760146 ##  6: Experiment_AID_01.fcs_1760146 ##  7: Experiment_AID_01.fcs_1760146 ##  8: Experiment_AID_01.fcs_1760146 ##  9: Experiment_AID_01.fcs_1760146 ## 10: Experiment_AID_02.fcs_3828740 ## 11: Experiment_AID_02.fcs_3828740 ## 12: Experiment_AID_02.fcs_3828740 ## 13: Experiment_AID_02.fcs_3828740 ## 14: Experiment_AID_02.fcs_3828740 ## 15: Experiment_AID_02.fcs_3828740 ## 16: Experiment_AID_02.fcs_3828740 ## 17: Experiment_AID_02.fcs_3828740 ## 18: Experiment_AID_02.fcs_3828740 ## 19: Experiment_AID_03.fcs_4122432 ## 20: Experiment_AID_03.fcs_4122432 ## 21: Experiment_AID_03.fcs_4122432 ## 22: Experiment_AID_03.fcs_4122432 ## 23: Experiment_AID_03.fcs_4122432 ## 24: Experiment_AID_03.fcs_4122432 ## 25: Experiment_AID_03.fcs_4122432 ## 26: Experiment_AID_03.fcs_4122432 ## 27: Experiment_AID_03.fcs_4122432 ##                            sample ##                                                              pop   count ##                                                           <char>   <num> ##  1:                                                         root 1760146 ##  2:                                                 /Lymphocytes  259769 ##  3:                                    /Lymphocytes/Single Cells  259132 ##  4:                       /Lymphocytes/Single Cells/Single Cells  256701 ##  5:                 /Lymphocytes/Single Cells/Single Cells/CD45+  243416 ##  6:            /Lymphocytes/Single Cells/Single Cells/CD45+/CD3+   98595 ##  7:           /Lymphocytes/Single Cells/Single Cells/CD45+/CD19+    6109 ##  8:          /Lymphocytes/Single Cells/Single Cells/CD45+/others  138248 ##  9: /Lymphocytes/Single Cells/Single Cells/CD45+/others/NK cells   15653 ## 10:                                                         root 3828740 ## 11:                                                 /Lymphocytes  502723 ## 12:                                    /Lymphocytes/Single Cells  501266 ## 13:                       /Lymphocytes/Single Cells/Single Cells  500119 ## 14:                 /Lymphocytes/Single Cells/Single Cells/CD45+  478517 ## 15:            /Lymphocytes/Single Cells/Single Cells/CD45+/CD3+  129406 ## 16:           /Lymphocytes/Single Cells/Single Cells/CD45+/CD19+   15063 ## 17:          /Lymphocytes/Single Cells/Single Cells/CD45+/others  333430 ## 18: /Lymphocytes/Single Cells/Single Cells/CD45+/others/NK cells   14716 ## 19:                                                         root 4122432 ## 20:                                                 /Lymphocytes 1453126 ## 21:                                    /Lymphocytes/Single Cells 1450633 ## 22:                       /Lymphocytes/Single Cells/Single Cells 1440203 ## 23:                 /Lymphocytes/Single Cells/Single Cells/CD45+ 1391893 ## 24:            /Lymphocytes/Single Cells/Single Cells/CD45+/CD3+   92151 ## 25:           /Lymphocytes/Single Cells/Single Cells/CD45+/CD19+   12424 ## 26:          /Lymphocytes/Single Cells/Single Cells/CD45+/others 1286628 ## 27: /Lymphocytes/Single Cells/Single Cells/CD45+/others/NK cells   22297 ##                                                              pop   count"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"prepare-the-data-for-cycondor","dir":"Articles","previous_headings":"","what":"Prepare the data for cyCONDOR","title":"Load a FlowJo workspace","text":"GatingSet object prepare fcd object using prep_fjw(). , provide GatingSet object input, reverse FlowJo tranformation, perform autologicle transformation remove parameter “Time”. Optionally, can read annotation table add sample information (shown). performed FlowJo gating assigned cell populations saved condor$anno$cell_anno.","code":"condor <- prep_fjw(data_gs = gs,                     inverse.transform = TRUE,                    transformation = \"auto_logi\",                    remove_param = c(\"Time\")                    ) ## [1] \"FSC-A w= 0 t= 262143\" ## [1] \"FSC-H w= 0 t= 166547\" ## [1] \"FSC-W w= 0 t= 262143\" ## [1] \"SSC-A w= 0.892977713264162 t= 262143\" ## [1] \"SSC-H w= 0 t= 257403\" ## [1] \"SSC-W w= 0 t= 262143\" ## [1] \"CD45 w= 0.400130442523775 t= 261330.171875\" ## [1] \"CD4 w= 0.583624943577614 t= 262054.046875\" ## [1] \"CD16 w= 0.583304445730326 t= 262063.21875\" ## [1] \"HLA-DR w= 0.526407100734133 t= 256403.078125\" ## [1] \"CD66b w= 0.269925173514296 t= 262130.15625\" ## [1] \"CD14 w= 0.520686238954203 t= 269475.84375\" ## [1] \"CD56 w= 0.309385967148849 t= 266870.46875\" ## [1] \"CD3 w= 0.777696607391664 t= 250297.484375\" ## [1] \"CD11c w= 0.537743667858708 t= 203113.46875\" ## [1] \"Siglec8 w= 0.323207654372646 t= 255847.03125\" ## [1] \"CD8 w= 0.654399836071111 t= 254885.03125\" ## [1] \"CD19 w= 0.343330229474141 t= 255034.515625\" class(condor) ## [1] \"flow_cytometry_dataframe\" condor$anno$cell_anno[110:115,] ##                                 expfcs_filename root Lymphocytes ## Experiment_AID_01.fcs_110 Experiment_AID_01.fcs    1           0 ## Experiment_AID_01.fcs_111 Experiment_AID_01.fcs    1           0 ## Experiment_AID_01.fcs_112 Experiment_AID_01.fcs    1           0 ## Experiment_AID_01.fcs_113 Experiment_AID_01.fcs    1           1 ## Experiment_AID_01.fcs_114 Experiment_AID_01.fcs    1           0 ## Experiment_AID_01.fcs_115 Experiment_AID_01.fcs    1           1 ##                           Lymphocytes/Single Cells Single Cells/Single Cells ## Experiment_AID_01.fcs_110                        0                         0 ## Experiment_AID_01.fcs_111                        0                         0 ## Experiment_AID_01.fcs_112                        0                         0 ## Experiment_AID_01.fcs_113                        1                         1 ## Experiment_AID_01.fcs_114                        0                         0 ## Experiment_AID_01.fcs_115                        1                         1 ##                           CD45+ CD3+ CD19+ others NK cells ## Experiment_AID_01.fcs_110     0    0     0      0        0 ## Experiment_AID_01.fcs_111     0    0     0      0        0 ## Experiment_AID_01.fcs_112     0    0     0      0        0 ## Experiment_AID_01.fcs_113     1    1     0      0        0 ## Experiment_AID_01.fcs_114     0    0     0      0        0 ## Experiment_AID_01.fcs_115     1    0     0      1        0"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"filter-for-a-population","dir":"Articles","previous_headings":"","what":"Filter for a population","title":"Load a FlowJo workspace","text":"can filter data set population interest e.g. CD45+ cells.","code":"#select cell IDs of all CD45+ cells keep <- condor$anno$cell_anno[condor$anno$cell_anno$`CD45+` == 1,] %>% rownames()  #check the number of CD45+ cells length(keep) ## [1] 2113826 #filter data for CD45+ cells condor_CD45 <- filter_fcd(condor, cell_ids = keep)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"simple-visualization-of-the-dataset-with-flowjo-gating","dir":"Articles","previous_headings":"Filter for a population","what":"Simple visualization of the dataset with FlowJo gating","title":"Load a FlowJo workspace","text":"can visualize gated cell populations example simple dot plot. plot , plot fluorescence intensity CD3 CD19 color cells ‘CD3+’ population FlowJo workspace.  can now continue usual cyCONDOR workflow (see e.g. vignette(\"Dimensionality_Reduction\"), vignette(\"Clustering_and_cell_annotation\") vignette(\"Data_Visualization\").","code":"# subset condor to 10000 cells for visualization condor_sub <- subset_fcd(condor_CD45, size= 10000)  #prepare data frame for plotting tmp <- cbind(condor_sub$expr$orig, condor_sub$anno$cell_anno)  ggplot(tmp, aes(x= `CD19`, y = `CD3`, color = as.factor(`CD3+`))) +   geom_point() +    theme_bw() +    theme(aspect.ratio = 1) +    scale_color_viridis_d()"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Load_a_FlowJo_workspace.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Load a FlowJo workspace","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] dplyr_1.1.4          ggplot2_3.5.2        Biobase_2.66.0       ## [4] BiocGenerics_0.52.0  CytoML_2.18.3        flowWorkspace_4.18.1 ## [7] cyCONDOR_0.3.1       ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] withr_3.0.2                 ggrastr_1.0.2               ##  [23] xfun_0.52                   ggpubr_0.6.1                ##  [25] ellipsis_0.3.2              survival_3.8-3              ##  [27] memoise_2.0.1               hexbin_1.28.5               ##  [29] ggbeeswarm_0.7.2            RProtoBufLib_2.18.0         ##  [31] princurve_2.1.6             profvis_0.4.0               ##  [33] ggsci_3.2.0                 systemfonts_1.2.3           ##  [35] ragg_1.4.0                  zoo_1.8-14                  ##  [37] GlobalOptions_0.1.2         DEoptimR_1.1-3-1            ##  [39] Formula_1.2-5               promises_1.3.3              ##  [41] scatterplot3d_0.3-44        httr_1.4.7                  ##  [43] rstatix_0.7.2               globals_0.18.0              ##  [45] rstudioapi_0.17.1           UCSC.utils_1.2.0            ##  [47] miniUI_0.1.2                generics_0.1.4              ##  [49] ggcyto_1.34.0               base64enc_0.1-3             ##  [51] curl_6.4.0                  S4Vectors_0.44.0            ##  [53] zlibbioc_1.52.0             polyclip_1.10-7             ##  [55] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [57] SparseArray_1.6.2           RBGL_1.82.0                 ##  [59] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [61] xtable_1.8-4                stringr_1.5.1               ##  [63] desc_1.4.3                  doParallel_1.0.17           ##  [65] evaluate_1.0.4              S4Arrays_1.6.0              ##  [67] hms_1.1.3                   glmnet_4.1-9                ##  [69] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [71] colorspace_2.1-1            harmony_1.2.3               ##  [73] reticulate_1.42.0           readxl_1.4.5                ##  [75] magrittr_2.0.3              lmtest_0.9-40               ##  [77] readr_2.1.5                 Rgraphviz_2.50.0            ##  [79] later_1.4.2                 lattice_0.22-7              ##  [81] future.apply_1.20.0         robustbase_0.99-4-1         ##  [83] XML_3.99-0.18               cowplot_1.2.0               ##  [85] matrixStats_1.5.0           xts_0.14.1                  ##  [87] class_7.3-23                Hmisc_5.2-3                 ##  [89] pillar_1.11.0               nlme_3.1-168                ##  [91] iterators_1.0.14            compiler_4.4.2              ##  [93] RSpectra_0.16-2             stringi_1.8.7               ##  [95] gower_1.0.2                 minqa_1.2.8                 ##  [97] SummarizedExperiment_1.36.0 lubridate_1.9.4             ##  [99] devtools_2.4.5              plyr_1.8.9                  ## [101] crayon_1.5.3                abind_1.4-8                 ## [103] locfit_1.5-9.12             sp_2.2-0                    ## [105] sandwich_3.1-1              pcaMethods_1.98.0           ## [107] codetools_0.2-20            multcomp_1.4-28             ## [109] textshaping_1.0.1           recipes_1.3.1               ## [111] openssl_2.3.3               Rphenograph_0.99.1          ## [113] TTR_0.24.4                  bslib_0.9.0                 ## [115] e1071_1.7-16                destiny_3.20.0              ## [117] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [119] mime_0.13                   splines_4.4.2               ## [121] circlize_0.4.16             Rcpp_1.1.0                  ## [123] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [125] knitr_1.50                  clue_0.3-66                 ## [127] lme4_1.1-37                 fs_1.6.6                    ## [129] listenv_0.9.1               checkmate_2.3.2             ## [131] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [133] pkgbuild_1.4.8              ggsignif_0.6.4              ## [135] tibble_3.3.0                Matrix_1.7-3                ## [137] rpart.plot_3.1.2            statmod_1.5.0               ## [139] tzdb_0.5.0                  tweenr_2.0.3                ## [141] pkgconfig_2.0.3             pheatmap_1.0.13             ## [143] tools_4.4.2                 cachem_1.1.0                ## [145] rbibutils_2.3               viridisLite_0.4.2           ## [147] smoother_1.3                fastmap_1.2.0               ## [149] rmarkdown_2.29              scales_1.4.0                ## [151] grid_4.4.2                  usethis_3.1.0               ## [153] broom_1.0.8                 sass_0.4.10                 ## [155] graph_1.84.1                carData_3.0-5               ## [157] RANN_2.6.2                  rpart_4.1.24                ## [159] farver_2.1.2                reformulas_0.4.1            ## [161] yaml_2.3.10                 MatrixGenerics_1.18.1       ## [163] foreign_0.8-90              ggthemes_5.1.0              ## [165] cli_3.6.5                   purrr_1.1.0                 ## [167] stats4_4.4.2                lifecycle_1.0.4             ## [169] uwot_0.2.3                  askpass_1.2.1               ## [171] caret_7.0-1                 mvtnorm_1.3-3               ## [173] lava_1.8.1                  sessioninfo_1.2.3           ## [175] backports_1.5.0             cytolib_2.18.2              ## [177] timechange_0.3.0            gtable_0.3.6                ## [179] rjson_0.2.23                umap_0.2.10.0               ## [181] ggridges_0.5.6              parallel_4.4.2              ## [183] pROC_1.18.5                 limma_3.62.2                ## [185] jsonlite_2.0.0              edgeR_4.4.2                 ## [187] RcppHNSW_0.6.0              Rtsne_0.17                  ## [189] FlowSOM_2.14.0              ranger_0.17.0               ## [191] flowCore_2.18.0             jquerylib_0.1.4             ## [193] timeDate_4041.110           shiny_1.11.1                ## [195] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [197] diffcyt_1.26.1              glue_1.8.0                  ## [199] XVector_0.46.0              VIM_6.2.2                   ## [201] gridExtra_2.3               boot_1.3-31                 ## [203] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [205] R6_2.6.1                    tidyr_1.3.1                 ## [207] SingleCellExperiment_1.28.1 labeling_0.4.3              ## [209] vcd_1.4-13                  cluster_2.1.8.1             ## [211] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [213] ipred_0.9-15                nloptr_2.2.1                ## [215] DelayedArray_0.32.0         tidyselect_1.2.1            ## [217] vipor_0.4.7                 htmlTable_2.4.3             ## [219] ggforce_0.5.0               CytoDx_1.26.0               ## [221] car_3.1-3                   future_1.58.0               ## [223] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [225] data.table_1.17.8           htmlwidgets_1.6.4           ## [227] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [229] rlang_1.1.6                 remotes_2.5.0               ## [231] colorRamps_2.3.4            ggnewscale_0.5.2            ## [233] hardhat_1.4.1               beeswarm_0.4.0              ## [235] prodlim_2025.04.28"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"load-the-data","dir":"Articles","previous_headings":"Train the cytoDX model","what":"Load the data","title":"Machine learning classifier","text":"start importing training dataset, done previously described prep_fcd function, case anno_table also include clinical classification samples (aml normal).","code":"condor <- prep_fcd(data_path = \"../.test_files/ClinicalClassifier/train/\",                     max_cell = 10000000,                     useCSV = FALSE,                     transformation = \"auto_logi\",                     remove_param = c(\"FSC-A\",\"FSC-W\",\"FSC-H\",\"Time\"),                     anno_table = \"../.test_files/ClinicalClassifier/fcs_info_train.csv\",                     filename_col = \"fcsName\",                    seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"build-the-classifier-model","dir":"Articles","previous_headings":"Train the cytoDX model","what":"Build the classifier model","title":"Machine learning classifier","text":"now train cytoDX classifier sample label, step require pre-analysis dataset, nevertheless, familiar data using training recommend exploratory data analysis first. train_classifier_model requires user define input table parameter used training cytoDX model. variables derived cytoDX package (cytoDX.fit function) please refer cytoDX documentation details. fcd: Flow cytometry data set used training model. input_type: data slot used classification, suggested expr. data slot: exact name data slot used (orig norm, batch correction performed). sample_names: name column anno_table containing sample names. classification_variable: name column anno_table containing clinical classification used training classifier. type1: type first level prediction, parameter inherited cytoDX, see cytoDX documentation details. type2: type second level prediction, parameter inherited cytoDX, see cytoDX documentation details. parallelCore: number cores used.","code":"# Re order variables - this is not strictly needed but the classification always consider the first variable as reference.  condor$anno$cell_anno$Label <- factor(condor$anno$cell_anno$Label,                                        levels = c(\"normal\", \"aml\"),                                        labels = c(\"1_normal\", \"2_aml\")) condor <- train_classifier_model(fcd = condor,                                   input_type = \"expr\",                                   data_slot = \"orig\",                                   sample_names = \"expfcs_filename\",                                   classification_variable = condor$anno$cell_anno$Label,                                   family = \"binomial\",                                   type1 = \"response\",                                   parallelCore = 1,                                   reg = FALSE,                                   seed = 91) ## Warning in lognet(x, is.sparse, y, weights, offset, alpha, nobs, nvars, : one ## multinomial or binomial class has fewer than 8 observations; dangerous ground"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"explore-the-result-of-model-training","dir":"Articles","previous_headings":"Train the cytoDX model","what":"Explore the result of model training","title":"Machine learning classifier","text":"can now explore results cell level sample level prediction training data. results stored together cytoDX model extras slot (classifier_model)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"cell-level-predition-result-on-the-training-dataset","dir":"Articles","previous_headings":"Train the cytoDX model > Explore the result of model training","what":"Cell level predition result on the training dataset","title":"Machine learning classifier","text":"cellular level result contain probability classification aml cell dataset, table also include true label cell.","code":"head(condor$extras$classifier_model$train.Data.cell) ##         sample y1.Truth y.Pred.s0 ## 1 sample11.fcs    2_aml 0.5836773 ## 2 sample11.fcs    2_aml 0.5299637 ## 3 sample11.fcs    2_aml 0.6896542 ## 4 sample11.fcs    2_aml 0.4914881 ## 5 sample11.fcs    2_aml 0.5393115 ## 6 sample11.fcs    2_aml 0.3407959"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"sample-level-predition-result-on-the-training-dataset","dir":"Articles","previous_headings":"Train the cytoDX model > Explore the result of model training","what":"Sample level predition result on the training dataset","title":"Machine learning classifier","text":"sample level result contain probability classification aml cell dataset, table also include true label cell.","code":"head(condor$extras$classifier_model$train.Data.sample) ##                    sample y1.Truth    y.Pred.s0 ## sample11.fcs sample11.fcs    2_aml 1.000000e+00 ## sample12.fcs sample12.fcs    2_aml 1.000000e+00 ## sample13.fcs sample13.fcs    2_aml 9.999999e-01 ## sample14.fcs sample14.fcs    2_aml 1.000000e+00 ## sample15.fcs sample15.fcs    2_aml 1.000000e+00 ## sample16.fcs sample16.fcs 1_normal 5.949578e-14"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"visualize-the-results-on-the-train-dataset","dir":"Articles","previous_headings":"Train the cytoDX model > Explore the result of model training","what":"Visualize the results on the train dataset","title":"Machine learning classifier","text":"can now visualize prediction result cell sample level.","code":"anno <- read.csv(\"../.test_files/ClinicalClassifier/fcs_info_train.csv\")  ggplot(merge(x = condor$extras$classifier_model$train.Data.cell, y = anno, by.x = \"sample\", by.y = \"fcsName\"), aes(x = sample, y = y.Pred.s0, color = Label)) +   geom_jitter() +    geom_violin() +   scale_color_manual(values = c(\"#92278F\", \"#F15A29\")) +   theme_bw() +    theme(aspect.ratio = 1) +    ylab(\"probability\") +    ggtitle(\"sample level prediction - train data\") +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) ggplot(merge(x = condor$extras$classifier_model$train.Data.sample, y = anno, by.x = \"sample\", by.y = \"fcsName\"), aes(x = sample, y = y.Pred.s0, color = Label)) +   geom_point(size = 4) +   scale_color_manual(values = c(\"#92278F\", \"#F15A29\")) +   theme_bw() +    theme(aspect.ratio = 2) +    ylab(\"probability\") +   ggtitle(\"sample level prediction - train data\") +    theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"visualization-of-the-decision-tree","dir":"Articles","previous_headings":"Train the cytoDX model > Explore the result of model training","what":"Visualization of the decision tree","title":"Machine learning classifier","text":"can use cytoDX built-function visualize decision tree used cell level classification. See cytoDX documentation details.","code":"tree <- treeGate(P = condor$extras$classifier_model$train.Data.cell$y.Pred.s0,                  x= condor$expr$orig)"},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"load-the-data-1","dir":"Articles","previous_headings":"Testing on an independent dataset","what":"Load the data","title":"Machine learning classifier","text":"now validate performance trained cytoDX model test test dataset overlap training data.","code":"condor_test <- prep_fcd(data_path = \"../.test_files/ClinicalClassifier/test/\",                          max_cell = 10000000,                          useCSV = FALSE,                          transformation = \"auto_logi\",                          remove_param = c(\"FSC-A\",\"FSC-W\",\"FSC-H\",\"Time\"),                          anno_table = \"../.test_files/ClinicalClassifier/fcs_info_test.csv\",                          filename_col = \"fcsName\",                         seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"predict-classification","dir":"Articles","previous_headings":"Testing on an independent dataset","what":"Predict classification","title":"Machine learning classifier","text":"can now predict label using trained model predict_classifier requires user defined input predict labels external dataset using previously prepared cytoDX model. fcd: flow cytometri dataset new data input_type: data slot used classification, suggested expr. match option selection train_classifier_model. data slot: exact name data slot used (orig norm, batch correction performed). match option selection train_classifier_model. sample_names: name column anno_table containing sample names. model_object: cyCONDOR trained cytoDX model, stored condor object used train model (extras slot).","code":"# Re order variables - this is not strictly needed but the classification always consider the first variable as reference.  condor_test$anno$cell_anno$Label <- factor(condor_test$anno$cell_anno$Label,                                             levels = c(\"normal\", \"aml\"),                                             labels = c(\"1_normal\", \"2_aml\")) condor_test <- predict_classifier(fcd = condor_test,                                    input_type = \"expr\",                                    data_slot = \"orig\",                                    sample_names = \"expfcs_filename\",                                    model_object = condor$extras$classifier_model,                                    seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"explore-the-result-of-prediction-in-test-dataset","dir":"Articles","previous_headings":"Testing on an independent dataset","what":"Explore the result of prediction in test dataset","title":"Machine learning classifier","text":"can now explore results cell level sample level prediction test data. results stored together cytoDX model extras slot (classifier_prediction)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"cell-level-predition-result-on-the-test-dataset","dir":"Articles","previous_headings":"Testing on an independent dataset > Explore the result of prediction in test dataset","what":"Cell level predition result on the test dataset","title":"Machine learning classifier","text":"cellular level result contain probability classification aml cell dataset.","code":"head(condor_test$extras$classifier_prediction$xNew.Pred.cell) ##        sample y.Pred.s0 ## 1 sample1.fcs 0.6212374 ## 2 sample1.fcs 0.6780328 ## 3 sample1.fcs 0.5818562 ## 4 sample1.fcs 0.3354043 ## 5 sample1.fcs 0.4015879 ## 6 sample1.fcs 0.7143018"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"cell-level-predition-result-on-the-test-dataset-1","dir":"Articles","previous_headings":"Testing on an independent dataset > Explore the result of prediction in test dataset","what":"Cell level predition result on the test dataset","title":"Machine learning classifier","text":"sample level result contain probability classification aml cell dataset.","code":"head(condor_test$extras$classifier_prediction$xNew.Pred.sample) ##                    sample    y.Pred.s0 ## sample1.fcs   sample1.fcs 1.000000e+00 ## sample10.fcs sample10.fcs 6.021657e-12 ## sample2.fcs   sample2.fcs 1.000000e+00 ## sample3.fcs   sample3.fcs 9.998114e-01 ## sample4.fcs   sample4.fcs 1.000000e+00 ## sample5.fcs   sample5.fcs 1.000000e+00"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"visualize-the-results-on-the-test-dataset","dir":"Articles","previous_headings":"Testing on an independent dataset > Explore the result of prediction in test dataset","what":"Visualize the results on the test dataset","title":"Machine learning classifier","text":"can now visualize prediction result cell sample level.","code":"anno <- read.csv(\"../.test_files/ClinicalClassifier/fcs_info_test.csv\")  tmp <- merge(x = condor_test$extras$classifier_prediction$xNew.Pred.cell, y = anno, by.x = \"sample\", by.y = \"fcsName\")  tmp$sample <- factor(tmp$sample, levels = c(\"sample1.fcs\", \"sample2.fcs\", \"sample3.fcs\",  \"sample4.fcs\",  \"sample5.fcs\",  \"sample6.fcs\",  \"sample7.fcs\",  \"sample8.fcs\",  \"sample9.fcs\", \"sample10.fcs\"))  ggplot(tmp, aes(x = sample, y = y.Pred.s0, color = Label)) +   geom_jitter() +   geom_violin() +   scale_color_manual(values = c(\"#92278F\", \"#F15A29\")) +   theme_bw() +    theme(aspect.ratio = 1) +    ylab(\"probability\") +   ggtitle(\"cell level prediction - test data\") +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) rm(tmp) tmp <- merge(x = condor_test$extras$classifier_prediction$xNew.Pred.sample, y = anno, by.x = \"sample\", by.y = \"fcsName\")  tmp$sample <- factor(tmp$sample, levels = c(\"sample1.fcs\", \"sample2.fcs\", \"sample3.fcs\",  \"sample4.fcs\",  \"sample5.fcs\",  \"sample6.fcs\",  \"sample7.fcs\",  \"sample8.fcs\",  \"sample9.fcs\", \"sample10.fcs\"))  ggplot(tmp, aes(x = sample, y = y.Pred.s0, color = Label)) +   geom_point(size = 4) +   scale_color_manual(values = c(\"#92278F\", \"#F15A29\")) +   theme_bw() +    theme(aspect.ratio = 2) +    ylab(\"probability\") +   ggtitle(\"sample level prediction - test data\") +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) rm(tmp)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Machine_learning_classifier.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Machine learning classifier","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] CytoDx_1.26.0  ggplot2_3.5.2  cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               caret_7.0-1                 ## [175] Biobase_2.66.0              mvtnorm_1.3-3               ## [177] lava_1.8.1                  sessioninfo_1.2.3           ## [179] backports_1.5.0             cytolib_2.18.2              ## [181] timechange_0.3.0            gtable_0.3.6                ## [183] rjson_0.2.23                umap_0.2.10.0               ## [185] ggridges_0.5.6              parallel_4.4.2              ## [187] pROC_1.18.5                 limma_3.62.2                ## [189] jsonlite_2.0.0              edgeR_4.4.2                 ## [191] RcppHNSW_0.6.0              Rtsne_0.17                  ## [193] FlowSOM_2.14.0              ranger_0.17.0               ## [195] flowCore_2.18.0             jquerylib_0.1.4             ## [197] timeDate_4041.110           shiny_1.11.1                ## [199] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [201] diffcyt_1.26.1              glue_1.8.0                  ## [203] XVector_0.46.0              VIM_6.2.2                   ## [205] gridExtra_2.3               boot_1.3-31                 ## [207] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [209] R6_2.6.1                    tidyr_1.3.1                 ## [211] SingleCellExperiment_1.28.1 labeling_0.4.3              ## [213] vcd_1.4-13                  cluster_2.1.8.1             ## [215] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [217] ipred_0.9-15                nloptr_2.2.1                ## [219] DelayedArray_0.32.0         tidyselect_1.2.1            ## [221] vipor_0.4.7                 htmlTable_2.4.3             ## [223] ggforce_0.5.0               car_3.1-3                   ## [225] future_1.58.0               ModelMetrics_1.2.2.2        ## [227] laeken_0.5.3                data.table_1.17.8           ## [229] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       ## [231] RColorBrewer_1.1-3          rlang_1.1.6                 ## [233] remotes_2.5.0               colorRamps_2.3.4            ## [235] ggnewscale_0.5.2            hardhat_1.4.1               ## [237] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"load-an-example-dataset","dir":"Articles","previous_headings":"","what":"Load an example dataset","title":"Introduction to the condor object and other utilities","text":"","code":"condor <- readRDS(\"../.test_files/condor_example_016_misc.rds\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"structure-of-the-condor-object","dir":"Articles","previous_headings":"","what":"Structure of the condor object","title":"Introduction to the condor object and other utilities","text":"Knowing structure one’s data object huge advantage maximize ease using bioinformatic tools analysis. Due ’s straight-line composition, structure condor object easy grasp. follows hierarchical structure 3 levels (data type/method -> data slot -> variable) can separated 5 major sections representing one step data acquiring analysis (expression, cell metadata, dimensionality reduction, clustering extras).   Graphic condor object structure. hierarchical levels depicted columns major sections colored .","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"hierarchical-structure","dir":"Articles","previous_headings":"Structure of the condor object","what":"Hierarchical structure","title":"Introduction to the condor object and other utilities","text":"1st level describes data types methods present object followed 2nd level specifying separate data slots actual data stored data frames (df). 3rd level contains variables (column names) respective df.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"overview-of-the-5-sections-of-a-condor-object","dir":"Articles","previous_headings":"Structure of the condor object","what":"Overview of the 5 sections of a condor object","title":"Introduction to the condor object and other utilities","text":"data types $expr $anno created data loading transformation condor object performed serve basis data analysis.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"expression","dir":"Articles","previous_headings":"Structure of the condor object > Overview of the 5 sections of a condor object","what":"Expression","title":"Introduction to the condor object and other utilities","text":"original, transformed expression values saved $expr data slot $orig, containing cell markers column names (variables) unique cell IDs row names. Batch normalization performed expression values output saved df new data slot ($norm).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"metadata","dir":"Articles","previous_headings":"Structure of the condor object > Overview of the 5 sections of a condor object","what":"Metadata","title":"Introduction to the condor object and other utilities","text":"metadata saved data type anno data slot cell_anno. variables df correspond provided cell annotation can used argument group_var many visualization functions.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"dimensionality-reductions","dir":"Articles","previous_headings":"Structure of the condor object > Overview of the 5 sections of a condor object","what":"Dimensionality reductions","title":"Introduction to the condor object and other utilities","text":"output dimensionalty reduction clustering function saved df specified method (e.g. $pca, $umap, $clustering) data slot (e.g. $orig, $pca_orig, $phenograph_pca_orig_k30). variables dimensionality reductions (e.g. $PC1, $PC2) used cyCondor automatically coordinates visualization embedding method data slot specified (arg: reduction_method reduction_slot).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"clustering","dir":"Articles","previous_headings":"Structure of the condor object > Overview of the 5 sections of a condor object","what":"Clustering","title":"Introduction to the condor object and other utilities","text":"clustering data slot created $clustering method, named combination relevant parameters used calculations (eg. phenograph_pca_orig_k30). available variables (e.g. $Phenograph ) used basis cell labeling, later saved variable (metaclusters).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"extras","dir":"Articles","previous_headings":"Structure of the condor object > Overview of the 5 sections of a condor object","what":"Extras","title":"Introduction to the condor object and other utilities","text":"$extra contains additional data stored (e.g. parameters data loading, lists markers, dimensionality reduction clustering models future data projection).","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"get-measured-markers","dir":"Articles","previous_headings":"Extract or change marker names","what":"Get measured markers","title":"Introduction to the condor object and other utilities","text":"function measured_markers takes condor object fcd input returns number markers included condor object list names. directing output variable possible save list marker names future use.","code":"expr_markers <- measured_markers(fcd = condor) ## [1] \"number of measured markers: 28\" ##  [1] \"FSC-A\"         \"SSC-A\"         \"CD38\"          \"CD8\"           ##  [5] \"CD195 (CCR5)\"  \"CD94 (KLRD1)\"  \"CD45RA\"        \"HLA-DR\"        ##  [9] \"CD56\"          \"CD127 (IL7RA)\" \"CD14\"          \"CD64\"          ## [13] \"CD4\"           \"IgD\"           \"CD19\"          \"CD16\"          ## [17] \"CD32\"          \"CD197 (CCR7)\"  \"CD20\"          \"CD27\"          ## [21] \"CD15\"          \"PD-1\"          \"CD3\"           \"CD57\"          ## [25] \"CD25\"          \"CD123 (IL3RA)\" \"CD13\"          \"CD11c\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"change-parameter-names","dir":"Articles","previous_headings":"Extract or change marker names","what":"Change parameter names","title":"Introduction to the condor object and other utilities","text":"function change_param_name allows quick easy changing single multiple parameter names. needs condor object fcd input vectors old new parameter names (old_names new_names, respectively). first example change name PD-1 marker PD1. also possible modify multiple names time. vector NewNames can either written manually computed using vector manipulations. second example exclude protein names specific markers. important, order old new marker names stay .","code":"condor <- change_param_name(fcd = condor,                              old_names = \"PD-1\",                              new_names = \"PD1\") ## [1] \"Changed parameter 'PD-1' to 'PD1' in orig.\" OldNames <- c(\"CD195 (CCR5)\", \"CD94 (KLRD1)\", \"CD127 (IL7RA)\", \"CD197 (CCR7)\", \"CD123 (IL3RA)\") NewNames <- unlist(strsplit(OldNames, \" \"))[2*(1:length(OldNames))-1]   condor <- change_param_name(fcd = condor,                              old_names = OldNames,                              new_names = NewNames) ## [1] \"Changed parameter 'CD195 (CCR5)' to 'CD195' in orig.\" ## [1] \"Changed parameter 'CD94 (KLRD1)' to 'CD94' in orig.\" ## [1] \"Changed parameter 'CD127 (IL7RA)' to 'CD127' in orig.\" ## [1] \"Changed parameter 'CD197 (CCR7)' to 'CD197' in orig.\" ## [1] \"Changed parameter 'CD123 (IL3RA)' to 'CD123' in orig.\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"get-used-markers","dir":"Articles","previous_headings":"Extract or change marker names","what":"Get used markers","title":"Introduction to the condor object and other utilities","text":"keep track markers used basis dimensionality reduction clustering respective markers saved extra slot condor object. used_markers function can used extract markers. takes input fcd object (e.g. condor), input_type (pca, umap, tSNE, diffmap, phenograph FlowSOM), data_slot (orig norm), prefix (specified , see dimensionality reduction clustering) returns, similar measured_markers function, number names markers used specific analysis step. show example markers used PCA calculation exclusion scatter markers FSC-SSC-. prefix used PCA calculation defines scatter_exclusion.","code":"pca_orig_markers <- used_markers(fcd = condor,                                   input_type = \"pca\",                                   data_slot = \"orig\",                                  prefix = NULL) ## [1] \"number of used markers in pca_orig : 28\" ##  [1] \"FSC-A\"  \"SSC-A\"  \"CD38\"   \"CD8\"    \"CD195\"  \"CD94\"   \"CD45RA\" \"HLA-DR\" ##  [9] \"CD56\"   \"CD127\"  \"CD14\"   \"CD64\"   \"CD4\"    \"IgD\"    \"CD19\"   \"CD16\"   ## [17] \"CD32\"   \"CD197\"  \"CD20\"   \"CD27\"   \"CD15\"   \"PD1\"    \"CD3\"    \"CD57\"   ## [25] \"CD25\"   \"CD123\"  \"CD13\"   \"CD11c\" pca_scatter_exclusion_orig_markers <- used_markers(fcd = condor,                                   input_type = \"pca\",                                   data_slot = \"orig\",                                  prefix = \"scatter_exclusion\") ## [1] \"number of used markers in pca_scatter_exclusion_orig : 26\" ##  [1] \"CD38\"   \"CD8\"    \"CD195\"  \"CD94\"   \"CD45RA\" \"HLA-DR\" \"CD56\"   \"CD127\"  ##  [9] \"CD14\"   \"CD64\"   \"CD4\"    \"IgD\"    \"CD19\"   \"CD16\"   \"CD32\"   \"CD197\"  ## [17] \"CD20\"   \"CD27\"   \"CD15\"   \"PD1\"    \"CD3\"    \"CD57\"   \"CD25\"   \"CD123\"  ## [25] \"CD13\"   \"CD11c\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"check-the-integrity-of-the-condor-object","dir":"Articles","previous_headings":"","what":"Check the integrity of the condor object","title":"Introduction to the condor object and other utilities","text":"check_IDs function can useful make sure condor object right structure downstream analysis. checks cell IDs level compares fcd$expr$orig data frame. discrepancy appears point, warning returned.","code":"check_IDs(condor) ## [1] \"Everything looks fine\""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"merge-two-condor-objects","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Merge two condor objects","title":"Introduction to the condor object and other utilities","text":"merge_condor function combines two condor objects comprised parameters (markers). function merge expression table annotation downstream analysis need repeated. cell IDs doubled two objects merging can facilitated.","code":"condor_merged <- merge_condor(data1 = condor,                                data2 = condor)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"subset-a-condor-object","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Subset a condor object","title":"Introduction to the condor object and other utilities","text":"subset_fcd function subsets condor object specific number randomly selected cells specified size parameter. seed can set reproducibility.","code":"condor_subset <- subset_fcd(fcd = condor,                              size = 5000,                             seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"subset-a-condor-object-equally-for-a-variable","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Subset a condor object equally for a variable","title":"Introduction to the condor object and other utilities","text":"subset_fcd_byparam function subsets condor object specific number randomly selected cells specified size parameter specified param. seed can set reproducibility.","code":"condor_subset_sample <- subset_fcd_byparam(fcd = condor,                                             param = \"sample_ID\",                                             size = 500,                                             seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"filter-a-condor-object-to-create-a-specific-subset","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Filter a condor object to create a specific subset","title":"Introduction to the condor object and other utilities","text":"filter_fcd function can useful created specific subset condor object. takes row names cells filtered cell_ids input.","code":"condor_filter <- filter_fcd(fcd = condor,                              cell_ids = rownames(condor$expr$orig)[condor$clustering$phenograph_pca_orig_k_60$metaclusters == \"Classical Monocytes\"])"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"subsample-the-condor-object-with-geometric-sketching","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Subsample the condor object with Geometric Sketching","title":"Introduction to the condor object and other utilities","text":"subsample_geosketch function can useful want speed calculations large datasets, without loosing information. subsamples way, preserves topology PCA condor object, therefore reducing number data points, without skewing cell densities. can provide number cells want subset fraction cells want subset .","code":"condor_sub <- subsample_geosketch(condor,pca_slot = \"orig\",n_sub=10000)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"compare-cycondor-frequencies-with-flowjo-results","dir":"Articles","previous_headings":"Merge or subset the condor object","what":"Compare cyCONDOR frequencies with FlowJo results","title":"Introduction to the condor object and other utilities","text":"provide easy use function calculate correlation cyCONDOR results cell frequency obtained analysis tools FlowJo. two dataframe look like , impartant every colum name starting Condor_ condor dataframe FlowJo FlowJo dataframe.","code":"df_condor ##    sample_ID Condor_B_class_switched Condor_CD4_CM Condor_CD8_CM ## 1   Sample_1                 0.17143       0.34286       0.33571 ## 2   Sample_2                 0.13125       0.29375       0.33125 ## 3   Sample_3                 0.11333       0.26667       0.36667 ## 4   Sample_4                 0.16250       0.38750       0.36250 ## 5   Sample_5                 0.31429       0.41429       0.37143 ## 6   Sample_6                 0.20000       0.30000       0.40000 ## 7   Sample_7                 0.28182       0.29091       0.39091 ## 8   Sample_8                 0.21111       0.42222       0.63333 ## 9   Sample_9                 0.20000       0.30000       0.40000 ## 10 Sample_10                 0.25126       0.33445       0.41765 ##    Condor_CD69_pos Condor_Naive_CD4 Condor_Naive_CD8 Condor_Treg Condor_DCs ## 1          0.50714          0.51429          0.21429     0.22143    0.52857 ## 2          0.52500          0.36250          0.26250     0.26250    0.53125 ## 3          0.46667          0.36667          0.26667     0.33333    0.56667 ## 4          0.52500          0.55000          0.45000     0.26250    0.62500 ## 5          0.47143          0.37143          0.23571     0.23571    0.53571 ## 6          0.50000          0.40000          0.30000     0.30000    0.60000 ## 7          0.49091          0.39091          0.24545     0.24545    0.54545 ## 8          0.51111          0.41111          0.31111     0.25556    0.55556 ## 9          0.50000          0.40000          0.30000     0.30000    0.60000 ## 10         0.50084          0.38403          0.26723     0.25042    0.53361 ##    Condor_NK_CD56dim Condor_Unconventional_T ## 1            0.94286                 0.43571 ## 2            0.96250                 0.83750 ## 3            0.96667                 0.85333 ## 4            0.96250                 0.46250 ## 5            0.91786                 0.70357 ## 6            1.00000                 0.50000 ## 7            0.91818                 0.49091 ## 8            0.92778                 0.45556 ## 9            1.00000                 0.50000 ## 10           0.91681                 0.74370 corr_plot_comparison(condor_df = df_condor,                       flowjo_df = df_flowjo,                       sample_col = \"sample_ID\",                      method_corr = \"pearson\",                       tl.cex = 1,                       cl.cex = 1) ## $corr ##                         FlowJo_B_class_switched FlowJo_CD4_CM FlowJo_CD8_CM ## Condor_B_class_switched               1.0000000     0.4070931    0.20753866 ## Condor_CD4_CM                         0.4070931     1.0000000    0.49201297 ## Condor_CD8_CM                         0.2075387     0.4920130    1.00000000 ## Condor_CD69_pos                      -0.3384866     0.1769890    0.09909120 ## Condor_Naive_CD4                     -0.2350425     0.3656488   -0.12471427 ## Condor_Naive_CD8                     -0.2796814     0.2877308    0.15865182 ## Condor_Treg                          -0.5213509    -0.5740163   -0.02528452 ## Condor_DCs                           -0.2808977    -0.0330043    0.02388441 ## Condor_NK_CD56dim                    -0.5875325    -0.4779746   -0.24093469 ## Condor_Unconventional_T              -0.2050349    -0.3406658   -0.32539938 ##                         FlowJo_CD69_pos FlowJo_Naive_CD4 FlowJo_Naive_CD8 ## Condor_B_class_switched      -0.3384866      -0.23504254       -0.2796814 ## Condor_CD4_CM                 0.1769890       0.36564884        0.2877308 ## Condor_CD8_CM                 0.0990912      -0.12471427        0.1586518 ## Condor_CD69_pos               1.0000000       0.51192706        0.4966880 ## Condor_Naive_CD4              0.5119271       1.00000000        0.5404134 ## Condor_Naive_CD8              0.4966880       0.54041336        1.0000000 ## Condor_Treg                  -0.3012741      -0.33638501        0.2355740 ## Condor_DCs                    0.2004797       0.39475280        0.8251330 ## Condor_NK_CD56dim             0.1691775       0.06996937        0.3351444 ## Condor_Unconventional_T      -0.3603367      -0.64692399       -0.3172894 ##                         FlowJo_Treg  FlowJo_DCs FlowJo_NK_CD56dim ## Condor_B_class_switched -0.52135090 -0.28089773       -0.58753250 ## Condor_CD4_CM           -0.57401632 -0.03300430       -0.47797463 ## Condor_CD8_CM           -0.02528452  0.02388441       -0.24093469 ## Condor_CD69_pos         -0.30127413  0.20047968        0.16917749 ## Condor_Naive_CD4        -0.33638501  0.39475280        0.06996937 ## Condor_Naive_CD8         0.23557398  0.82513302        0.33514439 ## Condor_Treg              1.00000000  0.55599240        0.72054124 ## Condor_DCs               0.55599240  1.00000000        0.69887312 ## Condor_NK_CD56dim        0.72054124  0.69887312        1.00000000 ## Condor_Unconventional_T  0.30378759 -0.40364451       -0.09851331 ##                         FlowJo_Unconventional_T ## Condor_B_class_switched             -0.20503488 ## Condor_CD4_CM                       -0.34066582 ## Condor_CD8_CM                       -0.32539938 ## Condor_CD69_pos                     -0.36033672 ## Condor_Naive_CD4                    -0.64692399 ## Condor_Naive_CD8                    -0.31728937 ## Condor_Treg                          0.30378759 ## Condor_DCs                          -0.40364451 ## Condor_NK_CD56dim                   -0.09851331 ## Condor_Unconventional_T              1.00000000 ##  ## $corrPos ##                      xName                   yName  x  y        corr ## 1  FlowJo_B_class_switched Condor_B_class_switched  1 10  1.00000000 ## 2  FlowJo_B_class_switched           Condor_CD4_CM  1  9  0.40709305 ## 3  FlowJo_B_class_switched           Condor_CD8_CM  1  8  0.20753866 ## 4  FlowJo_B_class_switched         Condor_CD69_pos  1  7 -0.33848664 ## 5  FlowJo_B_class_switched        Condor_Naive_CD4  1  6 -0.23504254 ## 6  FlowJo_B_class_switched        Condor_Naive_CD8  1  5 -0.27968142 ## 7  FlowJo_B_class_switched             Condor_Treg  1  4 -0.52135090 ## 8  FlowJo_B_class_switched              Condor_DCs  1  3 -0.28089773 ## 9  FlowJo_B_class_switched       Condor_NK_CD56dim  1  2 -0.58753250 ## 10 FlowJo_B_class_switched Condor_Unconventional_T  1  1 -0.20503488 ## 11           FlowJo_CD4_CM           Condor_CD4_CM  2  9  1.00000000 ## 12           FlowJo_CD4_CM           Condor_CD8_CM  2  8  0.49201297 ## 13           FlowJo_CD4_CM         Condor_CD69_pos  2  7  0.17698902 ## 14           FlowJo_CD4_CM        Condor_Naive_CD4  2  6  0.36564884 ## 15           FlowJo_CD4_CM        Condor_Naive_CD8  2  5  0.28773080 ## 16           FlowJo_CD4_CM             Condor_Treg  2  4 -0.57401632 ## 17           FlowJo_CD4_CM              Condor_DCs  2  3 -0.03300430 ## 18           FlowJo_CD4_CM       Condor_NK_CD56dim  2  2 -0.47797463 ## 19           FlowJo_CD4_CM Condor_Unconventional_T  2  1 -0.34066582 ## 20           FlowJo_CD8_CM           Condor_CD8_CM  3  8  1.00000000 ## 21           FlowJo_CD8_CM         Condor_CD69_pos  3  7  0.09909120 ## 22           FlowJo_CD8_CM        Condor_Naive_CD4  3  6 -0.12471427 ## 23           FlowJo_CD8_CM        Condor_Naive_CD8  3  5  0.15865182 ## 24           FlowJo_CD8_CM             Condor_Treg  3  4 -0.02528452 ## 25           FlowJo_CD8_CM              Condor_DCs  3  3  0.02388441 ## 26           FlowJo_CD8_CM       Condor_NK_CD56dim  3  2 -0.24093469 ## 27           FlowJo_CD8_CM Condor_Unconventional_T  3  1 -0.32539938 ## 28         FlowJo_CD69_pos         Condor_CD69_pos  4  7  1.00000000 ## 29         FlowJo_CD69_pos        Condor_Naive_CD4  4  6  0.51192706 ## 30         FlowJo_CD69_pos        Condor_Naive_CD8  4  5  0.49668799 ## 31         FlowJo_CD69_pos             Condor_Treg  4  4 -0.30127413 ## 32         FlowJo_CD69_pos              Condor_DCs  4  3  0.20047968 ## 33         FlowJo_CD69_pos       Condor_NK_CD56dim  4  2  0.16917749 ## 34         FlowJo_CD69_pos Condor_Unconventional_T  4  1 -0.36033672 ## 35        FlowJo_Naive_CD4        Condor_Naive_CD4  5  6  1.00000000 ## 36        FlowJo_Naive_CD4        Condor_Naive_CD8  5  5  0.54041336 ## 37        FlowJo_Naive_CD4             Condor_Treg  5  4 -0.33638501 ## 38        FlowJo_Naive_CD4              Condor_DCs  5  3  0.39475280 ## 39        FlowJo_Naive_CD4       Condor_NK_CD56dim  5  2  0.06996937 ## 40        FlowJo_Naive_CD4 Condor_Unconventional_T  5  1 -0.64692399 ## 41        FlowJo_Naive_CD8        Condor_Naive_CD8  6  5  1.00000000 ## 42        FlowJo_Naive_CD8             Condor_Treg  6  4  0.23557398 ## 43        FlowJo_Naive_CD8              Condor_DCs  6  3  0.82513302 ## 44        FlowJo_Naive_CD8       Condor_NK_CD56dim  6  2  0.33514439 ## 45        FlowJo_Naive_CD8 Condor_Unconventional_T  6  1 -0.31728937 ## 46             FlowJo_Treg             Condor_Treg  7  4  1.00000000 ## 47             FlowJo_Treg              Condor_DCs  7  3  0.55599240 ## 48             FlowJo_Treg       Condor_NK_CD56dim  7  2  0.72054124 ## 49             FlowJo_Treg Condor_Unconventional_T  7  1  0.30378759 ## 50              FlowJo_DCs              Condor_DCs  8  3  1.00000000 ## 51              FlowJo_DCs       Condor_NK_CD56dim  8  2  0.69887312 ## 52              FlowJo_DCs Condor_Unconventional_T  8  1 -0.40364451 ## 53       FlowJo_NK_CD56dim       Condor_NK_CD56dim  9  2  1.00000000 ## 54       FlowJo_NK_CD56dim Condor_Unconventional_T  9  1 -0.09851331 ## 55 FlowJo_Unconventional_T Condor_Unconventional_T 10  1  1.00000000 ##  ## $arg ## $arg$type ## [1] \"lower\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Other_utilities.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Introduction to the condor object and other utilities","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           dplyr_1.1.4                 ## [111] codetools_0.2-20            multcomp_1.4-28             ## [113] textshaping_1.0.1           recipes_1.3.1               ## [115] openssl_2.3.3               Rphenograph_0.99.1          ## [117] TTR_0.24.4                  bslib_0.9.0                 ## [119] e1071_1.7-16                destiny_3.20.0              ## [121] GetoptLong_1.0.5            ggplot.multistats_1.0.1     ## [123] mime_0.13                   splines_4.4.2               ## [125] circlize_0.4.16             Rcpp_1.1.0                  ## [127] sparseMatrixStats_1.18.0    cellranger_1.1.0            ## [129] knitr_1.50                  clue_0.3-66                 ## [131] lme4_1.1-37                 fs_1.6.6                    ## [133] listenv_0.9.1               checkmate_2.3.2             ## [135] DelayedMatrixStats_1.28.1   Rdpack_2.6.4                ## [137] pkgbuild_1.4.8              ggsignif_0.6.4              ## [139] tibble_3.3.0                Matrix_1.7-3                ## [141] rpart.plot_3.1.2            statmod_1.5.0               ## [143] tzdb_0.5.0                  tweenr_2.0.3                ## [145] pkgconfig_2.0.3             pheatmap_1.0.13             ## [147] tools_4.4.2                 cachem_1.1.0                ## [149] rbibutils_2.3               smoother_1.3                ## [151] fastmap_1.2.0               rmarkdown_2.29              ## [153] scales_1.4.0                grid_4.4.2                  ## [155] usethis_3.1.0               broom_1.0.8                 ## [157] sass_0.4.10                 graph_1.84.1                ## [159] carData_3.0-5               RANN_2.6.2                  ## [161] rpart_4.1.24                farver_2.1.2                ## [163] reformulas_0.4.1            yaml_2.3.10                 ## [165] MatrixGenerics_1.18.1       foreign_0.8-90              ## [167] ggthemes_5.1.0              cli_3.6.5                   ## [169] purrr_1.1.0                 stats4_4.4.2                ## [171] lifecycle_1.0.4             uwot_0.2.3                  ## [173] askpass_1.2.1               caret_7.0-1                 ## [175] Biobase_2.66.0              mvtnorm_1.3-3               ## [177] lava_1.8.1                  sessioninfo_1.2.3           ## [179] backports_1.5.0             cytolib_2.18.2              ## [181] timechange_0.3.0            gtable_0.3.6                ## [183] rjson_0.2.23                umap_0.2.10.0               ## [185] ggridges_0.5.6              parallel_4.4.2              ## [187] pROC_1.18.5                 limma_3.62.2                ## [189] jsonlite_2.0.0              edgeR_4.4.2                 ## [191] RcppHNSW_0.6.0              ggplot2_3.5.2               ## [193] Rtsne_0.17                  FlowSOM_2.14.0              ## [195] ranger_0.17.0               flowCore_2.18.0             ## [197] jquerylib_0.1.4             timeDate_4041.110           ## [199] shiny_1.11.1                ConsensusClusterPlus_1.70.0 ## [201] htmltools_0.5.8.1           diffcyt_1.26.1              ## [203] rappdirs_0.3.3              glue_1.8.0                  ## [205] XVector_0.46.0              VIM_6.2.2                   ## [207] gridExtra_2.3               boot_1.3-31                 ## [209] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [211] R6_2.6.1                    tidyr_1.3.1                 ## [213] SingleCellExperiment_1.28.1 vcd_1.4-13                  ## [215] cluster_2.1.8.1             pkgload_1.4.0               ## [217] GenomeInfoDb_1.42.3         ipred_0.9-15                ## [219] nloptr_2.2.1                DelayedArray_0.32.0         ## [221] tidyselect_1.2.1            vipor_0.4.7                 ## [223] htmlTable_2.4.3             ggforce_0.5.0               ## [225] CytoDx_1.26.0               car_3.1-3                   ## [227] future_1.58.0               ModelMetrics_1.2.2.2        ## [229] laeken_0.5.3                data.table_1.17.8           ## [231] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       ## [233] RColorBrewer_1.1-3          rlang_1.1.6                 ## [235] remotes_2.5.0               colorRamps_2.3.4            ## [237] ggnewscale_0.5.2            hardhat_1.4.1               ## [239] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Prepare_data_for_cyCONDOR_analysis.html","id":"step-1","dir":"Articles","previous_headings":"","what":"Step 1","title":"Prepare data for cyCONDOR analysis","text":"Within FlowJo workspace, can adjust compensation needed optionally apply basic gating hierarchy data. recommended remove debris unwanted cells, reducing size final dataset improving computational efficiency. instance, immune cell analysis, consider gating CD45+ cells cyCONDOR analysis.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Prepare_data_for_cyCONDOR_analysis.html","id":"step-2","dir":"Articles","previous_headings":"","what":"Step 2","title":"Prepare data for cyCONDOR analysis","text":"Right-click gate want export select Export/Concatenate Populations Tip: want export gate samples workspace, step right-click desired gate select Select Equivalent Nodes select gate samples.   Exemplary FlowJo workspace (left) exemplary option window shown right-clicking desired gate","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Prepare_data_for_cyCONDOR_analysis.html","id":"step-3","dir":"Articles","previous_headings":"","what":"Step 3","title":"Prepare data for cyCONDOR analysis","text":"Now, choose format exported data. FCS3 recommended format. Additionally, select destination folder want save file. two options selecting channels export: Export compensated values: option selected image export channels compensated. Manually select compensated channels: option allows choose specific compensated channels include exported .fcs file. Note: data compensated FlowJo, example cyTOF data BD S8 unmixed data, export uncompensated values.   Population Export Concatenate window","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Prepare_data_for_cyCONDOR_analysis.html","id":"step-4","dir":"Articles","previous_headings":"","what":"Step 4","title":"Prepare data for cyCONDOR analysis","text":"Click Export. Now selected files exported selected folder. input cyCONDOR data_path contain .fcs files intended analysis.   Exemplary folder exported .fcs files","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Prepare_data_for_cyCONDOR_analysis.html","id":"step-5","dir":"Articles","previous_headings":"","what":"Step 5","title":"Prepare data for cyCONDOR analysis","text":"annotation table, used load .fcs files, file names .fcs files first column. Additional columns can included store relevant metadata analysis. restrictions type information can include metadata columns. advise save annotation table separate folder save comma separated .csv file. example annotation table shown :   Exemplary metadata table visualized Excel (left) Notepad (right)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"load-an-example-dataset","dir":"Articles","previous_headings":"","what":"Load an example dataset","title":"Pseudotime analysis","text":"start loading example condor object already annotated.","code":"condor <- readRDS(\"../.test_files/condor_pseudotime_016.rds\") plot_dim_red(fcd= condor,                expr_slot = NULL,              reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               cluster_slot = \"phenograph_filter_pca_orig_k_10\",              param = \"metaclusters\",              title = \"UMAP colored by Phenograph\",              alpha= 1, dot_size = 1) plot_marker_HM(fcd = condor,                expr_slot = \"orig\",                cluster_slot = \"phenograph_filter_pca_orig_k_10\",                cluster_var = \"metaclusters\",                cluster_rows = TRUE,                cluster_cols = TRUE,                title= \"Marker expression Phenograph clustering\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"pseudotime-analysis","dir":"Articles","previous_headings":"","what":"Pseudotime analysis","title":"Pseudotime analysis","text":"can now calculate pseudotime different settings:","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"with-no-constrains-on-the-start-of-the-trajectory","dir":"Articles","previous_headings":"Pseudotime analysis","what":"With no constrains on the start of the trajectory","title":"Pseudotime analysis","text":"output saved condor$pseudotime$slingshot_umap_pca_orig.","code":"condor <- runPseudotime(fcd = condor,                          reduction_method = \"umap\",                         reduction_slot = \"pca_orig\",                         cluster_slot= \"phenograph_filter_pca_orig_k_10\",                         cluster_var = \"metaclusters\",                         approx_points = NULL) ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" condor$pseudotime$slingshot_umap_pca_orig[1:5,] ##                                               Lineage1 Lineage2      mean ## export_Marrow1_00_SurfaceOnly_singlets.fcs_2  8.907685       NA  8.907685 ## export_Marrow1_00_SurfaceOnly_singlets.fcs_9        NA 11.40754 11.407538 ## export_Marrow1_00_SurfaceOnly_singlets.fcs_18       NA 12.15903 12.159027 ## export_Marrow1_00_SurfaceOnly_singlets.fcs_27       NA 11.36649 11.366492 ## export_Marrow1_00_SurfaceOnly_singlets.fcs_49       NA 11.36649 11.366492"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"with-a-specific-starting-cluster","dir":"Articles","previous_headings":"Pseudotime analysis","what":"With a specific starting cluster","title":"Pseudotime analysis","text":"output saved condor$pseudotime$slingshot_umap_pca_orig_CMPs.","code":"condor <- runPseudotime(fcd = condor,                          reduction_method = \"umap\",                         reduction_slot = \"pca_orig\",                         cluster_slot= \"phenograph_filter_pca_orig_k_10\",                         cluster_var = \"metaclusters\",                         approx_points = NULL,                         start.clus =  \"CMPs\",) ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" condor$pseudotime$slingshot_umap_pca_orig_CMPs[1:5,] ## NULL"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"testing-all-clusters-as-starting-point","dir":"Articles","previous_headings":"Pseudotime analysis","what":"Testing all clusters as starting point","title":"Pseudotime analysis","text":"","code":"for (i in unique(condor$clustering$phenograph_filter_pca_orig_k_10$metaclusters)[1:5]) {      condor <- runPseudotime(fcd = condor,                            reduction_method = \"umap\",                           reduction_slot = \"pca_orig\",                           cluster_slot= \"phenograph_filter_pca_orig_k_10\",                           cluster_var = \"metaclusters\",                           approx_points = NULL,                           start.clus =  i)    } ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\" ## [1] \"Slingshot - getLineages\" ## [1] \"Slingshot - getCurves\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"visualize-the-result-of-slingshot-analysis","dir":"Articles","previous_headings":"Pseudotime analysis","what":"Visualize the result of slingshot analysis","title":"Pseudotime analysis","text":"possible use plot_dim_red function plot result pseudotime analysis overlayed UMAP coordinates.","code":"plot_dim_red(fcd = condor,               expr_slot = \"orig\",               reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               cluster_slot = \"phenograph_filter_pca_orig_k_10\",               add_pseudotime = TRUE,               pseudotime_slot = \"slingshot_umap_pca_orig\",              param = \"mean\",               order = T,               title = \"UMAP colored by pseudotime\",               facet_by_variable = FALSE,               raster = TRUE,               alpha = 1,               dot_size = 1) +    geom_path(data = condor$extras$slingshot_umap_pca_orig$lineages %>% arrange(Order), aes(group = Lineage), size = 0.5) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"heatmap-visualization-of-monocytes-trajectory","dir":"Articles","previous_headings":"","what":"Heatmap visualization of monocytes trajectory","title":"Pseudotime analysis","text":"provide custom code visualize pseudotime, nevertheless many visualization can performed data depending biological question.","code":"selections <- rownames(condor$clustering$phenograph_filter_pca_orig_k_10[condor$clustering$phenograph_filter_pca_orig_k_10$metaclusters %in% c(\"HSCs\", \"CMPs\", \"Myeloblast\", \"Monocytes\"), ])  condor_mono <- filter_fcd(fcd = condor,                             cell_ids = selections) expression <- condor_mono$expr$orig  anno <- cbind(condor_mono$clustering$phenograph_filter_pca_orig_k_10[, c(\"Phenograph\", \"metaclusters\")], condor_mono$pseudotime$slingshot_umap_pca_orig)  anno <- anno[order(anno$Lineage2, decreasing = FALSE),]  expression <- expression[rownames(anno), c(\"148-CD34\", \"160-CD14\", \"144-CD11b\")]  my_colour = list(metaclusters = c(Monocytes = \"#CBD588\", HSCs = \"#689030\", Myeloblast = \"#DA5724\", CMPs = \"#F7941D\")) pheatmap(mat = expression,           scale = \"column\",           show_rownames = FALSE,           cluster_rows = F,           cluster_cols = F,           annotation_row = anno[, c(\"metaclusters\", \"Lineage2\")],           annotation_colors = my_colour,           breaks = scaleColors(expression, maxvalue = 2)[[\"breaks\"]],           color = scaleColors(expression, maxvalue = 2)[[\"color\"]], main = \"Heatmap Monocytes pseudotime\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/Pseudotime_analysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Pseudotime analysis","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] dplyr_1.1.4     ggplot2_3.5.2   pheatmap_1.0.13 cyCONDOR_0.3.1  ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           xts_0.14.1                  ##  [89] class_7.3-23                Hmisc_5.2-3                 ##  [91] pillar_1.11.0               nlme_3.1-168                ##  [93] iterators_1.0.14            compiler_4.4.2              ##  [95] RSpectra_0.16-2             stringi_1.8.7               ##  [97] gower_1.0.2                 minqa_1.2.8                 ##  [99] SummarizedExperiment_1.36.0 lubridate_1.9.4             ## [101] devtools_2.4.5              CytoML_2.18.3               ## [103] plyr_1.8.9                  crayon_1.5.3                ## [105] abind_1.4-8                 locfit_1.5-9.12             ## [107] sp_2.2-0                    sandwich_3.1-1              ## [109] pcaMethods_1.98.0           codetools_0.2-20            ## [111] multcomp_1.4-28             textshaping_1.0.1           ## [113] recipes_1.3.1               openssl_2.3.3               ## [115] Rphenograph_0.99.1          TTR_0.24.4                  ## [117] bslib_0.9.0                 e1071_1.7-16                ## [119] destiny_3.20.0              GetoptLong_1.0.5            ## [121] ggplot.multistats_1.0.1     mime_0.13                   ## [123] splines_4.4.2               circlize_0.4.16             ## [125] Rcpp_1.1.0                  sparseMatrixStats_1.18.0    ## [127] cellranger_1.1.0            knitr_1.50                  ## [129] clue_0.3-66                 lme4_1.1-37                 ## [131] fs_1.6.6                    listenv_0.9.1               ## [133] checkmate_2.3.2             DelayedMatrixStats_1.28.1   ## [135] Rdpack_2.6.4                pkgbuild_1.4.8              ## [137] ggsignif_0.6.4              tibble_3.3.0                ## [139] Matrix_1.7-3                rpart.plot_3.1.2            ## [141] statmod_1.5.0               tzdb_0.5.0                  ## [143] tweenr_2.0.3                pkgconfig_2.0.3             ## [145] tools_4.4.2                 cachem_1.1.0                ## [147] rbibutils_2.3               smoother_1.3                ## [149] fastmap_1.2.0               rmarkdown_2.29              ## [151] scales_1.4.0                grid_4.4.2                  ## [153] usethis_3.1.0               broom_1.0.8                 ## [155] sass_0.4.10                 graph_1.84.1                ## [157] carData_3.0-5               RANN_2.6.2                  ## [159] rpart_4.1.24                farver_2.1.2                ## [161] reformulas_0.4.1            yaml_2.3.10                 ## [163] MatrixGenerics_1.18.1       foreign_0.8-90              ## [165] ggthemes_5.1.0              cli_3.6.5                   ## [167] purrr_1.1.0                 stats4_4.4.2                ## [169] lifecycle_1.0.4             uwot_0.2.3                  ## [171] askpass_1.2.1               caret_7.0-1                 ## [173] Biobase_2.66.0              mvtnorm_1.3-3               ## [175] lava_1.8.1                  sessioninfo_1.2.3           ## [177] backports_1.5.0             cytolib_2.18.2              ## [179] timechange_0.3.0            gtable_0.3.6                ## [181] rjson_0.2.23                umap_0.2.10.0               ## [183] ggridges_0.5.6              parallel_4.4.2              ## [185] pROC_1.18.5                 limma_3.62.2                ## [187] jsonlite_2.0.0              edgeR_4.4.2                 ## [189] RcppHNSW_0.6.0              Rtsne_0.17                  ## [191] FlowSOM_2.14.0              ranger_0.17.0               ## [193] flowCore_2.18.0             jquerylib_0.1.4             ## [195] timeDate_4041.110           shiny_1.11.1                ## [197] ConsensusClusterPlus_1.70.0 htmltools_0.5.8.1           ## [199] diffcyt_1.26.1              glue_1.8.0                  ## [201] XVector_0.46.0              VIM_6.2.2                   ## [203] gridExtra_2.3               boot_1.3-31                 ## [205] TrajectoryUtils_1.14.0      igraph_2.1.4                ## [207] R6_2.6.1                    tidyr_1.3.1                 ## [209] SingleCellExperiment_1.28.1 labeling_0.4.3              ## [211] vcd_1.4-13                  cluster_2.1.8.1             ## [213] pkgload_1.4.0               GenomeInfoDb_1.42.3         ## [215] ipred_0.9-15                nloptr_2.2.1                ## [217] DelayedArray_0.32.0         tidyselect_1.2.1            ## [219] vipor_0.4.7                 htmlTable_2.4.3             ## [221] ggforce_0.5.0               CytoDx_1.26.0               ## [223] car_3.1-3                   future_1.58.0               ## [225] ModelMetrics_1.2.2.2        laeken_0.5.3                ## [227] data.table_1.17.8           htmlwidgets_1.6.4           ## [229] ComplexHeatmap_2.22.0       RColorBrewer_1.1-3          ## [231] rlang_1.1.6                 remotes_2.5.0               ## [233] colorRamps_2.3.4            Cairo_1.6-2                 ## [235] ggnewscale_0.5.2            hardhat_1.4.1               ## [237] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"cyCONDOR","text":"describe basic workflow analyse high-dimensional cytometry data cyCONDOR. detailed description cyCONDOR functionalists visualization tools can found Articles section. section describe load data folder FCS files, perform dimensionality reduction clustering together basic visualization results. start loading cyCONDOR package.","code":"library(cyCONDOR)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the data","title":"cyCONDOR","text":"prep_fcd() import .fcs files R session. .fcs files stored single folder data_path. Additionally annotation table text file (anno_table) provided contains column file names .fcs files optionally addional sample information. example anno_table: Arguments: data_path = Folder .fcs files .csv files stored max_cell = Number cells use file useCSV = Flag input .csv files .fcs transformation = Transformation perform (“auto_logi”, “arcsinh”, “clr”, “none”) remove_param = Parameters removed fcd, “inTime” kept anno_table = Path annotation table text file. filename_col = Name column containing file name matching .fcs/.csv files details data loading, transformation general structure fcd look vignette(\"Data_Loading_and_Transformation\") vignette(\"Other_utilities\").","code":"condor <- prep_fcd(data_path = \"../.test_files/fcs/\",                      max_cell = 1000,                      useCSV = FALSE,                      transformation = \"auto_logi\",                      remove_param = c(\"FSC-H\", \"SSC-H\", \"FSC-W\", \"SSC-W\", \"Time\"),                      anno_table = \"../.test_files/metadata.csv\",                      filename_col = \"filename\"                    )  class(condor) ## [1] \"flow_cytometry_dataframe\""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"dimensionality-reduction","dir":"Articles","previous_headings":"","what":"Dimensionality Reduction","title":"cyCONDOR","text":"reduce complexity data set, first perform principal component analysis (PCA) use coordinates non-linear dimensionality reduction applying e.g. UMAP tSNE algorithm. See vignette(\"Dimensionality_Reduction\") details alternative methods. approach, can visualize complexity data set two dimensional space.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"pca","dir":"Articles","previous_headings":"Dimensionality Reduction","what":"PCA","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry dataset data_slot = Data slot use calculation, e.g. \"orig\" batch corrected \"norm\"","code":"condor <- runPCA(fcd = condor,                   data_slot = \"orig\"                  )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"umap","dir":"Articles","previous_headings":"Dimensionality Reduction","what":"UMAP","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry dataset input type = Data use calculation UMAP, e.g. “expr” “pca” data_slot = Data slot use calculation, e.g. \"orig\" batch corrected \"norm\"","code":"condor <- runUMAP(fcd = condor,                    input_type = \"pca\",                    data_slot = \"orig\"                   )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"umap-visualization","dir":"Articles","previous_headings":"Dimensionality Reduction > UMAP","what":"UMAP Visualization","title":"cyCONDOR","text":"","code":"plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               param = \"group\",               title = \"UMAP colored by group\"              )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"tsne","dir":"Articles","previous_headings":"Dimensionality Reduction","what":"tSNE","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry dataset input type = Data use calculation, e.g. \"expr\" \"pca\" data_slot = Data slot use calculation, e.g. \"orig\" batch corrected \"norm\"","code":"condor <- runtSNE(fcd = condor,                    input_type = \"pca\",                    data_slot = \"orig\"                   ) ## Read the 10000 x 29 data matrix successfully! ## OpenMP is working. 1 threads. ## Using no_dims = 2, perplexity = 30.000000, and theta = 0.500000 ## Computing input similarities... ## Building tree... ##  - point 10000 of 10000 ## Done in 3.14 seconds (sparsity = 0.013027)! ## Learning embedding... ## Iteration 50: error is 96.832296 (50 iterations in 1.48 seconds) ## Iteration 100: error is 84.589965 (50 iterations in 2.04 seconds) ## Iteration 150: error is 81.308471 (50 iterations in 1.34 seconds) ## Iteration 200: error is 80.502496 (50 iterations in 1.38 seconds) ## Iteration 250: error is 80.156581 (50 iterations in 1.39 seconds) ## Iteration 300: error is 3.162325 (50 iterations in 1.26 seconds) ## Iteration 350: error is 2.837891 (50 iterations in 1.18 seconds) ## Iteration 400: error is 2.650550 (50 iterations in 1.16 seconds) ## Iteration 450: error is 2.528446 (50 iterations in 1.14 seconds) ## Iteration 500: error is 2.441760 (50 iterations in 1.15 seconds) ## Iteration 550: error is 2.376207 (50 iterations in 1.17 seconds) ## Iteration 600: error is 2.325171 (50 iterations in 1.18 seconds) ## Iteration 650: error is 2.284774 (50 iterations in 1.18 seconds) ## Iteration 700: error is 2.252247 (50 iterations in 1.19 seconds) ## Iteration 750: error is 2.225968 (50 iterations in 1.19 seconds) ## Iteration 800: error is 2.206182 (50 iterations in 1.19 seconds) ## Iteration 850: error is 2.191611 (50 iterations in 1.20 seconds) ## Iteration 900: error is 2.181749 (50 iterations in 1.21 seconds) ## Iteration 950: error is 2.174735 (50 iterations in 1.23 seconds) ## Iteration 1000: error is 2.169326 (50 iterations in 1.24 seconds) ## Fitting performed in 25.47 seconds."},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"tsne-visualization","dir":"Articles","previous_headings":"Dimensionality Reduction > tSNE","what":"tSNE visualization","title":"cyCONDOR","text":"","code":"plot_dim_red(fcd= condor,                reduction_method = \"tSNE\",               reduction_slot = \"pca_orig\",               param = \"group\",               title = \"tSNE colored by group\"              )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"clustering","dir":"Articles","previous_headings":"","what":"Clustering","title":"cyCONDOR","text":"group cells similar marker expression applying Phenograph FlowSOM clustering algorithms. details see vignette(\"Clustering_and_cell_annotation\").","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"phenograph-clustering","dir":"Articles","previous_headings":"Clustering","what":"Phenograph clustering","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry dataset input type = Data use calculation UMAP, e.g. \"pca\" data_slot = Data slot use calculation, e.g. \"orig\" \"norm\" k = K value used clustering","code":"condor <- runPhenograph(fcd = condor,                          input_type = \"pca\",                          data_slot = \"orig\",                          k = 60                         ) ## Run Rphenograph starts: ##   -Input data of 10000 rows and 29 columns ##   -k is set to 60 ##   Finding nearest neighbors...DONE ~ 5.145 s ##   Compute jaccard coefficient between nearest-neighbor sets... ## Presorting knn... ## presorting DONE ~ 0.353 s ##   Start jaccard ## DONE ~ 0.615 s ##   Build undirected graph from the weighted links...DONE ~ 0.252 s ##   Run louvain clustering on the graph ...DONE ~ 0.954 s ## Run Rphenograph DONE, totally takes 6.96599999999998s. ##   Return a community class ##   -Modularity value: 0.8355364  ##   -Number of clusters: 14"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"visualize-phenograph-clustering","dir":"Articles","previous_headings":"Clustering > Phenograph clustering","what":"Visualize Phenograph clustering","title":"cyCONDOR","text":"","code":"plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               cluster_slot = \"phenograph_pca_orig_k_60\",              param = \"Phenograph\",              title = \"UMAP colored by Phenograph clustering\"              )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"flowsom-clustering","dir":"Articles","previous_headings":"Clustering","what":"FlowSOM clustering","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry dataset input type = Data use calculation, e.g. \"expr\" \"pca\". data_slot = Data slot use calculation, e.g. \"orig\" \"norm\" nClusters = Number final clusters","code":"condor <- runFlowSOM(fcd = condor,                       input_type = \"expr\",                       data_slot = \"orig\",                       nClusters = 5                      ) ## Building SOM ## Mapping data to SOM ## Building MST"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"visualize-flowsom-clustering","dir":"Articles","previous_headings":"Clustering > FlowSOM clustering","what":"Visualize FlowSOM clustering","title":"cyCONDOR","text":"","code":"plot_dim_red(fcd= condor,                reduction_method = \"umap\",               reduction_slot = \"pca_orig\",               cluster_slot = \"FlowSOM_expr_orig_k_5\",              param = \"FlowSOM\",              title = \"UMAP colored by FlowSOM clustering\"              )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data visualization","title":"cyCONDOR","text":"can now visualize data set compare different experimental groups. examples, visualization options check vignette(\"Data_Visualization\").","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"confusion-matrix","dir":"Articles","previous_headings":"Data visualization","what":"Confusion Matrix","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry data set cluster_slot = String specifying clustering slot use find variable specified cluster_var cluster_var = String specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels) group_var = String indicating variable name cell_anno defines grouping variable used (x-axis), e.g. group sample ID","code":"plot_confusion_HM(fcd = condor,                   cluster_slot = \"phenograph_pca_orig_k_60\",                    cluster_var = \"Phenograph\",                   group_var = \"group\",                    size = 30                   )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"barplot-of-cluster-frequencies","dir":"Articles","previous_headings":"Data visualization","what":"Barplot of cluster frequencies","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry data set cluster_slot = String specifying clustering slot use find variable specified cluster_var cluster_var = String specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels) group_var = String indicating variable name cell_anno defines grouping variable used (x-axis), e.g. group sample ID title = Title plot, default “Counts”","code":"plot_frequency_barplot(fcd = condor,                     cluster_slot = \"phenograph_pca_orig_k_60\",                     cluster_var = \"Phenograph\",                     group_var = \"group\",                     title = \"Stacked barplot of cluster frequencies\"                      )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"heatmap-of-protein-expression","dir":"Articles","previous_headings":"Data visualization","what":"Heatmap of protein expression","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry data set expr_slot = expr_slot take marker expression values, default \"orig\" cluster_slot = String specifying clustering slot use find variable specified cluster_var cluster_var = String specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels)","code":"plot_marker_HM(fcd = condor,                expr_slot = \"orig\",                marker_to_exclude = c(\"FSC-A\",\"SSC-A\"),                cluster_slot = \"phenograph_pca_orig_k_60\",                cluster_var = \"Phenograph\"                )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"boxplot-of-cluster-frequency","dir":"Articles","previous_headings":"Data visualization","what":"Boxplot of cluster frequency","title":"cyCONDOR","text":"Arguments: fcd = Flow cytometry data set cluster_slot = String specifying clustering slot use find variable specified cluster_var cluster_var = String specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels) sample_var = String indicating variable name cell_anno defines sample IDs used group_var = String indicating variable name cell_anno used group samples sample_var numeric = Logical, TRUE numeric levels cluster_var ordered increasing order “Cluster_” pasted number, FALSE alphabetical ordering applied.","code":"plots <- plot_frequency_boxplot(fcd = condor,                                 cluster_slot = \"phenograph_pca_orig_k_60\",                                  cluster_var = \"Phenograph\",                                 sample_var = \"sample_ID\",                                  group_var = \"group\",                                  numeric = T                                 )  plots$Cluster_7"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"what-is-next","dir":"Articles","previous_headings":"","what":"What is next?","title":"cyCONDOR","text":"Depending data set cyCONDOR offers various options continue analysis: Try data visualization options: vignette(\"Data_Visualization\") Exploratory differential analysis cell population frequencies marker expression: vignette(\"Differential_Analysis\" See vignette(\"Batch_correction\") details handle batch effects within cyCONDOR high number samples recorded panel, check data projection workflow conveniently assigning clusters metaclusters: vignette(\"Data_Projection\") Train machine learning classifier: vignette(\"Machine_learning_classifier) Calculate cell trajectories pseudotime: vignette(\"Pseudotime_analysis\") Import FlowJo gating hierarchy fcd: vignette(\"Load_a_FlowJo_workspace.Rmd\")","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/articles/cyCONDOR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"cyCONDOR","text":"","code":"info <- sessionInfo()  info ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cyCONDOR_0.3.1 ##  ## loaded via a namespace (and not attached): ##   [1] IRanges_2.40.1              Rmisc_1.5.1                 ##   [3] urlchecker_1.0.1            nnet_7.3-20                 ##   [5] CytoNorm_2.0.1              TH.data_1.1-3               ##   [7] vctrs_0.6.5                 digest_0.6.37               ##   [9] png_0.1-8                   shape_1.4.6.1               ##  [11] proxy_0.4-27                slingshot_2.14.0            ##  [13] ggrepel_0.9.6               corrplot_0.95               ##  [15] parallelly_1.45.0           MASS_7.3-65                 ##  [17] pkgdown_2.1.3               reshape2_1.4.4              ##  [19] httpuv_1.6.16               foreach_1.5.2               ##  [21] BiocGenerics_0.52.0         withr_3.0.2                 ##  [23] ggrastr_1.0.2               xfun_0.52                   ##  [25] ggpubr_0.6.1                ellipsis_0.3.2              ##  [27] survival_3.8-3              memoise_2.0.1               ##  [29] hexbin_1.28.5               ggbeeswarm_0.7.2            ##  [31] RProtoBufLib_2.18.0         princurve_2.1.6             ##  [33] profvis_0.4.0               ggsci_3.2.0                 ##  [35] systemfonts_1.2.3           ragg_1.4.0                  ##  [37] zoo_1.8-14                  GlobalOptions_0.1.2         ##  [39] DEoptimR_1.1-3-1            Formula_1.2-5               ##  [41] promises_1.3.3              scatterplot3d_0.3-44        ##  [43] httr_1.4.7                  rstatix_0.7.2               ##  [45] globals_0.18.0              rstudioapi_0.17.1           ##  [47] UCSC.utils_1.2.0            miniUI_0.1.2                ##  [49] generics_0.1.4              ggcyto_1.34.0               ##  [51] base64enc_0.1-3             curl_6.4.0                  ##  [53] S4Vectors_0.44.0            zlibbioc_1.52.0             ##  [55] flowWorkspace_4.18.1        polyclip_1.10-7             ##  [57] randomForest_4.7-1.2        GenomeInfoDbData_1.2.13     ##  [59] SparseArray_1.6.2           RBGL_1.82.0                 ##  [61] ncdfFlow_2.52.1             RcppEigen_0.3.4.0.2         ##  [63] xtable_1.8-4                stringr_1.5.1               ##  [65] desc_1.4.3                  doParallel_1.0.17           ##  [67] evaluate_1.0.4              S4Arrays_1.6.0              ##  [69] hms_1.1.3                   glmnet_4.1-9                ##  [71] GenomicRanges_1.58.0        irlba_2.3.5.1               ##  [73] colorspace_2.1-1            harmony_1.2.3               ##  [75] reticulate_1.42.0           readxl_1.4.5                ##  [77] magrittr_2.0.3              lmtest_0.9-40               ##  [79] readr_2.1.5                 Rgraphviz_2.50.0            ##  [81] later_1.4.2                 lattice_0.22-7              ##  [83] future.apply_1.20.0         robustbase_0.99-4-1         ##  [85] XML_3.99-0.18               cowplot_1.2.0               ##  [87] matrixStats_1.5.0           RcppAnnoy_0.0.22            ##  [89] xts_0.14.1                  class_7.3-23                ##  [91] Hmisc_5.2-3                 pillar_1.11.0               ##  [93] nlme_3.1-168                iterators_1.0.14            ##  [95] compiler_4.4.2              RSpectra_0.16-2             ##  [97] stringi_1.8.7               gower_1.0.2                 ##  [99] minqa_1.2.8                 SummarizedExperiment_1.36.0 ## [101] lubridate_1.9.4             devtools_2.4.5              ## [103] CytoML_2.18.3               plyr_1.8.9                  ## [105] crayon_1.5.3                abind_1.4-8                 ## [107] locfit_1.5-9.12             sp_2.2-0                    ## [109] sandwich_3.1-1              pcaMethods_1.98.0           ## [111] dplyr_1.1.4                 codetools_0.2-20            ## [113] multcomp_1.4-28             textshaping_1.0.1           ## [115] recipes_1.3.1               openssl_2.3.3               ## [117] Rphenograph_0.99.1          TTR_0.24.4                  ## [119] bslib_0.9.0                 e1071_1.7-16                ## [121] destiny_3.20.0              GetoptLong_1.0.5            ## [123] ggplot.multistats_1.0.1     mime_0.13                   ## [125] splines_4.4.2               circlize_0.4.16             ## [127] Rcpp_1.1.0                  sparseMatrixStats_1.18.0    ## [129] cellranger_1.1.0            knitr_1.50                  ## [131] clue_0.3-66                 lme4_1.1-37                 ## [133] fs_1.6.6                    listenv_0.9.1               ## [135] checkmate_2.3.2             DelayedMatrixStats_1.28.1   ## [137] Rdpack_2.6.4                pkgbuild_1.4.8              ## [139] ggsignif_0.6.4              tibble_3.3.0                ## [141] Matrix_1.7-3                rpart.plot_3.1.2            ## [143] statmod_1.5.0               tzdb_0.5.0                  ## [145] tweenr_2.0.3                pkgconfig_2.0.3             ## [147] pheatmap_1.0.13             tools_4.4.2                 ## [149] cachem_1.1.0                rbibutils_2.3               ## [151] smoother_1.3                fastmap_1.2.0               ## [153] rmarkdown_2.29              scales_1.4.0                ## [155] grid_4.4.2                  usethis_3.1.0               ## [157] broom_1.0.8                 sass_0.4.10                 ## [159] graph_1.84.1                carData_3.0-5               ## [161] RANN_2.6.2                  rpart_4.1.24                ## [163] farver_2.1.2                reformulas_0.4.1            ## [165] yaml_2.3.10                 MatrixGenerics_1.18.1       ## [167] foreign_0.8-90              ggthemes_5.1.0              ## [169] cli_3.6.5                   purrr_1.1.0                 ## [171] stats4_4.4.2                lifecycle_1.0.4             ## [173] uwot_0.2.3                  askpass_1.2.1               ## [175] caret_7.0-1                 Biobase_2.66.0              ## [177] mvtnorm_1.3-3               lava_1.8.1                  ## [179] sessioninfo_1.2.3           backports_1.5.0             ## [181] cytolib_2.18.2              timechange_0.3.0            ## [183] gtable_0.3.6                rjson_0.2.23                ## [185] umap_0.2.10.0               ggridges_0.5.6              ## [187] Rphenoannoy_0.1.0           parallel_4.4.2              ## [189] pROC_1.18.5                 limma_3.62.2                ## [191] jsonlite_2.0.0              edgeR_4.4.2                 ## [193] RcppHNSW_0.6.0              ggplot2_3.5.2               ## [195] Rtsne_0.17                  FlowSOM_2.14.0              ## [197] ranger_0.17.0               flowCore_2.18.0             ## [199] jquerylib_0.1.4             timeDate_4041.110           ## [201] shiny_1.11.1                ConsensusClusterPlus_1.70.0 ## [203] htmltools_0.5.8.1           diffcyt_1.26.1              ## [205] glue_1.8.0                  XVector_0.46.0              ## [207] VIM_6.2.2                   gridExtra_2.3               ## [209] boot_1.3-31                 TrajectoryUtils_1.14.0      ## [211] igraph_2.1.4                R6_2.6.1                    ## [213] tidyr_1.3.1                 SingleCellExperiment_1.28.1 ## [215] labeling_0.4.3              vcd_1.4-13                  ## [217] cluster_2.1.8.1             pkgload_1.4.0               ## [219] GenomeInfoDb_1.42.3         ipred_0.9-15                ## [221] nloptr_2.2.1                DelayedArray_0.32.0         ## [223] tidyselect_1.2.1            vipor_0.4.7                 ## [225] htmlTable_2.4.3             ggforce_0.5.0               ## [227] CytoDx_1.26.0               car_3.1-3                   ## [229] future_1.58.0               ModelMetrics_1.2.2.2        ## [231] laeken_0.5.3                data.table_1.17.8           ## [233] htmlwidgets_1.6.4           ComplexHeatmap_2.22.0       ## [235] RColorBrewer_1.1-3          rlang_1.1.6                 ## [237] remotes_2.5.0               colorRamps_2.3.4            ## [239] ggnewscale_0.5.2            hardhat_1.4.1               ## [241] beeswarm_0.4.0              prodlim_2025.04.28"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lorenzo Bonaguro. Author, maintainer. Charlotte Kroeger. Author. Sophie Mueller. Author. Jacqueline Leidner. Author. Aleksej Frolov. Author. Francesco Elli. Author. Nico Henschel. Author.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bonaguro L, Kroeger C, Mueller S, Leidner J, Frolov , Elli F, Henschel N (2025). cyCONDOR: Flow Cytometry data analysis toolbox. R package version 0.3.1, https://lorenzobonaguro.github.io/cyCONDOR.","code":"@Manual{,   title = {cyCONDOR: Flow Cytometry data analysis toolbox},   author = {Lorenzo Bonaguro and Charlotte Kroeger and Sophie Mueller and Jacqueline Leidner and Aleksej Frolov and Francesco Elli and Nico Henschel},   year = {2025},   note = {R package version 0.3.1},   url = {https://lorenzobonaguro.github.io/cyCONDOR}, }"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"cycondor-hdc-analysis-ecosystem","dir":"","previous_headings":"","what":"Flow Cytometry data analysis toolbox","title":"Flow Cytometry data analysis toolbox","text":"High-dimensional cytometry (HDC) powerful tool studying single-cells phenotypes complex system. Although recent years combination technological developments affordability made HDC broadly available, technological advances paired adequate development analytical methods take full advantage data generated. several platforms bioinformatics tools currently available analysis HDC data, either web-hosted limited scalability designed expert computational biologists, making difficult approach wet lab scientists. Additionally, need end--end HDC data analysis tools within unified ecosystem poses significant challenge, researchers must navigate multiple platforms software packages complete analysis. developed easy--use computational framework (condor) covering essential steps cytometry data analysis also including array downstream functions tools expand biological interpretation data. condor’s comprehensive suite features, including guided pre-processing, clustering, dimensionality reduction, machine learning algorithms, facilitates seamless integration condor clinically relevant settings, scalability disease classification paramount widespread adoption HDC clinical practice. Additionally, condor’s advanced analytical features, pseudotime analysis batch integration, provide researchers tools extract deeper insights data. used condor variety data different tissues technologies demonstrating versatility assist analysis high dimensionality data preprocessing biological interpretation.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"Flow Cytometry data analysis toolbox","text":"can find detailed documentation cyCONDOR recommend using cyCONDOR pre-build Docker container lorenzobonaguro/cycondor, latest version image can pulled : run image can follow following script can access RStudio web browser address starting Docker container remote server exchange localhost IP address domain name server exemplified : detailed guide get started Docker run cyCONDOR Singulariy container provided vignette: vignette(\"How_to_run_cyCONDOR_as_container\").","code":"docker pull lorenzobonaguro/cycondor:v030 docker run -dp [YOURPORT]:8787 \\ -e USER=[YOURUSERNAME] -e PASSWORD=[YOURPASSWORD] \\ --name condor_analysis \\ -v [PATHTODATA]:/home/[YOURUSERNAME]/data/ \\ lorenzobonaguro/cycondor:v030 http://localhost:[YOURPORT]/ http://[SERVERNAME]:[YOURPORT]/"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"how-to-install-locally","dir":"","previous_headings":"","what":"How to install locally","title":"Flow Cytometry data analysis toolbox","text":"tools tested R v4.3 newer, older version compatible tested install cyCONDOR can follow steps describe . IMPORTANT: package compiler required (e.g. Rtools Windows Xcode MacOS) NOTE MAC SILICON USER > might run issue installing Rphenoannoy, please see specific issue > Alternateively, provide pre-compiled version Rphenoannoy can install : package installed can continue standard installation","code":"install.packages(\"https://github.com/lorenzobonaguro/Rphenoannoy/releases/download/R4.4.X/Rphenoannoy_0.1.0.tgz\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"install-bioconductor","dir":"","previous_headings":"How to install locally","what":"Install Bioconductor","title":"Flow Cytometry data analysis toolbox","text":"Install Bioconductor, sure Bioconductor already installed system can skip step.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(version = \"3.20\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"install-cycondor","dir":"","previous_headings":"How to install locally","what":"Install cyCONDOR","title":"Flow Cytometry data analysis toolbox","text":"Now can install cyCONDOR dependencies want early access new feature cyCONDOR can install developmental version cyCONDOR. NOTE: Keep mind developmental version cyCONDOR fully tested, find bug feel free report ! see changes currently implemented dev branch see changelog.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  devtools::install_github(\"lorenzobonaguro/cyCONDOR\",                         build_vignettes = FALSE,                         repos = BiocManager::repositories()) if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  devtools::install_github(\"lorenzobonaguro/cyCONDOR@dev\",                         build_vignettes = FALSE,                         repos = BiocManager::repositories())"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"key-cycondor-features-include","dir":"","previous_headings":"","what":"Key cyCONDOR features include:","title":"Flow Cytometry data analysis toolbox","text":"Data loading: Loading .fcs .csv files folder match annotation table. data structure flow cytometry dataset structure needed downstream functions. Also FlowJo Archives can directly imported cyCONDOR Data Transformation: Data transformed suitable downstream analysis, different transformation methods provided different data types (e.g. MCFC, CyTOF, Spectral Flow, CITE-seq). Dimensionality Reduction: Several dimensionality reductions algorithms provided cyCONDOR package: PCA, UMAP, tSNE, DM. Batch correction: cyCONDOR implements harmony data integration. Clustering: Phenograph clustering FlowSOM clustering included. Pseudotime: Pseudotime trajectory analysis slingshot. Statistical Analysis: Differential protein expression changes frequencies can tested built functions. Data Visualization: cyCONDOR includes several data visualization function including: confusion matrix, marker heatmap, feature plot, boxplot visualization also depict data similarly conventional cytometry data analysis software (e.g. FlowJo). Scalability large scale datasets: cyCONDOR can work large scale datasets, can integrate new data existing models allowing population level integrated data analysis. Disease classifier: cyCONDOR can applied clinical classifier easy train machine learning models. Misc: cyCONDOR includes functions check integrity flow cytometry dataset, subset annotate metaclusters. Also includes several visualization tools help interpretation data. Feel free browse vignette Articles section.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"how-to-cite-cycondor","dir":"","previous_headings":"","what":"How to cite cyCONDOR","title":"Flow Cytometry data analysis toolbox","text":"Kroeger, Mueller, Leidner et al. Unveiling Power High-Dimensional Cytometry Data cyCONDOR, Nature Communications","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/index.html","id":"contact-or-follow-us","dir":"","previous_headings":"","what":"Contact or follow us","title":"Flow Cytometry data analysis toolbox","text":"problem question regarding cyCONDOR package repository just want date coming next follow :  @LorenzoBonaguro want directly chat us join Slack Workspace","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/PC_loadings.html","id":null,"dir":"Reference","previous_headings":"","what":"PC_loadings — PC_loadings","title":"PC_loadings — PC_loadings","text":"Function visualize effect marker principle component.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/PC_loadings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PC_loadings — PC_loadings","text":"","code":"PC_loadings(fcd, prefix = NULL, data_slot = \"orig\", nPC = 3)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/PC_loadings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PC_loadings — PC_loadings","text":"fcd flow cytometry dataset. prefix Prefix output. data_slot data slot use calculation PCA, e.g. \"orig\" \"norm\". nPC Number principle components show.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/PC_loadings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PC_loadings — PC_loadings","text":"Figure PC loadings","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/PC_loadings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PC_loadings — PC_loadings","text":"PC_loadings","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/add_diffcyt_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","title":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","text":"Wrapper function include statistical results calculated using diffcyt package fcd file.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/add_diffcyt_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","text":"","code":"add_diffcyt_statistics(fcd = condor, input, group1 = \"ctrl\", group2 = \"pat\")"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/add_diffcyt_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","text":"fcd flow cytometry dataset, subjected clustering cell type label prediction cyCONDOR . input dataframe containing statistical results diffcyt package. Example: input <- .data.frame(diffcyt::topTable(res_DA, = TRUE)). group1 First group comparison. group2 Second group comparison.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/add_diffcyt_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","text":"fcd containing statistical results diffcyt package","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/add_diffcyt_statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add statistical results from the diffcyt package to the fcd. — add_diffcyt_statistics","text":"add_diffcyt_statistics","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/change_param_name.html","id":null,"dir":"Reference","previous_headings":"","what":"change_param — change_param_name","title":"change_param — change_param_name","text":"change parameter names","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/change_param_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"change_param — change_param_name","text":"","code":"change_param_name(fcd, old_names, new_names)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/change_param_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"change_param — change_param_name","text":"fcd flow cytometry dataset. old_names vector names changed. new_names vector new names order.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/change_param_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"change_param — change_param_name","text":"function returns fcd changed parameter names.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/change_param_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"change_param — change_param_name","text":"change_param_name","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/checkInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function within cyCONDOR — checkInput","title":"Helper function within cyCONDOR — checkInput","text":"`checkInput()` helper function within several cyCONDOR functions visualization differential testing. checks availability selected 1st level elements (clustering) 2nd level elements (expr_slot, cluster_slot, cell_anno), 3rd level variable names cluster_slot cell_anno present. order ensure proper functioning, arguments strictly necessary parent function default can given, set NULL. Please note function give error, group_var, sample_var pair_var set NULL user parent function, since arguments sometimes optional functions.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/checkInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function within cyCONDOR — checkInput","text":"","code":"checkInput(   fcd,   check_expr_slot = F,   check_cluster_slot = F,   check_cell_anno = F,   check_reduction = F,   expr_slot = NULL,   cluster_slot = NULL,   cluster_var = NULL,   reduction_method = NULL,   reduction_slot = NULL,   group_var = NULL,   sample_var = NULL,   pair_var = NULL )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/checkInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function within cyCONDOR — checkInput","text":"fcd flow cytometry dataset check_expr_slot logical indicating expr_slot checked check_cluster_slot logical indicating cluster_slot checked check_cell_anno logical indicating cell_anno checked check_reduction logical indicating reduction_method checked expr_slot set NULL (default) expr_slot needed parent function, set equal expr_slot expr_slot string checked cluster_slot set NULL (default) cluster_slot needed parent function, set equal cluster_slot cluster_slot string checked cluster_var set NULL (default) cluster_var needed parent function, set equal cluster_var cluster_var string checked reduction_method set NULL (default) reduction_method needed parent function, set equal reduction_method reduction_method string checked reduction_slot set NULL (default) reduction_slot needed parent function, set equal reduction_slot reduction_slot string checked group_var set NULL (default) group_var needed parent function, set equal group_var group_var string checked sample_var set NULL (default) sample_var needed parent function, set equal sample_var sample_var string checked pair_var set NULL (default) pair_var needed parent function, set equal pair_var pair_var string checked","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/checkInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function within cyCONDOR — checkInput","text":"`checkInput()` returns stop message one checks fails.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/checkInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function within cyCONDOR — checkInput","text":"checkInput","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/check_IDs.html","id":null,"dir":"Reference","previous_headings":"","what":"check_IDs — check_IDs","title":"check_IDs — check_IDs","text":"Checks integrity correctness flow cytometry dataset comparing cell IDs existing slots cell IDs fcd$exprs$orig","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/check_IDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_IDs — check_IDs","text":"","code":"check_IDs(fcd)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/check_IDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_IDs — check_IDs","text":"fcd Flow cytometry dataset checked.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/check_IDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_IDs — check_IDs","text":"cell IDs differ level ones fcd$expr$orig data frame, warning returned.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/check_IDs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check_IDs — check_IDs","text":"check_IDs","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/clr.html","id":null,"dir":"Reference","previous_headings":"","what":"crt_transform — clr","title":"crt_transform — clr","text":"Data transformation, function runs within prep_fcd wrapper.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crt_transform — clr","text":"","code":"clr(x)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crt_transform — clr","text":"x matrix transform","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"crt_transform — clr","text":"crt_transform","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/clr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"crt_transform — clr","text":"crt_transform","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Welcome Message and ASCII Art upon Loading this function is inspired by the developers of the `ggvolc` package — condor-onAttach","title":"Print Welcome Message and ASCII Art upon Loading this function is inspired by the developers of the `ggvolc` package — condor-onAttach","text":"function executed `cyCONDOR` package attached R session. prints welcome message ASCII representation related package.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Welcome Message and ASCII Art upon Loading this function is inspired by the developers of the `ggvolc` package — condor-onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor_session_info.html","id":null,"dir":"Reference","previous_headings":"","what":"condor_session_info — condor_session_info","title":"condor_session_info — condor_session_info","text":"function saves session infos fcd object","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor_session_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"condor_session_info — condor_session_info","text":"","code":"condor_session_info(fcd = condor)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor_session_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"condor_session_info — condor_session_info","text":"fcd flow cytometry dataset","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor_session_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"condor_session_info — condor_session_info","text":"fcd sessionInfo sztored extras","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/condor_session_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"condor_session_info — condor_session_info","text":"condor_session_info","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"confusionMatrix — confusionMatrix","title":"confusionMatrix — confusionMatrix","text":"Calculate confusion matrix","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"confusionMatrix — confusionMatrix","text":"","code":"confusionMatrix(i = NULL, j = NULL)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"confusionMatrix — confusionMatrix","text":"j j","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"confusionMatrix — confusionMatrix","text":"Create confusion matrix","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"confusionMatrix — confusionMatrix","text":"confusionMatrix","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/confusionMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"confusionMatrix — confusionMatrix","text":"code function obtained R package ArchR (https://github.com/GreenleafLab/ArchR/blob/master/R/HelperUtils.R)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/corr_plot_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample-wise correlation of cell type proportions to compare manual gating and cyCONDOR. — corr_plot_comparison","title":"Sample-wise correlation of cell type proportions to compare manual gating and cyCONDOR. — corr_plot_comparison","text":"'corr_plot_comparison' performs sample-wise correlation cell type proportions obtained via manual gating via clustering cyCONDOR. result shown correlogram.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/corr_plot_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample-wise correlation of cell type proportions to compare manual gating and cyCONDOR. — corr_plot_comparison","text":"","code":"corr_plot_comparison(   condor_df,   flowjo_df,   sample_col,   method_corr = \"pearson\",   tl.cex = 1,   cl.cex = 1 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/corr_plot_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample-wise correlation of cell type proportions to compare manual gating and cyCONDOR. — corr_plot_comparison","text":"condor_df data frame containing cell type frequencies obtained via clustering annotation cyCONDOR. flowjo_df data frame containing cell type frequencies obtained via manual gating annotation (e.g. FlowJo). sample_col name column containing sample names. column name needs matching two data frames. method_corr correlation method used correlogram (default = \"pearson\"). tl.cex Numeric, size text label (variable names). cl.cex Numeric, text size number-label color-legend","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/corr_plot_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample-wise correlation of cell type proportions to compare manual gating and cyCONDOR. — corr_plot_comparison","text":"corr_plot_comparison","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/create_metaclustering_script.html","id":null,"dir":"Reference","previous_headings":"","what":"create_metaclustering_script — create_metaclustering_script","title":"create_metaclustering_script — create_metaclustering_script","text":"function created empty script assign metaclusters. Thanks @Lucas providing helpful peace code!","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/create_metaclustering_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_metaclustering_script — create_metaclustering_script","text":"","code":"create_metaclustering_script(num_clusters)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/create_metaclustering_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_metaclustering_script — create_metaclustering_script","text":"num_clusters (Numeric) number clusters assign.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/create_metaclustering_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_metaclustering_script — create_metaclustering_script","text":"create_metaclustering_script","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/create_metaclustering_script.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create_metaclustering_script — create_metaclustering_script","text":"create_metaclustering_script","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/df_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"df_frequency — df_frequency","title":"df_frequency — df_frequency","text":"function get dataframe frequencies","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/df_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"df_frequency — df_frequency","text":"","code":"df_frequency(   classification,   classification_header = \"classification\",   condition,   vertical = TRUE,   groups = NULL )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/df_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"df_frequency — df_frequency","text":"classification classification parameters. classification_header **optional** chosen header classification parameters, default = \"classification\". condition grouping used. vertical logical, FALSE frequency level classification, default = TRUE. groups ** optional ** vector selected groups display, default = .","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/df_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"df_frequency — df_frequency","text":"df_frequency","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/df_frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"df_frequency — df_frequency","text":"df_frequency","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/filter_fcd.html","id":null,"dir":"Reference","previous_headings":"","what":"filter_fcd — filter_fcd","title":"filter_fcd — filter_fcd","text":"Filters fcd according selected cell IDs","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/filter_fcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter_fcd — filter_fcd","text":"","code":"filter_fcd(fcd, cell_ids)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/filter_fcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter_fcd — filter_fcd","text":"fcd Flow cytometry dataset filtered. cell_ids Row names cells filtered, provided vector.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/filter_fcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter_fcd — filter_fcd","text":"function returns fcd filtered specified cell IDs.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/filter_fcd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"filter_fcd — filter_fcd","text":"filter_fcd","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_anova_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","title":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","text":"frequency_anova_test() performs independent measures Anova compare cell population frequencies three groups. Optionally, post-hoc testing performed using Emmeans test.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_anova_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","text":"","code":"frequency_anova_test(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   anova_p.adjust.method = \"bonferroni\",   numeric = F,   post_hoc_test = NULL,   post_hoc_p.adjust.method = \"bonferroni\",   anova_sig_threshold = 0.05,   print_results = T )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_anova_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable cell_anno defines sample IDs used. group_var string indicating variable cell_anno used group samples sample_var. group_var must three levels. anova_p.adjust.method p-value adjustment method use multiple test correction Anova tests, e.g \"bonferroni\"(default) \"BH\" (Benjamini-Hochberg). available options can checked documentation adjust_pvalue function package rstatix. numeric logical, TRUE numeric levels cluster_var ordered ascending order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. post_hoc_test string specifying post hoc test perform. Select \"tukey\" (balanced data required perform Tukey HSD test) \"emmeans\". default post-hoc test performed. post_hoc_p.adjust.method p-value adjustment method use post-hoc testing using \"emmeans\", e.g \"bonferroni\" (default). available options can checked documentation adjust_pvalue function package rstatix. anova_sig_threshold significance threshold Anova test. Anova tests adjusted p-value equal smaller threshold, post-hoc tests performed (default 0.05) print_results Logical, indicating test results printed console (TRUE) (FALSE).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_anova_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","text":"frequency_anova_test() returns fcd containing two data frames, \"anova\" \"annova_pht\". \"anova\" comprises results produced anova_test \"anova_pht\" contains results obtained emmeans_test. data frames one additional columns, \"cluster\", containing information, cell population tested. Results stored fcd extras$statistics.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_anova_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anova test to compare cell population frequencies of independent samples — frequency_anova_test","text":"frequency_anova_test frequency_anova_test() wrapper function around anova_test, tukey_hsd emmeans_test implemented package rstatix. function first calculates cell population frequencies sample sample_var. independent measures, one-way Anova test performed cell population followed p-value adjustment. post_hoc = T, post-hoc testing pairwise emmeans tests p-value correction performed significant Anova test.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_friedman_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","title":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","text":"frequency_friedman_test() performs Friedman Rank Sum test compare cell population frequencies three groups. Optionally, post-hoc testing performed using Wilcoxon Rank Sum test.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_friedman_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","text":"","code":"frequency_friedman_test(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   pair_var,   friedman_p.adjust.method = \"bonferroni\",   numeric = F,   post_hoc_test = F,   post_hoc_p.adjust.method = \"bonferroni\",   friedman_sig_threshold = 0.05,   print_results = T )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_friedman_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable cell_anno defines sample IDs used. group_var string indicating variable cell_anno used group samples sample_var. group_var must three levels. pair_var string indicating variable cell_anno used pair samples. friedman_p.adjust.method p-value adjustment method use multiple comparisons Friedman Rank Sum test, e.g \"bonferroni\" (default) \"BH\" (Benjamini-Hochberg). available options can checked documentation adjust_pvalue function package rstatix. numeric logical, TRUE numeric levels cluster_var ordered ascending order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. post_hoc_test logical, whether perform post-hoc testing (TRUE, default) (FALSE). post_hoc_p.adjust.method p-value adjustment method use post-hoc testing, e.g \"bonferroni\" (default). available options can checked documentation adjust_pvalue function package rstatix. friedman_sig_threshold significance threshold Friedman Rank Sum test. Friedman Rank Sum comparisons adjusted p-value equal smaller threshold, post-hoc tests performed (default 0.05) print_results Logical, indicating test results printed console (TRUE) (FALSE).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_friedman_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","text":"frequency_friedman_test returns fcd containing two data frames, \"friedman\" \"friedman_pht\". \"friedman\" comprises results produced friedman_test friedman_effsize \"friedman_pht\" contains results obtained wilcox_test. data frames one additional columns, \"cluster\", containing information, cell population tested. Results stored fcd extras$statistics.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_friedman_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Friedman Rank Sum test to compare cell population frequencies of paired samples — frequency_friedman_test","text":"frequency_friedman_test frequency_friedman_test() wrapper function around friedman_test,  friedman_effsize  wilcox_test implemented package rstatix. function first calculates cell population frequencies sample sample_var. Friedman Rank Sum test performed cell population followed p-value adjustment. post_hoc = T, post-hoc testing pairwise Wilcoxon Rank Sum Tests p-value correction performed significant Friedman Rank Sum test comparison.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_kruskal_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","title":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","text":"frequency_kruskal_test() performs Kruskal-Wallis Rank Sum test compare cell population frequencies three groups. Optionally, post-hoc testing performed using Dunne's test.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_kruskal_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","text":"","code":"frequency_kruskal_test(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   kruskal_p.adjust.method = \"bonferroni\",   post_hoc_test = T,   post_hoc_p.adjust.method = \"bonferroni\",   kruskal_sig_threshold = 0.05,   numeric = F,   print_results = T )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_kruskal_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable cell_anno defines sample IDs used. group_var string indicating variable cell_anno used group samples sample_var. group_var must three levels. kruskal_p.adjust.method p-value adjustment method use multiple comparisons Kruskal-Wallis test, e.g \"bonferroni\" (default) \"BH\" (Benjamini-Hochberg). available options can checked documentation adjust_pvalue function package rstatix. post_hoc_test logical, whether perform post-hoc testing (TRUE, default) (FALSE). post_hoc_p.adjust.method p-value adjustment method use post-hoc testing, e.g \"bonferroni\" (default). available options can checked documentation adjust_pvalue function package rstatix. kruskal_sig_threshold significance threshold Kruskal-Wallis test. Kruskal-Wallis comparisons adjusted p-value equal smaller threshold, post-hoc tests performed (default 0.05) numeric logical, TRUE numeric levels cluster_var ordered ascending order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. print_results Logical, indicating test results printed console (TRUE) (FALSE).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_kruskal_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","text":"frequency_kruskal_test() returns fcd conaining two data frames, \"kruskal\" \"kruskal_pht\". \"kruskal\" comprises results produced kruskal_test kruskal_effsize \"kruskal_pht\" contains results obtained dunn_test. data frames one additional columns, \"cluster\", containing information, cell population tested. Results stored fcd extras$statistics.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_kruskal_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kruskal-Wallis test to compare cell population frequencies — frequency_kruskal_test","text":"frequency_kruskal_test frequency_kruskal_test() wrapper function around kruskal_test,  kruskal_effsize  dunn_test implemented package *rstatix*. function first calculates cell population frequencies sample sample_var. Kruskal-Wallis rank sum test performed cell population followed p-value adjustment. post_hoc = T, post-hoc testing Dunne's Test p-value correction performed significant Kruskal-Wallis comparison.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_t_test.html","id":null,"dir":"Reference","previous_headings":"","what":"t-test to compare cell population frequencies — frequency_t_test","title":"t-test to compare cell population frequencies — frequency_t_test","text":"frequency_t_test() performs two-sided, two sample t-test cell type frequencies.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_t_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"t-test to compare cell population frequencies — frequency_t_test","text":"","code":"frequency_t_test(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   pair_var = NULL,   paired_test = F,   var.equal = F,   detailed = F,   p.adjust.method = \"bonferroni\",   numeric = F,   print_results = T )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_t_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"t-test to compare cell population frequencies — frequency_t_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable cell_anno defines sample IDs used. group_var string indicating variable cell_anno used group samples sample_var. group_var must exactly two levels. pair_var string indicating variable cell_anno defines pairing samples, e.g. donor ID, used paired_test = T. paired_test logical, indicating paired (TRUE) unpaired test (FALSE, default) performed. var.equal logical, indicating whether variance groups treated equal (TRUE) (FALSE, default). TRUE uses pooled variance, FALSE Welch approximation, see documentation t_test . detailed logical detailed output t_test reported. p.adjust.method p-value adjustment method use multiple comparison testing, e.g \"bonferroni\" (default) \"BH\" (Benjamini-Hochberg). available options can checked documentation adjust_pvalue function package rstatix. numeric logical, TRUE numeric levels cluster_var ordered ascending order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. print_results Logical, indicating test results printed console (TRUE) (FALSE).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_t_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"t-test to compare cell population frequencies — frequency_t_test","text":"frequency_t_test() returns fcd containing data frame produced t_test two additional columns, \"cluster\" containing information, cell population tested, \"applied_test\", indicating test used. Results stored fcd extras$statistics.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_t_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"t-test to compare cell population frequencies — frequency_t_test","text":"frequency_t_test frequency_t_test() wrapper function around t_test() implemented package rstatix. function first calculates cell population frequencies sample sample_var. , two-sided, two sample t-test performed two groups defined group_var. test can either run unpaired (two independent groups) paired. Afterwards,  p-value adjustment performed across comparisons made.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_wilcox_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","title":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","text":"frequency_wilcox_test() performs two-sided, two-sample Wilcoxon Rank Sum test (independent) Wilcoxon Signed Rank test (paired data) cell type frequencies.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_wilcox_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","text":"","code":"frequency_wilcox_test(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   pair_var = NULL,   paired_test = F,   p.adjust.method = \"bonferroni\",   detailed = F,   numeric = F,   print_results = T )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_wilcox_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable  cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable  cell_anno defines sample IDs used. group_var string indicating variable  cell_anno used group samples sample_var. group_var must exactly two levels. pair_var string indicating variable  cell_anno defines pairing samples, e.g. donor ID, used paired_test = T. paired_test logical, indicating paired (TRUE) unpaired test (FALSE, default) performed. p.adjust.method p-value adjustment method use multiple comparison testing, e.g \"bonferroni\" (default) \"BH\" (Benjamini-Hochberg). available options can checked documentation adjust_pvalue function package rstatix. detailed logical detailed output wilcox_test reported. numeric logical, TRUE numeric levels cluster_var ordered ascending order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. print_results Logical, indicating test results printed console (TRUE) (FALSE).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_wilcox_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","text":"frequency_wilcox_test returns fcd containing data frame produced wilcox_test two additional columns, \"cluster\" containing information, cell population tested, \"applied_test\", indicating test used. Results stored fcd extras$statistics.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/frequency_wilcox_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wilcoxon test to compare cell population frequencies — frequency_wilcox_test","text":"frequency_wilcox_test frequency_wilcox_test() wrapper function around wilcox_test() function implemented package rstatix. function first calculates cell population frequencies sample sample_var. two-sided, two sample wilcoxon test performed two groups defined group_var. test can either run unpaired (two independent groups) paired. Afterwards,  p-value adjustment performed across comparisons made.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/getTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary values — getTable","title":"Get summary values — getTable","text":"getTable() can used generate frequently used parameters cell populations defined clustering prediction, considering meta variable grouping. can produce cell numbers (counts), cell population frequencies well median mean marker expression group cell population combination.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/getTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary values — getTable","text":"","code":"getTable(   fcd,   output_type = \"frequency\",   expr_slot = \"orig\",   cluster_slot,   cluster_var,   group_var,   numeric = F )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/getTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary values — getTable","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR output_type type parameter reported table. One following option needs selected: \"counts\" : gives cell numbers per group_var cell population \"frequency\" : returns proportion cell population level group_var (default) \"median\": calculates median expression group_var cell population combination available feature expression matrix \"mean\": calculates mean expression group_var cell population combination available feature expression matrix expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). group_var string indicating variable name cell_anno used group output, e.g. group sample ID. numeric logical, TRUE numeric levels cluster_var ordered increasing order \"Cluster_\" pasted number, FALSE alphabetical ordering applied.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/getTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary values — getTable","text":"getTable() returns data frame parameters columns observations rows. case output_type \"counts\" \"frequency\", counts frequencies cell population (columns) reported one row level group_var. Given output_type \"mean\" \"median\", aggregated expression feature (columns) reported group_var cell population combination (cluster).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/getTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get summary values — getTable","text":"getTable","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"harmonize_PCA — harmonize_PCA","title":"harmonize_PCA — harmonize_PCA","text":"Harmonize Principal Components previously calculated runPCA defined batch variable (batch_var).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harmonize_PCA — harmonize_PCA","text":"","code":"harmonize_PCA(fcd, data_slot = \"orig\", batch_var, seed = 91, prefix = NULL)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harmonize_PCA — harmonize_PCA","text":"fcd flow cytometry dataset. data_slot name PCA data slot use harmonization. prefix added , orig. batch_var vector column names fcd$anno$cell_anno use correcting data. seed seed set reproducibility. prefix Prefix output.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harmonize_PCA — harmonize_PCA","text":"function returns fcd harmonized Principal Components based HarmonyMatrix. prefix added, harmonized PCs saved fcd$pca$norm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_PCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"harmonize_PCA — harmonize_PCA","text":"harmonize_PCA See [Korunsky et al., 2019](https://doi.org/10.1038/s41592-019-0619-0) details Harmony algorithm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_intensities.html","id":null,"dir":"Reference","previous_headings":"","what":"harmonize_intensities — harmonize_intensities","title":"harmonize_intensities — harmonize_intensities","text":"Harmonize expression values defined batch variable (batch_var).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_intensities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"harmonize_intensities — harmonize_intensities","text":"","code":"harmonize_intensities(fcd, batch_var, seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_intensities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"harmonize_intensities — harmonize_intensities","text":"fcd flow cytometry dataset. batch_var vector column names fcd$anno$cell_anno use correcting data. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_intensities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"harmonize_intensities — harmonize_intensities","text":"function returns fcd harmonized expression data frame based HarmonyMatrix. harmonized expression data frame saved fcd$expr$norm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/harmonize_intensities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"harmonize_intensities — harmonize_intensities","text":"harmonize_intensities See [Korunsky et al., 2019](https://doi.org/10.1038/s41592-019-0619-0) details Harmony algorithm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/learnUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"learnUMAP — learnUMAP","title":"learnUMAP — learnUMAP","text":"Projects new samples UMAP calculated previously reference data set parameters new sample. executing function, runUMAP needs run ret_model = TRUE reference data set.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/learnUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"learnUMAP — learnUMAP","text":"","code":"learnUMAP(   fcd,   input_type,   data_slot,   nPC = ncol(fcd[[input_type]][[data_slot]]),   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE,   fcd_model,   nEpochs = 100,   prefix = NULL,   nThreads = 32,   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/learnUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"learnUMAP — learnUMAP","text":"fcd Flow cytometry dataset UMAP coordinates predicted. input_type Data use calculation UMAP, e.g. expr pca. used calculating UMAP reference data set. data_slot Name input_type data slot use e.g. orig, prefix added. used calculating UMAP reference data set. nPC Number PCs used UMAP Projection. Default = . number PCs used calculating UMAP reference data set. Check UMAP name reference data set e.g. using fcd_model$umap$your_umap_name. markers Vector marker names include exclude UMAP projection according discard parameter. markers used calculating UMAP reference data set. Use function used_markers check markers used calculate UMAP fcd_model.  . discard LOGICAL decide markers specified included, \"F\", excluded, \"T\", UMAP projection. Default = F. fcd_model Flow cytometry reference data set containing data associated existing embedding fcd_model$extras. nEpochs Number epochs use optimization embedded coordinates. value 30 - 100 reasonable trade speed thoroughness. default, value set one third number epochs used build model. prefix Prefix name dimensionality reduction. nThreads Number threads use, (except stochastic gradient descent). default nThreads = 32. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/learnUMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"learnUMAP — learnUMAP","text":"learnUMAP() returns fcd predicted UMAP coordinates saved fcd$umap$expr_orig, prefix set.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/learnUMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"learnUMAP — learnUMAP","text":"learnUMAP learnUMAP() uses umap_transform project new samples contained fcd embedding previously calculated reference data set, fcd_model, using runUMAP.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/marker_wilcox_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression testing on cell level — marker_wilcox_test","title":"Differential expression testing on cell level — marker_wilcox_test","text":"EXPERIEMTAL FEATURE, advise using yet suggest look Vignette \"Differential Analysis\" options. marker_wilcox_test() performes Wilcoxon Rank Sum Test two groups cells marker cell population combination.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/marker_wilcox_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression testing on cell level — marker_wilcox_test","text":"","code":"marker_wilcox_test(   fcd,   cluster_slot,   cluster_var,   group_var,   group1,   group2,   p.adjust.method = \"BH\",   marker = NULL,   min_cells_per_group = 10 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/marker_wilcox_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression testing on cell level — marker_wilcox_test","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). group_var string indicating variable name cell_anno used grouping variable. grouping variable needs two groupss group1 string indicating group level group_var used select cells group 1 group2 string indicating group level group_var used select cells group 2 p.adjust.method p-value adjustment method use multiple comparison testing, e.g \"BH\" (Benjamini-Hochberg, default) \"bonferroni\". available options can checked documentation adjust_pvalue function package rstatix. marker (optional) vector character strings indicating features expression expr_slot considered testing. default, features tested. min_cells_per_group Minimum number cells per group required include cell population differential testing.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/marker_wilcox_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential expression testing on cell level — marker_wilcox_test","text":"data frame containing test results marker cell population combination - one combination per row. cluster : cell population tested marker : feature expression data tested group1 : group name (level) group 1 group2 : group name (level) group 2 n1 / n2 : absolute cell counts group 1 (n1) group 2 (n2) mean1 / mean2 : mean marker expression group 1 (mean1) group 2 (mean2) p : p-value p.adj : adjusted p-value. delta_mean : delta mean1 mean2","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/marker_wilcox_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression testing on cell level — marker_wilcox_test","text":"marker_wilcox_test function marker_wilcox_test() compares two groups cells marker-cell population combination. Expression values extracted expr_slot \"orig\", containing transformed data. case group_var two levels, dataset subsetted two levels specified group1 group2. Wilcoxon Rank Sum Test performed using wilcox.test implemented stats package. Afterwards p-value adjustment performed considering comparisons made.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/measured_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"measured_markers — measured_markers","title":"measured_markers — measured_markers","text":"returns vector markers fcd$expr$orig.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/measured_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"measured_markers — measured_markers","text":"","code":"measured_markers(fcd)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/measured_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"measured_markers — measured_markers","text":"fcd flow cytometry dataset.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/measured_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"measured_markers — measured_markers","text":"function returns vector containing markers present fcd.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/measured_markers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"measured_markers — measured_markers","text":"measured_markers","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/merge_condor.html","id":null,"dir":"Reference","previous_headings":"","what":"merge_condor — merge_condor","title":"merge_condor — merge_condor","text":"Merges two flow cytometry datasets.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/merge_condor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"merge_condor — merge_condor","text":"","code":"merge_condor(data1, data2)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/merge_condor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"merge_condor — merge_condor","text":"data1 flow cytometry dataset 1 merge. data2 flow cytometry dataset 2 merge.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/merge_condor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"merge_condor — merge_condor","text":"function returns merged flow cytometry dataset comprised cells data1 data2.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/merge_condor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"merge_condor — merge_condor","text":"merge_condor cell IDs data1 data2 doubled, merging performed.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/metaclustering.html","id":null,"dir":"Reference","previous_headings":"","what":"metaclustering — metaclustering","title":"metaclustering — metaclustering","text":"Assignment metacluster names existing clustering.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/metaclustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metaclustering — metaclustering","text":"","code":"metaclustering(   fcd,   cluster_slot,   cluster_var,   cluster_var_new = \"metacluster\",   metaclusters )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/metaclustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metaclustering — metaclustering","text":"fcd flow cytometry data set, subjected clustering cyCONDOR. cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var variable name cluster_slot contains original cluster labels. cluster_var_new column name used store newly assigned cluster labels. metaclusters named vector original cluster labels names corresponding new labels value, e.g. case cluster 1 corresponds T cells cluster 2 monocytes use: c(\"1\" = \"Tcells\", \"2\" = \"Monocytes\")","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/metaclustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"metaclustering — metaclustering","text":"function adds new column name given cluster_var_new selected cluster_slot. column contains new cluster labels (factors) based name value pairs metaclusters.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/metaclustering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"metaclustering — metaclustering","text":"metaclustering correctly set metaclusters vector, cluster_var needs factor (default clustering cyCONDOR). Additionally, names metaclusters vector need order levels factor cluster_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_confusion_HM.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_confusion_HM — plot_confusion_HM","title":"plot_confusion_HM — plot_confusion_HM","text":"plot_confusion_HM() generates heatmap showing contribution group_var cell population normalizing levels group_var cell numbers.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_confusion_HM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_confusion_HM — plot_confusion_HM","text":"","code":"plot_confusion_HM(   fcd,   cluster_slot,   cluster_var,   group_var,   numeric = FALSE,   size = 15,   title = \"Confusion matrix\",   cluster_cols = FALSE,   cluster_rows = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_confusion_HM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_confusion_HM — plot_confusion_HM","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used calculate confusion. group_var string indicating variable name cell_anno used calculate relative contribution variable specified cluster_var. numeric logical, indicating levels cluster_var ordered ascending numerical order. size size individual squares font title character string, title plot. cluster_cols logical indicating columns clustered (default: FALSE) cluster_rows logical indicating rows clustered (default: FALSE)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_confusion_HM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_confusion_HM — plot_confusion_HM","text":"plot_confusion_HM() first calculates cell counts combination group_var cell population normalizes counts total 1000 cells per group_var. Afterwards percentage cells coming level group_var calculated per cell population. normalization counts corrects visualization differences total cells (events) measured per group_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_confusion_HM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_confusion_HM — plot_confusion_HM","text":"plot_confusion_HM","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_counts_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"bar chart of cell population counts — plot_counts_barplot","title":"bar chart of cell population counts — plot_counts_barplot","text":"plot_counts_barplot() plots cell population counts level group_var bar plot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_counts_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bar chart of cell population counts — plot_counts_barplot","text":"","code":"plot_counts_barplot(   fcd = condor,   cluster_slot,   cluster_var,   group_var,   facet_var = NULL,   facet_by_clustering = F,   facet_ncol = NULL,   color_palette = cluster_palette,   title = \"Counts\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_counts_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bar chart of cell population counts — plot_counts_barplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). group_var string indicating variable name cell_anno defines grouping variable used (x-axis), e.g. group sample ID. facet_var (optional) string indicating variable name cell_anno used group levels group_var via faceting. facet_by_clustering logical, set TRUE, plot faceted cell populations specified cluster_var. set FALSE faceting population applied (default). , facet_var facet_by_clustering used plot faceted using applying facet_grid. facet_ncol numeric, indicating many columns faceted plot , either facet_var Facet_by_clustering used. color_palette vector colors used fill bar chart plots title title plot, default \"Counts\"","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_counts_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bar chart of cell population counts — plot_counts_barplot","text":"plot_counts_barplot() returns plot showing cell numbers per cell population level group_var. plot faceted another variable, provided facet_var cell population, depending facet_by_clustering.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_counts_barplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bar chart of cell population counts — plot_counts_barplot","text":"plot_counts_barplot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_density.html","id":null,"dir":"Reference","previous_headings":"","what":"dimensionality reduction plot with density distribution — plot_dim_density","title":"dimensionality reduction plot with density distribution — plot_dim_density","text":"plot_dim_density() plots density distribution level grouping variable top dimensionality reduction plot. moment, UMAP visualization supported","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dimensionality reduction plot with density distribution — plot_dim_density","text":"","code":"plot_dim_density(   fcd,   reduction_method = \"umap\",   reduction_slot,   group_var,   title = \"\",   dot_size = 0.1,   alpha = 0.2,   color_density = c(\"Blues\", \"Oranges\", \"Reds\") )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dimensionality reduction plot with density distribution — plot_dim_density","text":"fcd flow cytometry data set comprising dimensionality reduction calculated cyCONDOR. reduction_method string specifying dimensionality reduction method use. moment, \"umap\" supported. reduction_slot string specifying reduction name reduction_method use visualization, e.g. \"pca_orig\". group_var string indicating variable name cell_anno density distribution plotted level group_var. title character string, title plot dot_size size background dots. alpha transparency background dots. color_density vector strings indicating color palette RColorBrewer used density gradient. names vector using levels group_var allows assignment specific color group level. vector names, entries assigned groups alphabetic order color palettes reused vector less colors levels group_var","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dimensionality reduction plot with density distribution — plot_dim_density","text":"Density Plot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dimensionality reduction plot with density distribution — plot_dim_density","text":"plot_dim_density","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_red.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality reduction dotplot — plot_dim_red","title":"Dimensionality reduction dotplot — plot_dim_red","text":"plot_dim_red() generates dotplot coordinates dimensionality reduction performed condor object. plot can colored variable numeric (e.g. expression) categorical (e.g. clustering/metadata).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_red.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality reduction dotplot — plot_dim_red","text":"","code":"plot_dim_red(   fcd,   expr_slot = NULL,   reduction_method,   reduction_slot,   cluster_slot = NULL,   add_pseudotime = FALSE,   pseudotime_slot,   param,   order = FALSE,   title = \"Dimensionality Reduction Plot\",   limX = NULL,   limY = NULL,   dot_size = 0.1,   alpha = 0.2,   color_discrete = cluster_palette,   color_gradient = colors,   remove_guide = FALSE,   facet_by_variable = FALSE,   label_clusters = FALSE,   label_size = 3.5,   label_color = \"black\",   raster = FALSE,   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_red.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality reduction dotplot — plot_dim_red","text":"fcd flow cytometry data set, subjected dimensionality reduction cyCONDOR. expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. reduction_method string specifying dimensionality reduction method use (\"umap\", \"tSNE\", \"diffmap\", \"pca\"). reduction_slot string specifying reduction name reduction_method use visualization, e.g. \"pca_orig\". cluster_slot string specifying clustering slot use find variable specified cluster_var. add_pseudotime Logical, plot colored pseudotime. pseudotime_slot string specifying pseudotime name use visualization. param parameter visualize plot, can either continuous variable categorical one, function react differently accordingly. order logical want order dots plot, expression example. can help find small populations positive cells. set FALSE, plotting order cells randomized. title title plot. limX limits x axes (e.g. c(-1, 7)). limY limits y axes (e.g. c(-1, 7)). dot_size size dots. alpha transparency dots. color_discrete colors discrete parameters, must provided vector length number factors `param`. color_gradient colors continuous parameters. remove_guide logical, want remove guide. facet_by_variable option facet plot variable, FALSE plot faceted, TRUE plot faceted `param` variable. variable provided (e.g. \"group\") plot faceted variable. label_clusters logical: clusters labeled text box. label_size size labels. label_color color labels. raster TRUE FALSE, plot returned raster image, option lowers quality plot makes easier work images high number cells. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_red.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality reduction dotplot — plot_dim_red","text":"plot marker list markers","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_dim_red.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimensionality reduction dotplot — plot_dim_red","text":"plot_dim_red","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"bar chart of cell population frequencies — plot_frequency_barplot","title":"bar chart of cell population frequencies — plot_frequency_barplot","text":"plot_frequency_barplot() plots cell population frequencies level group_var stacked barplot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bar chart of cell population frequencies — plot_frequency_barplot","text":"","code":"plot_frequency_barplot(   fcd = condor,   cluster_slot,   cluster_var,   group_var,   facet_var = NULL,   color_palette = cluster_palette,   title = \"Frequency\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bar chart of cell population frequencies — plot_frequency_barplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). group_var string indicating variable name cell_anno defines grouping variable used (x-axis), e.g. group sample ID. facet_var (optional) string indicating variable name cell_anno used group levels group_var via faceting. color_palette vector colors used fill bar chart plots title title plot, default \"Frequency\"","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bar chart of cell population frequencies — plot_frequency_barplot","text":"plot_frequency_barplot returns plot showing cell population frequencies level group_var. plot faceted another variable, provided facet_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_barplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bar chart of cell population frequencies — plot_frequency_barplot","text":"plot_frequency_barplot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"box plot of cell population frequencies — plot_frequency_boxplot","title":"box plot of cell population frequencies — plot_frequency_boxplot","text":"plot_frequency_boxplot() plots cell population frequencies samples grouped group_var boxplots.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"box plot of cell population frequencies — plot_frequency_boxplot","text":"","code":"plot_frequency_boxplot(   fcd,   cluster_slot,   cluster_var,   sample_var,   group_var,   groups_to_show = NULL,   numeric = F,   color_palette = cluster_palette,   dot_size = 2,   statistics = F,   sig_label = \"p.adj.signif\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"box plot of cell population frequencies — plot_frequency_boxplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). sample_var string indicating variable name cell_anno defines sample IDs used. group_var string indicating variable name cell_anno used group samples sample_var groups_to_show vector strings indicating levels group_var included plotting. default groups plotted. numeric logical, TRUE numeric levels cluster_var ordered increasing order \"Cluster_\" pasted number, FALSE alphabetical ordering applied. color_palette vector colors used fill box plots dot_size Size dots. statistics optional string indicating statistics displayed plot. Currently, \"wilcox\", \"t_test\" \"diffcyt\" accepted input. statistics displayed, set FALSE. sig_label string indicating significance indicated: \"p.adj\" numerical adjusted p-value, \"p.adj.signif\" asteriks.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"box plot of cell population frequencies — plot_frequency_boxplot","text":"plot_frequency_boxplots() returns list boxplots, element list contains plot one cell population.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_frequency_boxplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"box plot of cell population frequencies — plot_frequency_boxplot","text":"plot_frequency_boxplot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_HM.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of scaled expression by cell population — plot_marker_HM","title":"Heatmap of scaled expression by cell population — plot_marker_HM","text":"plot_marker_HM() generates heatmap scaled mean marker expression cell population.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_HM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of scaled expression by cell population — plot_marker_HM","text":"","code":"plot_marker_HM(   fcd,   expr_slot = \"orig\",   marker_to_exclude = NULL,   cluster_slot,   cluster_var,   cluster_rows = FALSE,   cluster_cols = FALSE,   maxvalue = NULL,   size = 10,   title = \"Heatmap of scaled expression\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_HM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of scaled expression by cell population — plot_marker_HM","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. marker_to_exclude (optional) vector characters indicating features expression matrix included heatmap. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_rows logical indicating heatmap rows clustered (default: FALSE). cluster_cols logical indicating heatmap columns clustered (default: FALSE). maxvalue max value coloring (default: NULL, automatically defined). size size individual squares font. title character string, title plot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_HM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of scaled expression by cell population — plot_marker_HM","text":"heatmap scaled mean expression, depicting markers rows cell populations columns.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_HM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap of scaled expression by cell population — plot_marker_HM","text":"plot_marker_HM","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"plot box plots of marker median or mean — plot_marker_boxplot","title":"plot box plots of marker median or mean — plot_marker_boxplot","text":"plot_marker_boxplot() generates faceted box plots aggregated expression per sample grouped grouping interest marker-cluster combination.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot box plots of marker median or mean — plot_marker_boxplot","text":"","code":"plot_marker_boxplot(   fcd,   marker = NULL,   expr_slot = \"orig\",   cluster_slot = \"Phenograph_pca_orig_k_60\",   cluster_var = \"metaclusters\",   cluster_to_show = NULL,   group_var,   sample_var,   fun = \"median\",   facet_by_clustering = F,   facet_ncol = 5,   color_palette = cluster_palette,   dot_size = 2 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot box plots of marker median or mean — plot_marker_boxplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR marker marker provided expr_slot included plotting. default features plotted. expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_to_show vector characters indicating levels cluster_var included plotting. default groups plotted. group_var string indicating variable name cell_anno used group samples sample_var sample_var string indicating variable name cell_anno defines sample IDs used. fun string indicating aggregation expression performed sample. Needs one \"median\" (default) \"mean\". facet_by_clustering logical indicating structure faceting plot. set FALSE (default) plot faceted markers clusters (cell populations) shown x-axis. set TRUE, way around. facet_ncol Number columns used faceting. color_palette vector colors used fill box plots. dot_size numeric indicating size dots.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot box plots of marker median or mean — plot_marker_boxplot","text":"faceted ggplot showing box plots aggregated expression per sample grouped group_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_boxplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot box plots of marker median or mean — plot_marker_boxplot","text":"plot_marker_boxplot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_density.html","id":null,"dir":"Reference","previous_headings":"","what":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","title":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","text":"plot_marker_density() plots density distribution expression cell populations. line indicates distribution one level group_var.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","text":"","code":"plot_marker_density(   fcd,   marker,   expr_slot = \"orig\",   cluster_slot,   cluster_var,   cluster_to_show = NULL,   group_var,   facet_var = NULL,   facet_ncol = 5,   color_palette = cluster_palette )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR marker vector characters indicating features expression matrix plotted. expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_to_show (optional) vector strings indicating levels cluster_var included plotting. group_var string indicating variable name cell_anno density distributions get calculated. facet_var (optional) string indicating variable name cell_anno used facet plots meta variable. facet_ncol numeric, number columns used faceting. color_palette vector colors used color density lines","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","text":"plot_marker_density() returns either one plot case one marker provided via marker argument list plots, several markers requested.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"density plot of marker expression in cell populations grouped by a meta variable — plot_marker_density","text":"plot_marker_density density plots plotted default parameters ggplot2's geom_density.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_dotplot.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_marker_dotplot — plot_marker_dotplot","title":"plot_marker_dotplot — plot_marker_dotplot","text":"plot_marker_dotplot() generates classical scatter plot two markers","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_dotplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_marker_dotplot — plot_marker_dotplot","text":"","code":"plot_marker_dotplot(   fcd,   expr_slot = \"orig\",   marker_x,   marker_y,   cluster_slot,   cluster_var,   cluster_to_show = NULL,   group_var = NULL,   order = F,   seed = 91,   color_palette = cluster_palette,   dot_size = 2,   title = \"\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_dotplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_marker_dotplot — plot_marker_dotplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. marker_x marker name expr slot transformed expression shown x-axis. marker_y marker name expr slot transformed expression shown y-axis. cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_to_show (optional) vector characters indicating levels cluster_var included plotting. default groups plotted. group_var (optional) string indicating variable name cell_anno used color dots plot. used, dots clustered cluster_var. order logical want order dots plot variable used coloring (TRUE). set FALSE (default), order cells randomized. seed seed set reproducibility plotting result. color_palette vector colors used color dots. dot_size numeric indicating size dots. title Title plot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_dotplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_marker_dotplot — plot_marker_dotplot","text":"function returns scatter plot two features available expression matrix. default, dots colored cell population label provided cluster_var. coloring metadata wanted instead, group_var can defined. , selection levels available cluster_var included plotting, vector labels interest can provided cluster_to_show argument.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_dotplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_marker_dotplot — plot_marker_dotplot","text":"plot_marker_dotplot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_group_HM.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","title":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","text":"plot_marker_group_HM() generates heatmap scaled mean marker expression cell population split grouping variable.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_group_HM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","text":"","code":"plot_marker_group_HM(   fcd,   expr_slot = \"orig\",   marker_to_exclude = NULL,   cluster_slot,   cluster_var,   group_var,   maxvalue = NULL,   size = 10,   title = \"Heatmap of scaled expression\" )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_group_HM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. marker_to_exclude (optional) vector characters indicating features expression matrix included heatmap. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). group_var string indicating variable name cell_anno used subgrouping cell population. maxvalue max value coloring (default: NULL, automatically defined). size size individual squares font. title character string, title plot","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_group_HM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","text":"heatmap scaled mean expression, depicting markers rows cell populations grouped grouping variable columns.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_group_HM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap of scaled expression to compare two groups — plot_marker_group_HM","text":"plot_marker_group_HM","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_ridgeplot.html","id":null,"dir":"Reference","previous_headings":"","what":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","title":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","text":"plot_marker_ridgeplot() plots expression selected markers ridgeline plots cell populations.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_ridgeplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","text":"","code":"plot_marker_ridgeplot(   fcd,   marker,   expr_slot = \"orig\",   cluster_slot,   cluster_var,   cluster_to_show = NULL,   color_palette = cluster_palette,   alpha = 1 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_ridgeplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR marker vector characters indicating features expression matrix plotted. expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_to_show (optional) vector strings indicating levels cluster_var included plotting. color_palette vector colors used fill density distributions. alpha numeric, adjust alpha used fill color density distributions.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_ridgeplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","text":"plot_marker_ridgeplot() returns either one plot case one marker provided via marker argument list plots, several markers requested.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_ridgeplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ridgeline plot of marker expression in cell populations — plot_marker_ridgeplot","text":"plot_marker_ridgeplot ridgeline plots plotted default parameters ggridges's geom_density_ridges","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_violinplot.html","id":null,"dir":"Reference","previous_headings":"","what":"violin plot of marker expression in cell populations — plot_marker_violinplot","title":"violin plot of marker expression in cell populations — plot_marker_violinplot","text":"plot_marker_violinplot() plots expression selected markers violin plots cell populations.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_violinplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"violin plot of marker expression in cell populations — plot_marker_violinplot","text":"","code":"plot_marker_violinplot(   fcd,   marker,   expr_slot = \"orig\",   cluster_slot,   cluster_var,   cluster_to_show = NULL,   group_var = NULL,   color_palette = cluster_palette )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_violinplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"violin plot of marker expression in cell populations — plot_marker_violinplot","text":"fcd flow cytometry data set, subjected clustering cell type label prediction cyCONDOR marker vector characters indicating features expression matrix plotted. expr_slot expr_slot take marker expression values, default \"orig\". Corrected input data handled cautiously. cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). cluster_to_show vector strings indicating levels cluster_var included plotting. group_var (optional) string indicating variable name cell_anno used split violin plots. color_palette vector colors used fill violin plots, group_var used","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_violinplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"violin plot of marker expression in cell populations — plot_marker_violinplot","text":"plot_marker_violinplot() returns either one plot case one marker provided via marker argument list plots, several markers requested.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/plot_marker_violinplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"violin plot of marker expression in cell populations — plot_marker_violinplot","text":"plot_marker_violinplot violin plots plotted default parameters ggplot2's geom_violin horizontal lines indicate median.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict clinical classification. — predict_classifier","title":"Predict clinical classification. — predict_classifier","text":"function uses model trained *train_classifier_model* predict clinical classification new samples. function uses *CytoDx* framework.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict clinical classification. — predict_classifier","text":"","code":"predict_classifier(   fcd,   input_type,   data_slot,   sample_names = \"expfcs_filename\",   model_object,   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict clinical classification. — predict_classifier","text":"fcd flow cytometry data set. input_type data use calculation, e.g. \"expr\" (suggested option). data_slot Name data slot use classification, suggested options \"orig\" \"norm\". sample_names Column name metadata table containing file names. model_object flow cytometry data set stored classifier model. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict clinical classification. — predict_classifier","text":"predict_classifier","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_classifier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict clinical classification. — predict_classifier","text":"Predict Clinical Classifier `predict_classifier()` wrapper function around CytoDx.pred implemented package *CytoDx*. user can specify parameters available CytoDx.pred functions, arguments description copied documentation *CytoDx* package. function output *condor* object including predicted labels *extras* slot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"predict_labels — predict_labels","title":"predict_labels — predict_labels","text":"Uses model generated train_transfer_model predict labels new samples.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict_labels — predict_labels","text":"","code":"predict_labels(   fcd,   input_type,   data_slot,   fcd_model,   label = \"predicted_labels\",   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict_labels — predict_labels","text":"fcd flow cytometry dataset. input_type data use calculation UMAP, e.g. \"expr\" \"pca\". data_slot name PCA data slot use harmonize. prefix added , orig. fcd_model flow cytometry dataset containing Caret model label transfer. label Label output column condor object saved clustering slot fcd. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict_labels — predict_labels","text":"predict_labels","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/predict_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict_labels — predict_labels","text":"predict_labels","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prepInputDiffcyt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a condor object to se object — prepInputDiffcyt","title":"Convert a condor object to se object — prepInputDiffcyt","text":"prepInputDiffcyt() converts fcd object SummarizedExperiment object compatible diffcyt functions calcCounts calcMedians.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prepInputDiffcyt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a condor object to se object — prepInputDiffcyt","text":"","code":"prepInputDiffcyt(   fcd,   cluster_slot,   cluster_var,   sample_var,   meta_vars,   marker_state = NULL,   marker_type = NULL )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prepInputDiffcyt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a condor object to se object — prepInputDiffcyt","text":"fcd flow cytometry dataset, subjected clustering cell type label prediction cyCONDOR cluster_slot string specifying clustering slot use find variable specified cluster_var cluster_var string specifying variable cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels) sample_var Charlotte meta_vars vector variables cell_anno, contain sample level metadata, means sample ID associated exactly one level per variable. variables user wants use test design need listed, e.g. group, donor_id. Variables names \"sample_id\" \"cluster_id\" allowed, since names designated purposes diffcyt workflow. marker_state vector marker names get marker_class \"state\". markers provided marker_state marker_type available markers features expr data set \"type\". marker_type vector marker names available expr data, get marker_class \"type\". markers provided marker_state marker_type available markers features expr data get marker_class \"type\".","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prepInputDiffcyt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a condor object to se object — prepInputDiffcyt","text":"SummarizedExperiment object suitable used input diffcyt functions calcCounts calcMedians. object contains following components: metadata \"experiment_info\" : sample-level metadata table, containing variables provided meta_vars sample_var, whereby sample_var renamed \"sample_id\" metadata \"n_cells\" : number cells per sample_id assay \"exprs\" : contains expression data rowData : cell-level information, containing variables provided meta_vars, sample_var cluster_var, whereby sample_var renamed \"sample_id\" cluster_var tp \"cluster_id\" compatible diffcyt workflow. colData : marker information required diffcyt differential state analysis.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prepInputDiffcyt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a condor object to se object — prepInputDiffcyt","text":"prepInputDiffcyt function carry original transformed expression. flexible experimental design  diffcyt's testing functions allows include batch variables.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fcd.html","id":null,"dir":"Reference","previous_headings":"","what":"prep_fcd — prep_fcd","title":"prep_fcd — prep_fcd","text":"Loading transforming data create flow cytometry dataset FCS files analysis cyCONDOR workflow.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep_fcd — prep_fcd","text":"","code":"prep_fcd(   data_path,   max_cell,   useCSV = FALSE,   transformation = NULL,   remove_param = NULL,   anno_table,   filename_col,   seed = 91,   separator_anno = \",\",   separator_fc_csv = \",\",   simple_names = TRUE,   truncate_max_range = FALSE,   emptyValue = TRUE,   ignore.text.offset = FALSE,   verbose = FALSE,   cross_path_with_anno = FALSE,   cofactor = 5 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep_fcd — prep_fcd","text":"data_path Folder .fcs files .csv files stored. max_cell Number cells use file (set high number want use available events). useCSV Flag input .csv files .fcs (experimental). transformation Transformation perform. Select one following: \"auto_logi\" (autologicle, recommended flow cytometry data), \"arcsinh\" (arcsinh transformation cofactor 5), \"clr\" (centered-log-ratio) \"none\" (transformation). remove_param Parameters removed fcd, \"inTime\" kept. anno_table Path annotation table text file. annotation table contain one column file names .fcs .csv files read optionally additional columns sample information (e.g. \"sample_id\", \"condition\"). filename_col Name column anno_table containing file name matching .fcs/.csv files. seed seed set reproducibility. separator_anno Separator used annotation file, default separator_anno = \",\". separator_fc_csv Separator used cytometry data .csv files, default separator_anno = \",\". simple_names TRUE channel description used name column, FALSE channel name description pasted together. truncate_max_range FlowCore: logical type. Default FALSE. can optionally turned avoid truncating extreme positive value instrument measurement range ..e.'$PnR'. emptyValue FlowCore: boolean indicating whether allow empty value keyword values TEXT segment. affects double delimiters treated. TRUE, double delimiters parsed pair start end single delimiter empty value. Otherwise, double delimiters parsed one part string keyword value. default TRUE. ignore.text.offset FlowCore: whether ignore keyword values TEXT segment agree HEADER. Default FALSE, throws error discrepancy found. User can turn ignore TEXT segment sure accuracy HEADER file still can read. verbose Default FALSE, TRUE file loaded something printed screen. cross_path_with_anno Defautl FALSE. TRUE 'data_path' contains files annotation table overlap loaded. cofactor cofactor used 'arcsinh' transformation, default 5, can set 150 HDFC data.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prep_fcd — prep_fcd","text":"object class 'flow cytometry dataframe' (fcd) returned. prep_fcd","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fcd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prep_fcd — prep_fcd","text":"prep_fcd prep_fcd wrapper function read files, subset max_cell, transform data create 'flow cytometry dataframe' (fcd).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fjw.html","id":null,"dir":"Reference","previous_headings":"","what":"Read FlowJo Workspace — prep_fjw","title":"Read FlowJo Workspace — prep_fjw","text":"Loading transforming data create flow cytometry dataset Gate Set object analysis cyCONDOR workflow. prep_fjw takes gate set object input returns fcd FlowJo gating information saved fcd$anno$cell_anno.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fjw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read FlowJo Workspace — prep_fjw","text":"","code":"prep_fjw(   data_gs,   inverse.transform = FALSE,   transformation = NULL,   remove_param = NULL,   merge_anno = FALSE,   anno_table = NULL,   separator_anno = \",\",   filename_col = NULL )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fjw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read FlowJo Workspace — prep_fjw","text":"data_gs Gate Set object, e.g. created using open_flowjo_xml flowjo_to_gatingset CytoML package. inverse.transform Logical: data reverse transformed kept FlowJo transformation (default = FALSE). transformation inverse.transform = TRUE, type new transformation perform. Select one following: \"auto_log\" (autologicle, recommended flow cytometry data), \"arcsinh\" (arcsinh transformation), \"clr\" (centered-log-ratio) \"none\" (transformation). remove_param Parameters removed fcd. merge_anno Logical: sample anno merged fcd. anno_table merge_anno = TRUE, path annotation table text file. annotation table contain one column file names .fcs .csv files read optionally additional columns sample information (e.g. \"sample_id\", \"condition\"). separator_anno Separator used annotation file, default separator_anno = \",\". filename_col Name column anno_table containing file name matching .fcs files.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fjw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read FlowJo Workspace — prep_fjw","text":"object class 'flow cytometry dataframe' (fcd) returned. read_flowjo_workspace","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/prep_fjw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read FlowJo Workspace — prep_fjw","text":"Read FlowJo workspace","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"read_data — read_data","title":"read_data — read_data","text":"Load .fcs .csv files dataframe prepare condor object.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_data — read_data","text":"","code":"read_data(   data_path,   max_cells,   useCSV,   separator,   simple_names,   truncate_max_range,   emptyValue,   ignore.text.offset,   verbose,   cross_path_with_anno,   anno_table,   separator_anno,   filename_col )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_data — read_data","text":"data_path Path .fcs .csv files. max_cells number cells subset. useCSV Logical, input .csv .fcs. separator Separator used flow csv files (loading csv). simple_names TRUE channel description used name column, FALSE channel name description pasted together. truncate_max_range FlowCore: logical type. Default FALSE. can optionally turned avoid truncating extreme positive value instrument measurement range ..e.'$PnR'. emptyValue FlowCore: boolean indicating whether allow empty value keyword values TEXT segment. affects double delimiters treated. TRUE, double delimiters parsed pair start end single delimiter empty value. Otherwise, double delimiters parsed one part string keyword value. default TRUE. ignore.text.offset FlowCore: whether ignore keyword values TEXT segment agree HEADER. Default FALSE, throws error discrepancy found. User can turn ignore TEXT segment sure accuracy HEADER file still can read. verbose Default FALSE, TRUE file loaded something printed screen. cross_path_with_anno Defautl FALSE. TRUE 'data_path' contains files annotation table overlap loaded. anno_table Passed 'prep_fcd' separator_anno Passed 'prep_fcd' filename_col Passed 'prep_fcs'","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_data — read_data","text":"load flow cytometry dataset","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/read_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_data — read_data","text":"read_data","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_cellstates.html","id":null,"dir":"Reference","previous_headings":"","what":"runAstir_cellstates — runAstir_cellstates","title":"runAstir_cellstates — runAstir_cellstates","text":"Predict cell states using Astir. package requires python library `astir` `reticulate` work. function returns `condor` object automatically annotated cell states QC annotation, results also saved folder specified user.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_cellstates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runAstir_cellstates — runAstir_cellstates","text":"","code":"runAstir_cellstates(   fcd,   data_slot,   analysis_path,   manifest_name,   max_epochs,   learning_rate,   initial_epochs )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_cellstates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runAstir_cellstates — runAstir_cellstates","text":"fcd Flow cytometry dataset. data_slot Data slot use analysis (e.g. \"orig\" \"norm\"). analysis_path Full path output folder astir analysis. manifest_name Filename manifest file, file must located `analysis_path` folder. max_epochs Maximum number epochs. learning_rate Learning Rate. initial_epochs Initial Epochs.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_cellstates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runAstir_cellstates — runAstir_cellstates","text":"runAstir_cellstates","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_cellstates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runAstir_cellstates — runAstir_cellstates","text":"Run Astir cell state prediction","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_celltype.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Astir cell type prediction — runAstir_celltype","title":"Run Astir cell type prediction — runAstir_celltype","text":"Predict cell types using 'Astir'. package requires python library `astir` `reticulate` work. function returns `condor` object automatically annotated cell types QC annotation, results also saved folder specified user.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_celltype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Astir cell type prediction — runAstir_celltype","text":"","code":"runAstir_celltype(   fcd,   data_slot,   analysis_path,   manifest_name,   max_epochs,   learning_rate,   initial_epochs )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_celltype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Astir cell type prediction — runAstir_celltype","text":"fcd Flow cytometry dataset. data_slot Data slot use analysis (e.g. \"orig\" \"norm\"). analysis_path Full path output folder astir analysis. manifest_name Filename manifest file, file must located `analysis_path` folder. max_epochs Maximum number epochs, details see `Astir` documentation. learning_rate Learning Rate. initial_epochs initial epochs, details see `Astir` documentation.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_celltype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Astir cell type prediction — runAstir_celltype","text":"runAstir_celltype","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runAstir_celltype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Astir cell type prediction — runAstir_celltype","text":"Run Astir cell type prediction Predict cell types using 'Astir'. package requires python library `astir` `reticulate`. function still experimental extensively tested cyCONDOR. one next release document usage details dedicated vignette. moment want know feel free reach `Slack` channel. details different parameters refer `Astir` documentation.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runDM.html","id":null,"dir":"Reference","previous_headings":"","what":"runDM — runDM","title":"runDM — runDM","text":"Run Diffusion Map dimensionality reduction.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runDM — runDM","text":"","code":"runDM(   fcd,   input_type,   data_slot,   k = 10,   seed = 91,   prefix = NULL,   nPC = ncol(fcd[[input_type]][[data_slot]]),   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runDM — runDM","text":"fcd flow cytometry dataset. input_type data use calculation, e.g. \"expr\" \"pca\". data_slot data slot use calculation, e.g. \"orig\" \"norm\". k K used analysis. Default = 10. seed seed set reproducibility. prefix Optional prefix slot name output. nPC Number principal components use analysis. Default = . markers Vector marker names include exclude DM calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object. discard LOGICAL markers specified included, \"False\", excluded, \"True\", DM calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runDM — runDM","text":"function returns fcd including data frame DM coordinates saved fcd$diffmap. name output consists prefix (given) data slot. nPC given added output name.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runDM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runDM — runDM","text":"runDM See [Philipp Angerer et al. (2015): destiny: diffusion maps large-scale single-cell data R. Helmholtz-Zentrum München.] (http://bioinformatics.oxfordjournals.org/content/32/8/1241)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runFlowSOM.html","id":null,"dir":"Reference","previous_headings":"","what":"runFlowSOM — runFlowSOM","title":"runFlowSOM — runFlowSOM","text":"Run FlowSOM based clustering.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runFlowSOM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runFlowSOM — runFlowSOM","text":"","code":"runFlowSOM(   fcd,   input_type,   data_slot,   nClusters,   grid_xdim = 10,   grid_ydim = 10,   seed = 91,   prefix = NULL,   ret_model = FALSE,   nPC = ncol(fcd[[input_type]][[data_slot]]),   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runFlowSOM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runFlowSOM — runFlowSOM","text":"fcd flow cytometry dataset. input_type data use calculation, e.g. \"expr\" \"pca\". data_slot data slot use calculation, e.g. \"orig\" \"norm\". nClusters Number final clusters. grid_xdim x-axis size FlowSOM grid. Default = 10. grid_ydim y-axis size FlowSOM grid. Default = 10. seed seed set reproducibility. prefix Optional prefix slot name output. ret_model LOGICAL model saved future projection data. Default = F. nPC Number principal components use analysis. Default = . markers vector marker names include exclude calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object discard LOGICAL markers specified included, \"F\", excluded, \"T\", calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runFlowSOM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runFlowSOM — runFlowSOM","text":"function returns fcd including data frame containing FlowSOM clustering saved fcd$clustering. name output consists prefix (given) data slot defined nClusters. nPC given added output name.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runFlowSOM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runFlowSOM — runFlowSOM","text":"runFlowSOM See [Van Gassen S et al. (2015) \"FlowSOM: Using self-organizing maps visualization interpretation cytometry data.\" Cytom Part J Int Soc Anal Cytol 87: 636-645.] (https://onlinelibrary.wiley.com/doi/full/10.1002/cyto..22625)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"runPCA — runPCA","title":"runPCA — runPCA","text":"Performs Principal Component Analysis (PCA) expression matrix specified data_slot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runPCA — runPCA","text":"","code":"runPCA(   fcd,   data_slot = \"orig\",   seed = 91,   prefix = NULL,   markers = colnames(fcd$expr[[\"orig\"]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runPCA — runPCA","text":"fcd flow cytometry dataset. data_slot data slot use calculation, e.g. \"orig\" \"norm\". seed seed set reproducibility. prefix Optional prefix slot name output. markers Vector marker names include exclude calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object. discard LOGICAL markers specified included, \"F\", excluded, \"T\", calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runPCA — runPCA","text":"function returns fcd Principle Components (PC) data frame saved fcd$pca. name output consists prefix (given) data slot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runPCA — runPCA","text":"runPCA calculation PC based function prcomp R Stats Package. See RDocumentation (https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prcomp) details.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA_pseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"runPCA_pseudobulk — runPCA_pseudobulk","title":"runPCA_pseudobulk — runPCA_pseudobulk","text":"run Pricipal component analysis pseudobulk samples","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA_pseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runPCA_pseudobulk — runPCA_pseudobulk","text":"","code":"runPCA_pseudobulk(fcd)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA_pseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runPCA_pseudobulk — runPCA_pseudobulk","text":"fcd flow cytometry dataset.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA_pseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runPCA_pseudobulk — runPCA_pseudobulk","text":"runPCA_pseudobulk","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPCA_pseudobulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runPCA_pseudobulk — runPCA_pseudobulk","text":"runPCA_pseudobulk","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPhenograph.html","id":null,"dir":"Reference","previous_headings":"","what":"runPhenograph — runPhenograph","title":"runPhenograph — runPhenograph","text":"Run Phenograph based clustering.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPhenograph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runPhenograph — runPhenograph","text":"","code":"runPhenograph(   fcd,   input_type,   data_slot,   k,   seed = 91,   prefix = NULL,   nPC = ncol(fcd$pca[[data_slot]]),   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPhenograph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runPhenograph — runPhenograph","text":"fcd flow cytometry dataset. input_type data use calculation, e.g. \"expr\" \"pca\" (suggested: \"pca\"). data_slot data slot use calculation, e.g. \"orig\" \"norm\". k K value used clustering. seed seed set reproducibility. prefix Optional prefix slot name output. nPC Number principal components use analysis. markers vector marker names include exclude calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object discard LOGICAL markers specified included, \"F\", excluded, \"T\", calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPhenograph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runPhenograph — runPhenograph","text":"function returns fcd including data frame containing phenograph clustering saved fcd$clustering. name output consists prefix (given) data slot defined k. nPC given added output name.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPhenograph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runPhenograph — runPhenograph","text":"runPhenograph See [Stuchly J (2020). \"Rphenoannoy: R implementation phenograph algorithm - approximate KNN modification, based Rphenograph package\". R package version 0.1.0.] (https://github.com/stuchly/Rphenoannoy)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPseudotime.html","id":null,"dir":"Reference","previous_headings":"","what":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","title":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","text":"Function calculate Pseudotime HDFC data analysed cyCONDOR. function uses *slingshot* calculate trajectories pesudotime cell 'condor' object.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPseudotime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","text":"","code":"runPseudotime(   fcd,   reduction_method,   reduction_slot,   cluster_slot,   cluster_var,   start.clus = NULL,   end.clus = NULL,   dist.method = \"slingshot\",   use.median = FALSE,   omega = FALSE,   omega_scale = 1.5,   times = NULL,   shrink = TRUE,   extend = \"y\",   reweight = TRUE,   reassign = TRUE,   thresh = 0.001,   maxit = 15,   stretch = 2,   approx_points = NULL,   smoother = \"smooth.spline\",   shrink.method = \"cosine\",   allow.breaks = TRUE,   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPseudotime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","text":"fcd flow cytometry dataset. reduction_method Type dimensionality reduction calculate pseudotime. reduction_slot Name dimensionality reduction slot used. cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). start.clus (optional) character, indicates starting cluster(s) lineages drawn. end.clus (optional) character, indicates cluster(s) forced leaf nodes graph. dist.method (optional) character, specifies method calculating distances clusters. Default \"slingshot\", see createClusterMST details. use.median logical, whether use median (instead mean) calculating cluster centroid coordinates. omega (optional) numeric logical, granularity parameter determines distance every real cluster artificial cluster, .OMEGA. practice, makes omega maximum allowable distance two connected clusters. default, omega = Inf. omega = TRUE, maximum edge length set median edge length unsupervised MST times scaling factor (omega_scale, default = 1.5). value provided potentially useful rule thumb datasets outlying clusters multiple, distinct trajectories. See outgroup createClusterMST. omega_scale (optional) numeric, scaling factor use omega = TRUE. maximum edge length set median edge length unsupervised MST times omega_scale (default = 3). See outscale createClusterMST. times numeric, vector external times associated either clusters cells. See defineMSTPaths details. shrink logical numeric 0 1, determines whether much shrink branching lineages toward average prior split (default = TRUE). extend character, handle root leaf clusters lineages constructing initial, piece-wise linear curve. Accepted values 'y' (default), 'n', 'pc1'. See 'Details' . reweight logical, whether allow cells shared lineages reweighted curve fitting. TRUE (default), cells shared lineages iteratively reweighted based quantiles projection distances curve. See 'Details' . reassign logical, whether reassign cells lineages iteration. TRUE (default), cells added lineage projection distance curve less median distance cells currently assigned lineage. Additionally, shared cells removed lineage projection distance curve 90th percentile weight along curve less 0.1. thresh numeric, determines convergence criterion. Percent change total distance cells projections along curves must less thresh. Default 0.001, similar principal_curve. maxit numeric, maximum number iterations (default = 15), see principal_curve. stretch numeric factor curves can extrapolated beyond endpoints. Default 2, see principal_curve. approx_points numeric, whether curves approximated fixed number points. FALSE (0), approximation performed curves contain many points input data. numeric, curves approximated number points (default = 150 #cells, whichever smaller). See 'Details' principal_curve . smoother choice scatter plot smoother. principal_curve, \"lowess\" option replaced \"loess\" additional flexibility. shrink.method character denoting determine appropriate amount shrinkage branching lineage. Accepted values kernel density (default \"cosine\"), well \"tricube\" \"density\". See 'Details' . allow.breaks logical, determines whether curves branch close origin allowed different starting points. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPseudotime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","text":"runPseudotime","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runPseudotime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function of calculate Pseudotime from HDFC data analysed with cyCONDOR — runPseudotime","text":"runPseudotime `runPseudotime()` wrapper function around getLineages getCurves implemented package *slingshot*. function first calculated linages curves pseudotime converts result format compatible structure 'condor' object. user can specify parameters available getLineages  getCurves functions, arguments description copied documentation *slingshot* package.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"runUMAP — runUMAP","title":"runUMAP — runUMAP","text":"Perform UMAP dimensionality reduction expression values pca results.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runUMAP — runUMAP","text":"","code":"runUMAP(   fcd,   input_type,   data_slot,   nNeighbors = 15,   nComponents = 2,   min_dist = 0.2,   metric = \"euclidean\",   seed = 91,   prefix = NULL,   nThreads = 32,   nPC = ncol(fcd[[input_type]][[data_slot]]),   ret_model = FALSE,   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runUMAP — runUMAP","text":"fcd flow cytometry dataset. input_type data use calculation UMAP, e.g. \"expr\" \"pca\". data_slot data slot use calculation UMAP, e.g. \"orig\" \"norm\". nNeighbors Number items define neighborhood around point. Default = 15. nComponents Number components UMAP calculation. Default = 2. min_dist Min_dist UMAP calculation. Default = 0.2. metric Metric UMAP calculation. Default = \"euclidean\". seed seed set reproducibility. prefix Optional prefix slot name output. nThreads Number threads used UMAP calculation. Default = 32. nPC Number PCs used UMAP calculation. Default = . ret_model LOGICAL UMAP model saved future projection data using learnUMAP. markers Vector marker names include exclude UMAP calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object. discard LOGICAL decide markers specified included, \"F\", excluded, \"T\", UMAP calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runUMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runUMAP — runUMAP","text":"function returns fcd including data frame UMAP coordinates saved fcd$umap. name output consists prefix (given) data slot. nPC given added output name.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runUMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runUMAP — runUMAP","text":"runUMAP See [Melville J (2023). uwot: Uniform Manifold Approximation Projection (UMAP) Method Dimensionality Reduction. R package version 0.1.16](https://github.com/jlmelville/uwot) details umap method.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/run_cytonorm.html","id":null,"dir":"Reference","previous_headings":"","what":"run_cytonorm — run_cytonorm","title":"run_cytonorm — run_cytonorm","text":"Wrapper function around CytoNorm.normalize CytoNorm package.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/run_cytonorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run_cytonorm — run_cytonorm","text":"","code":"run_cytonorm(   fcd,   batch_var,   keep_fcs = TRUE,   output_dir = paste0(\"./CytoNorm_output_\", Sys.Date()),   files = NULL,   data_path = NULL,   anno_table = NULL )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/run_cytonorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run_cytonorm — run_cytonorm","text":"fcd flow cytometry dataset batch_var Column name batch variable fcd$anno$cell_anno. keep_fcs Boolean whether keep normalized FCS files output_dir. output_dir Directory save normalized FCS files temporary permanently, keep_fcs == TRUE. files Vector fcs file names samples normalized. default files contained flow cytometry dataset used. data_path File path folder .fcs files contained fcd stored. anno_table Path annotation table file.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/run_cytonorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run_cytonorm — run_cytonorm","text":"fcd normalized expression data frame saved fcd$expr$norm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/run_cytonorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"run_cytonorm — run_cytonorm","text":"run_cytonorm function assumes fcd contains trained model computed train_cytonorm. function performs normalization samples contained fcd. normalized expression values added fcd default FCS files normalized values written output_dir. See [Van Gassen et al., 2019](https://doi.org/10.1002/cyto..23904) details CytoNorm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runtSNE.html","id":null,"dir":"Reference","previous_headings":"","what":"runtSNE — runtSNE","title":"runtSNE — runtSNE","text":"Calculate tSNE dimensionality reduction.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runtSNE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runtSNE — runtSNE","text":"","code":"runtSNE(   fcd,   input_type,   data_slot,   perplexity = 30,   seed = 91,   prefix = NULL,   nThreads = 1,   nPC = ncol(fcd$pca[[data_slot]]),   markers = colnames(fcd$expr[[data_slot]]),   discard = FALSE )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runtSNE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runtSNE — runtSNE","text":"fcd flow cytometry dataset. input_type data use calculation, e.g. \"expr\" \"pca\" (suggested: \"pca\"). data_slot data slot use calculation, e.g. \"orig\" \"norm\". perplexity Value controls many nearest neighbors taken account constructing embedding (see Rtsne documentation details). seed seed set reproducibility. prefix Optional prefix slot name output. nThreads Number threads used tSNE calculation. nPC Number principal components use analysis. markers Vector marker names include exclude UMAP calculation according discard parameter. See functions used_markers measured_markers extraction markers directly condor object. discard Boolean decide markers specified included, \"F\", excluded, \"T\", UMAP calculation. Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runtSNE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runtSNE — runtSNE","text":"function returns fcd including data frame tSNE coordinates saved fcd$tSNE. name output consists prefix (given) data slot. nPC given added output name.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/runtSNE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"runtSNE — runtSNE","text":"runtSNE See [Jesse H. Krijthe (2015). Rtsne: T-Distributed Stochastic Neighbor Embedding using Barnes-Hut Implementation], (https://github.com/jkrijthe/Rtsne) details Rtsne method.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/scaleColors.html","id":null,"dir":"Reference","previous_headings":"","what":"scaleColors — scaleColors","title":"scaleColors — scaleColors","text":"Defines color coding heatmap.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/scaleColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scaleColors — scaleColors","text":"","code":"scaleColors(data = input_scale, maxvalue = NULL)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/scaleColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"scaleColors — scaleColors","text":"data data use. maxvalue value color fully red / blue.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/scaleColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"scaleColors — scaleColors","text":"Defines color coding heatmap.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/scaleColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"scaleColors — scaleColors","text":"scaleColors","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subsample_geosketch.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsampling base on geometric sketching — subsample_geosketch","title":"Subsampling base on geometric sketching — subsample_geosketch","text":"Subsamples condor object predefined number cells based geosketching algorithm (https://github.com/brianhie/geosketch). Using PCA representation subsamples dataset preserving overall structure. Important, want loose rare cell populations want skew cell numbers. Requires python package geosketch reticulate.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subsample_geosketch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsampling base on geometric sketching — subsample_geosketch","text":"","code":"subsample_geosketch(condor, pca_slot = \"orig\", n_sub = 0.5)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subsample_geosketch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsampling base on geometric sketching — subsample_geosketch","text":"condor Flow cytometry dataset. pca_slot PCA slot use sketching (e.g. \"orig\" \"norm\"). n_sub Number cells subset (default half cells).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subsample_geosketch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsampling base on geometric sketching — subsample_geosketch","text":"Returns subsampled condor object","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd.html","id":null,"dir":"Reference","previous_headings":"","what":"subset_fcd — subset_fcd","title":"subset_fcd — subset_fcd","text":"Performs random subset fcd","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset_fcd — subset_fcd","text":"","code":"subset_fcd(fcd, size, seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset_fcd — subset_fcd","text":"fcd flow cytometry dataset. size Numeric: size sub-sampling. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset_fcd — subset_fcd","text":"df_frequency","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"subset_fcd — subset_fcd","text":"subset_fcd","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd_byparam.html","id":null,"dir":"Reference","previous_headings":"","what":"subset_fcd_byparam — subset_fcd_byparam","title":"subset_fcd_byparam — subset_fcd_byparam","text":"Performs random subset fcd","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd_byparam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset_fcd_byparam — subset_fcd_byparam","text":"","code":"subset_fcd_byparam(fcd, param, size, seed = 91)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd_byparam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset_fcd_byparam — subset_fcd_byparam","text":"fcd flow cytometry dataset. param Name parameter used equaly subset fcd. columns cell annotation table. size Numeric: size sub-sampling element `param`. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd_byparam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset_fcd_byparam — subset_fcd_byparam","text":"subset_fcd_byparam","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/subset_fcd_byparam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"subset_fcd_byparam — subset_fcd_byparam","text":"subset_fcd_byparam","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_classifier_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","title":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","text":"function trains machine learning classifier clinical classification HDFC data. function uses *CytoDx* framework.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_classifier_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","text":"","code":"train_classifier_model(   fcd,   input_type,   data_slot,   sample_names = \"expfcs_filename\",   classification_variable,   family = \"binomial\",   type1 = \"response\",   type2 = \"response\",   parallelCore = 1,   reg = FALSE,   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_classifier_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","text":"fcd flow cytometry data set. input_type data use calculation, e.g. \"expr\" (suggested option). data_slot Name data slot use classification, suggested options \"orig\" \"norm\". sample_names Column name metadata table containing samples names. classification_variable Vector (length number cells) classes classify (e.g. ctrl/dis). family Response type. Must one following: \"gaussian\",\"binomial\",\"poisson\",\"multinomial\",\"cox\",\"mgaussian\". type1 Type first level prediction. Type prediction required. Type \"link\" gives linear predictors \"binomial\", \"multinomial\", \"poisson\" \"cox\" models; \"gaussian\" models gives fitted values. Type \"response\" gives fitted probabilities \"binomial\" \"multinomial\", fitted mean \"poisson\" fitted relative-risk \"cox\"; \"gaussian\" type \"response\" equivalent type \"link\". type2 Type second level prediction. parallelCore Number cores used. reg elestic net regularization used (Default: FALSE). seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_classifier_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","text":"train_classifier_model","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_classifier_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train a machine learning classifier for the clinical classification of HDFC data. — train_classifier_model","text":"Train Clinical Classifier `train_classifier_model()` wrapper function around CytoDx.fit implemented package *CytoDx*. user can specify parameters available CytoDx.fit functions, arguments description copied documentation *CytoDx* package. function output *condor* object including machine learning model *extras* slot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_cytonorm.html","id":null,"dir":"Reference","previous_headings":"","what":"train_cytonorm — train_cytonorm","title":"train_cytonorm — train_cytonorm","text":"Wrapper function around CytoNorm.train CytoNorm package.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_cytonorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"train_cytonorm — train_cytonorm","text":"","code":"train_cytonorm(   fcd,   batch_var,   remove_param = NULL,   seed = 91,   files = NULL,   data_path = NULL,   FlowSOM_param = list(nCells = 5000, xdim = 5, ydim = 5, nClus = 10, scale = FALSE) )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_cytonorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"train_cytonorm — train_cytonorm","text":"fcd flow cytometry dataset batch_var Column name batch variable fcd$anno$cell_anno. remove_param Parameters/markers excluded learning batch effect training model. seed seed set reproducibility. files Vector FCS file names reference samples used training model. files == NULL, files contained fcd used. data_path File path folder .fcs files contained fcd stored. parameter need provided, unless folder .fcs files stored changed. FlowSOM_param list parameters pass FlowSOM algorithm. Default= list(nCells = 5000, xdim = 5, ydim = 5, nClus = 10, scale= FALSE)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_cytonorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"train_cytonorm — train_cytonorm","text":"function returns fcd trained model saved fcd$extras$cytonorm_model.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_cytonorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"train_cytonorm — train_cytonorm","text":"train_cytonorm train_cytonorm' takes fcd input learns batch effect given batch variable across reference samples provided user using CytoNorm algorithm. function returns fcd trained model can used input run_cytonorm function normalize samples trained model. See [Van Gassen et al., 2019](https://doi.org/10.1002/cyto..23904) details CytoNorm.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_transfer_model.html","id":null,"dir":"Reference","previous_headings":"","what":"train_transfer_model — train_transfer_model","title":"train_transfer_model — train_transfer_model","text":"Train machine learning model transfer cell labels (function implements caret workflow)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_transfer_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"train_transfer_model — train_transfer_model","text":"","code":"train_transfer_model(   fcd,   input_type,   data_slot,   cluster_slot,   cluster_var,   method = \"knn\",   tuneLength = 5,   trControl = caret::trainControl(method = \"cv\"),   seed = 91 )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_transfer_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"train_transfer_model — train_transfer_model","text":"fcd flow cytometry dataset. input_type Data use calculation UMAP, e.g. expr pca. data_slot Name input_type data slot use e.g. orig, prefix added. cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters metaclusters). method string specifying classification regression model use, default method = \"knn\". See train possible values. tuneLength integer denoting amount granularity tuning parameter grid, default tuneLength = 5. trControl list values define function acts, default trControl = caret::trainControl(method = \"cv\"). See trainControl <http://topepo.github.io/caret/using---model--train.html>. seed seed set reproducibility.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_transfer_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"train_transfer_model — train_transfer_model","text":"train_transfer_model returns fcd model associated visualizations saved fcd$extras$lt_model.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/train_transfer_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"train_transfer_model — train_transfer_model","text":"train_transfer_model train_transfer_model uses train.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/transform_data.html","id":null,"dir":"Reference","previous_headings":"","what":"transform_data — transform_data","title":"transform_data — transform_data","text":"Data transformation, function runs within prep_fcd wrapper, logicle tranformation derived Cytofkit.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/transform_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"transform_data — transform_data","text":"","code":"transform_data(keep, transformation, original_data, verbose, cofactor = 5)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/transform_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"transform_data — transform_data","text":"keep Vector parameter keep analysis. transformation transformation perform. original_data Original data verbose Logical, TRUE transformation parameters printed. cofactor cofactor used 'arcsinh' transformation, default 5, can set 150 HDFC data.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/transform_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"transform_data — transform_data","text":"transformed flow cytometry dataset","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/transform_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"transform_data — transform_data","text":"transform_data","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/used_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"used_markers — used_markers","title":"used_markers — used_markers","text":"returns vector markers given input_type data slot.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/used_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"used_markers — used_markers","text":"","code":"used_markers(fcd, input_type, prefix = NULL, data_slot, mute = F)"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/used_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"used_markers — used_markers","text":"fcd flow cytometry dataset. input_type Data marker extraction, e.g. \"pca\", \"umap\", \"phenograph\", \"FlowSOM\" prefix Optional prefix specific data_slot, used. data_slot Data slot marker extraction, e.g. \"orig\" \"norm\". mute LOGICAL, output function wanted (F) (T). Default = F.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/used_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"used_markers — used_markers","text":"function returns vector containing markers used specified method.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/used_markers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"used_markers — used_markers","text":"used_markers","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/write_fcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the results from cyCONDOR as FCS file(s) — write_fcs","title":"Save the results from cyCONDOR as FCS file(s) — write_fcs","text":"Saves expression data, annotation data (optionally) results cyCONDOR analysis (dimensionality reduction, clustering) one FCS file(s).","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/write_fcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the results from cyCONDOR as FCS file(s) — write_fcs","text":"","code":"write_fcs(   fcd = condor,   expr_slot = \"orig\",   reduction_method = NULL,   reduction_slot = NULL,   cluster_slot = NULL,   cluster_var = NULL,   split_by = NULL,   dir = paste0(getwd(), \"/\"),   filename )"},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/write_fcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the results from cyCONDOR as FCS file(s) — write_fcs","text":"fcd flow cytometry data set expr_slot expr_slot take marker expression values, default \"orig\". reduction_method string specifying dimensionality reduction method use. reduction_slot string specifying reduction name reduction_method use visualization, e.g. \"pca_orig\". cluster_slot string specifying clustering slot use find variable specified cluster_var. cluster_var string specifying variable name cluster_slot identifies cell population labels used (e.g. clusters, metaclusters predicted labels). Must numeric function - factors converted automatically. split_by NULL character string specifying metadata variable (e.g. sample_ID) split data. NULL, one FCS file data generated. dir string specifying directory FCS file(s) /saved. Current working directory default. filename string specifying filename FCS file. split_by defined, automatic suffix according defined variable assigned FCS files.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/write_fcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the results from cyCONDOR as FCS file(s) — write_fcs","text":"Message FCS file(s) saved defined directory.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/reference/write_fcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the results from cyCONDOR as FCS file(s) — write_fcs","text":"Save results cyCONDOR FCS file(s)","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-031","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.3.1","title":"cyCONDOR 0.3.1","text":"Added function condor_info easily explore content condor object. Solved Issue #31, color pallette reversed plot_marker_ridgeplot() function. Solved Issue #30, pseudotime function can now use prefix argument. Improved documentation regarding use different co-factors using archsin data transformation. Solved Issue #33, plot_marker_dotplot function now alpha argument control transparency dots. Solved Issue #34, plot_marker_ridgeplot now title argument. Solved Issue #19, empty fcs csv file provided prep_fcd function stop point corrupted file.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-030","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.3.0","title":"cyCONDOR 0.3.0","text":"Bug fix data projection specific parameters removed UMAP calculation Updated official Docker image latest Bioconductor version (Bioconductor 3.20, R 4.4.2) Completed documentation Astir workflow. Added parameter select number PCs markers UMAP projection learnUMAP function. Added documentation guide install cyCONDOR Silicon Mac. now compiled version Rphenoannoy package. Simplified installation process, now automatically installing also GitHub dependencies. Enable Geometric Sketching subset condor object function geometric_sketching Developed function (condor_session_info) include SessionInfo condor object increase tackability analysis. Included storage statistical test results condor object Added option display statistics plot_frequency_boxplot function - far wilcox, t_test diffcyt Added function correlate cyCONDOR results manual gating FlowJo similar software (corr_plot_comparison) Experimental: Added function write FCS files condor object (write_fcs). Currently function writing .fcs file cyCONDOR transformed values, change original values next iteration extensive testing.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-021","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.2.1","title":"cyCONDOR 0.2.1","text":"Included help function assign metaclusters (Thanks Lucas Secchim Ribeiro) Removal redundant color_palette parameter redundant lines source code Added turkey hsd post-hoc test frequency_anova_test (see issue #10) Modified emmeans test frequency_anova_test (see issue #10) Improvement error messages","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-020","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.2.0","title":"cyCONDOR 0.2.0","text":"Bump major version official release publication Changed order events prep_fcd function. makes process faster (especially smaller machines) reduces usage memory. Added function subset_fcd_byparam. function allows randomly subset condor object proportionally across selected parameter. example possible randomly subset n cells samples. Included professionalization read_fcd function. allows user customize aspects condor object Included cyCONDOR version condor object extras slot. enables user trace version used analysis.","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-016","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.1.6","title":"cyCONDOR 0.1.6","text":"Reorganization existing visualization functions including harmonization function names function arguments, utilization condor object main input object addition extensive documentation error messages. Added visualization functions plot_counts_barplot(), plot_marker_ridgeplot() plot_marker_boxplot() Added getTable() function generate tables cell population counts frequencies, well mean median marker expression cell population - sample - marker combinations. boxplot_and_stats() function replaces plot_frequency_boxplot() function visualization several functions conduct statistical tests population frequencies. Added wrapper functions around basic statistical tests compare cell population frequencies groups samples (frequency_t_test(), frequency_wilcox_test(), frequency_anova_test(), frequency_kruskal_test(), frequency_friedman_test()) Added prepInputDiffcyt() function transform condor object SummarizedExperiment object compatible diffcyt package differential testing. Renaming arguments runPseudotime() function harmonize within package Renaming arguments metaclustering() function harmonize within package Updated documentation Renaming arguments multiple function harmonize within package Setting default seed multiple functions Added functions use CytoNorm algorithm batch normalization Bug fixes prep_flw() merging annotation removing parameters, saving import parameters extras slot fcd Added new parameters runFlowSOM() determine size FlowSOM grid implemented marker selection (runPCA(), runUMAP(), runDM(), runtSNE(), runPhenograph(), runFlowSOM()), saving marker selection extra slot fcd Added functions extract markers present fcd (measured_markers()) selected markers (used_markers()) Added function visualize PC loadings Simplified data loading transformation function including useful error messages Included arcsinh transformation cofactor 5 cyTOF data","code":""},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"cycondor-015","dir":"Changelog","previous_headings":"","what":"cyCONDOR 0.1.5","title":"cyCONDOR 0.1.5","text":"Fix bug definition tab separator loading csv files Added clr transformation CITE-seq data together minor improvements transformation function Add clustering option confusion matrix Added visualization 2D plots PCA Option export plots raster Added function plot conventional flow 2d plots Added function plot density plot marker expression Implementation Astir (Python) Restructured documentation vignette Added GitPages website documentation tutorials Name change cyCONDOR Edited pseudotime function run loop starting clusters","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"reference-name-condor-0-1-4","dir":"Changelog","previous_headings":"","what":"Reference name: condor 0.1.4","title":"cyCONDOR 0.1.4","text":"Add ML classifier CytoML Included Hmisc requirment Violin plto marker function Fix bug UMAP plotting function faceting (default facet_by_fariable set FALSE NULL) Fixed package loading message Tested diffusion map imporoved function Tested pseutodime improved function Splittied functions multiple files make easier find Improved package documentation Improved package vignette","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"reference-name-condor-0-1-3","dir":"Changelog","previous_headings":"","what":"Reference name: condor 0.1.3","title":"cyCONDOR 0.1.3","text":"FlowSOM function can retain model plot SOM tree afterwards Added Function read flowjo workspaces condor campatible format Fixed filter function ‘extra’ slot occupied","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"reference-name-condor-0-1-2","dir":"Changelog","previous_headings":"","what":"Reference name: condor 0.1.2","title":"cyCONDOR 0.1.2","text":"Several bug fixes Added function calculate tSNE dimensionality reduction Possibility limit number PC used clustering non-linear dimensionality reduction Added function calculate Pseudotime (slignshot) Included easy--export differential frequency table Added function random subsetting dataset Added visualization PC loadings Added Pseudobulk PCA Analysis Added function easily export cellular frequency Added function change parameter names (fcs files) Added function visualize DRs density plot Added Violin plot visualization marker expression Included option cluster rows columns heatmaps Included option show cluster numbers dotplot Add multicore support tSNE Added workflow UMAP projection label transfer","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"reference-name-condor-0-1-1","dir":"Changelog","previous_headings":"","what":"Reference name: condor 0.1.1","title":"cyCONDOR 0.1.1","text":"Add function merge condor objects Updated LoadFCS function fully compatible .csv files Updated UMAP function run multiple cores Updated RPhenograph function run multiple cores Added function run FlowSOM clustering Fix issues UMAP parametes selections Added option specifiy delimiter csv files","code":""},{"path":[]},{"path":"https://lorenzobonaguro.github.io/cyCONDOR, https://github.com/lorenzobonaguro/cyCONDOR/news/index.html","id":"reference-name-condor-0-1-0","dir":"Changelog","previous_headings":"","what":"Reference name: condor 0.1.0","title":"cyCONDOR 0.1.0","text":"Initial release","code":""}]
